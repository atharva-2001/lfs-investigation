2025-01-22T19:58:07.0635430Z ##[group]Run pytest tardis --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"
2025-01-22T19:58:07.0636520Z [36;1mpytest tardis --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append -m "not continuum"[0m
2025-01-22T19:58:07.0693790Z shell: /bin/bash -l {0}
2025-01-22T19:58:07.0694010Z env:
2025-01-22T19:58:07.0694150Z   CACHE_NUMBER: 0
2025-01-22T19:58:07.0694650Z   PYTEST_FLAGS: --tardis-regression-data=/Users/runner/work/tardis/tardis/tardis-regression-data --cov=tardis --cov-report=xml --cov-report=html --cov-append
2025-01-22T19:58:07.0695150Z   CODECOV_TOKEN: 
2025-01-22T19:58:07.0695440Z   MAMBA_ROOT_PREFIX: /Users/runner/micromamba
2025-01-22T19:58:07.0695700Z   MAMBA_EXE: /Users/runner/micromamba-bin/micromamba
2025-01-22T19:58:07.0696000Z   CONDARC: /Users/runner/work/_temp/setup-micromamba/.condarc
2025-01-22T19:58:07.0696310Z ##[endgroup]
2025-01-22T19:58:21.7507630Z ============================= test session starts ==============================
2025-01-22T19:58:21.7509540Z platform darwin -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
2025-01-22T19:58:21.7510510Z rootdir: /Users/runner/work/tardis/tardis
2025-01-22T19:58:21.7511250Z configfile: pyproject.toml
2025-01-22T19:58:21.7512160Z plugins: cov-5.0.0, html-4.1.1, metadata-3.1.1, doctestplus-1.2.1, anyio-4.4.0
2025-01-22T19:58:21.7517280Z collected 1796 items / 2 deselected / 1794 selected
2025-01-22T19:58:21.7517600Z 
2025-01-22T19:58:25.9574390Z tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
2025-01-22T19:58:27.7310850Z tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
2025-01-22T19:58:28.8445180Z tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
2025-01-22T19:58:30.1776090Z tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
2025-01-22T19:58:30.1879420Z tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
2025-01-22T19:58:31.3511740Z tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
2025-01-22T19:58:31.7120310Z tardis/grid/tests/test_grid.py .                                         [  2%]
2025-01-22T19:58:31.7140530Z tardis/gui/tests/test_gui.py s                                           [  2%]
2025-01-22T19:58:36.0500500Z tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
2025-01-22T19:58:36.0700270Z tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
2025-01-22T19:58:36.1204960Z tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
2025-01-22T19:59:09.6098020Z tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
2025-01-22T19:59:09.6412380Z tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
2025-01-22T19:59:09.6548070Z tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
2025-01-22T19:59:09.6967700Z tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
2025-01-22T19:59:09.7221940Z tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
2025-01-22T19:59:10.0253670Z tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
2025-01-22T19:59:10.6677150Z tardis/io/tests/test_atomic.py .....                                     [  7%]
2025-01-22T19:59:10.6853240Z tardis/io/tests/test_decay.py ..                                         [  7%]
2025-01-22T19:59:10.9434840Z tardis/io/tests/test_model_reader.py ......                              [  7%]
2025-01-22T19:59:10.9535140Z tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
2025-01-22T19:59:41.6228350Z tardis/model/tests/test_base.py ........................................ [ 10%]
2025-01-22T19:59:42.4895500Z ............                                                             [ 10%]
2025-01-22T19:59:44.9312250Z tardis/model/tests/test_csvy_model.py .........                          [ 11%]
2025-01-22T19:59:44.9737870Z tardis/model/tests/test_density.py ..                                    [ 11%]
2025-01-22T19:59:46.1519090Z tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
2025-01-22T19:59:47.4654680Z tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
2025-01-22T19:59:49.5738530Z tardis/opacities/tests/test_tau_sobolev.py ..                            [ 12%]
2025-01-22T19:59:52.5315540Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py ..E      [ 12%]
2025-01-22T20:00:31.9863280Z tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
2025-01-22T20:00:41.3952210Z tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
2025-01-22T20:00:42.5397500Z tardis/plasma/tests/test_complete_plasmas.py .....................s..... [ 13%]
2025-01-22T20:00:44.7839710Z s....ssssss............s............ss.....s....ssssss............s..... [ 18%]
2025-01-22T20:00:46.0252560Z .......ss.....s....ssssss............s............ss.....s....ssssss.... [ 22%]
2025-01-22T20:00:48.1365390Z ........s............ss.....s........ss............s............ss.....s [ 26%]
2025-01-22T20:00:50.4534940Z ........ss............s............ss.....s....ssssss............s...... [ 30%]
2025-01-22T20:00:51.2589690Z ......ss.....s....ssssss............s............ss.....s.ss.ssssss..... [ 34%]
2025-01-22T20:00:53.7657180Z .......s............ss.....s....ssssss............s............ss.....s. [ 38%]
2025-01-22T20:00:56.3920860Z ...ssssss............s............ss.....s....ssssss............s....... [ 42%]
2025-01-22T20:01:21.7672390Z .....ss.....s....ssssss.....EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 46%]
2025-01-22T20:02:04.4226400Z EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 50%]
2025-01-22T20:02:13.4111620Z EEEEEEEEEEEEE.......s............ss.....s....ssssss............s........ [ 54%]
2025-01-22T20:02:15.4702360Z ....ss.....s....ssssss..........................s.....s....ssss......... [ 58%]
2025-01-22T20:02:15.7749620Z ...................s.....s....ssss.......                                [ 60%]
2025-01-22T20:02:16.0248780Z tardis/plasma/tests/test_hdf_plasma.py ................................. [ 62%]
2025-01-22T20:02:16.0380360Z ......                                                                   [ 62%]
2025-01-22T20:02:16.3578520Z tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
2025-01-22T20:03:43.8590910Z tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
2025-01-22T20:03:43.8635330Z tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
2025-01-22T20:03:59.7309910Z tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
2025-01-22T20:04:08.5948320Z tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
2025-01-22T20:04:09.0743560Z tardis/simulation/tests/test_convergence.py .....                        [ 64%]
2025-01-22T20:04:15.1939330Z tardis/simulation/tests/test_simulation.py .............                 [ 65%]
2025-01-22T20:04:15.2058180Z tardis/spectrum/tests/test_cuda_formal_integral.py sssssssssssssssssssss [ 66%]
2025-01-22T20:04:15.4560710Z ssss...ssssssssssssssssssssss                                            [ 67%]
2025-01-22T20:04:15.4607710Z tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
2025-01-22T20:04:17.2373310Z tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
2025-01-22T20:04:17.2517130Z ..........                                                               [ 69%]
2025-01-22T20:04:17.3715700Z tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
2025-01-22T20:04:17.3912570Z .........                                                                [ 72%]
2025-01-22T20:04:36.2258850Z tardis/spectrum/tests/test_spectrum_solver.py ....                       [ 72%]
2025-01-22T20:05:35.6230960Z tardis/tests/test_tardis_full.py ....                                    [ 72%]
2025-01-22T20:07:05.4622300Z tardis/tests/test_tardis_full_formal_integral.py ................        [ 73%]
2025-01-22T20:07:05.5130920Z tardis/tests/test_util.py .............................................  [ 75%]
2025-01-22T20:07:07.6790130Z tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
2025-01-22T20:07:13.1563670Z tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
2025-01-22T20:07:13.3350140Z tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
2025-01-22T20:07:13.3465690Z tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
2025-01-22T20:07:13.3729000Z sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
2025-01-22T20:07:20.7835290Z tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py x..       [ 81%]
2025-01-22T20:07:20.7955700Z tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
2025-01-22T20:07:23.3507140Z tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
2025-01-22T20:07:23.7114030Z tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
2025-01-22T20:07:24.4598040Z tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
2025-01-22T20:07:24.5576430Z XX.........                                                              [ 84%]
2025-01-22T20:07:24.5860830Z tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
2025-01-22T20:07:24.8163850Z tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
2025-01-22T20:07:25.1045680Z .....                                                                    [ 85%]
2025-01-22T20:07:33.9698820Z tardis/transport/montecarlo/tests/test_rpacket_tracker.py ......         [ 85%]
2025-01-22T20:07:33.9885660Z tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
2025-01-22T20:07:33.9914930Z tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
2025-01-22T20:07:35.2036670Z tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
2025-01-22T20:07:35.2193390Z tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
2025-01-22T20:07:37.7032280Z tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py . [ 86%]
2025-01-22T20:07:37.7035230Z                                                                          [ 86%]
2025-01-22T20:07:38.2265330Z tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
2025-01-22T20:07:39.7781470Z tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
2025-01-22T20:07:41.3705710Z ......                                                                   [ 88%]
2025-01-22T20:07:44.7442240Z tardis/visualization/tools/tests/test_liv_plot.py ...................... [ 90%]
2025-01-22T20:07:48.3139820Z .............................                                            [ 91%]
2025-01-22T20:07:51.1967340Z tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
2025-01-22T20:07:58.2772490Z ....                                                                     [ 92%]
2025-01-22T20:08:02.8900750Z tardis/visualization/tools/tests/test_sdec_plot.py ..................... [ 94%]
2025-01-22T20:08:08.8288340Z ..............................                                           [ 95%]
2025-01-22T20:08:09.1867380Z tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
2025-01-22T20:08:09.2325460Z ....                                                                     [ 96%]
2025-01-22T20:08:10.3143240Z tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
2025-01-22T20:08:10.7682300Z ..................                                                       [ 98%]
2025-01-22T20:11:20.2744660Z tardis/visualization/widgets/tests/test_shell_info.py .................. [ 99%]
2025-01-22T20:11:26.2405930Z ......                                                                   [100%]
2025-01-22T20:11:26.2406430Z 
2025-01-22T20:11:26.2406580Z ==================================== ERRORS ====================================
2025-01-22T20:11:26.2406990Z _________ ERROR at setup of test_legacy_chianti_collisional_strengths __________
2025-01-22T20:11:26.2407390Z 
2025-01-22T20:11:26.2407800Z atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=271741 Levels=24806>
2025-01-22T20:11:26.2408260Z 
2025-01-22T20:11:26.2408360Z     @pytest.fixture
2025-01-22T20:11:26.2408780Z     def legacy_chianti_collision_rate_plasma_solver(atomic_dataset):
2025-01-22T20:11:26.2409170Z         atom_data = copy.deepcopy(atomic_dataset)
2025-01-22T20:11:26.2409680Z         atom_data.prepare_atom_data([1], "macroatom", [(1, 0)], [])
2025-01-22T20:11:26.2410150Z >       return atom_data.nlte_data.get_collision_matrix(
2025-01-22T20:11:26.2410550Z             (1, 0), np.array([10000, 20000])
2025-01-22T20:11:26.2410910Z         )
2025-01-22T20:11:26.2411070Z 
2025-01-22T20:11:26.2411350Z tardis/plasma/equilibrium/tests/test_collisional_transitions.py:82: 
2025-01-22T20:11:26.2411960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2412250Z 
2025-01-22T20:11:26.2412580Z self = <tardis.io.atom_data.nlte_data.NLTEData object at 0x15ae0c470>
2025-01-22T20:11:26.2413100Z species = (1, 0), t_electrons = array([10000, 20000])
2025-01-22T20:11:26.2413470Z 
2025-01-22T20:11:26.2413690Z     def get_collision_matrix(self, species, t_electrons):
2025-01-22T20:11:26.2414240Z         """
2025-01-22T20:11:26.2414650Z         Creat collision matrix by interpolating the C_ul values for
2025-01-22T20:11:26.2428030Z         the desired temperatures.
2025-01-22T20:11:26.2428280Z         """
2025-01-22T20:11:26.2428490Z >       c_ul_matrix = self.C_ul_interpolator[species](t_electrons)
2025-01-22T20:11:26.2428820Z E       AttributeError: 'NLTEData' object has no attribute 'C_ul_interpolator'
2025-01-22T20:11:26.2429040Z 
2025-01-22T20:11:26.2429140Z tardis/io/atom_data/nlte_data.py:91: AttributeError
2025-01-22T20:11:26.2429560Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_rad] _
2025-01-22T20:11:26.2429910Z 
2025-01-22T20:11:26.2430050Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2430410Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2430710Z        't046000', 't048000'],
2025-01-22T20:11:26.2430910Z       dtype='object')
2025-01-22T20:11:26.2431050Z key = 'cups'
2025-01-22T20:11:26.2431190Z 
2025-01-22T20:11:26.2431290Z     def get_loc(self, key):
2025-01-22T20:11:26.2431520Z         """
2025-01-22T20:11:26.2431830Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2432120Z     
2025-01-22T20:11:26.2432350Z         Parameters
2025-01-22T20:11:26.2432570Z         ----------
2025-01-22T20:11:26.2432850Z         key : label
2025-01-22T20:11:26.2433010Z     
2025-01-22T20:11:26.2433220Z         Returns
2025-01-22T20:11:26.2433360Z         -------
2025-01-22T20:11:26.2433660Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2433930Z     
2025-01-22T20:11:26.2434130Z         Examples
2025-01-22T20:11:26.2434310Z         --------
2025-01-22T20:11:26.2434600Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2434800Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2435080Z         1
2025-01-22T20:11:26.2435300Z     
2025-01-22T20:11:26.2435490Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2435800Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2436040Z         slice(1, 3, None)
2025-01-22T20:11:26.2447740Z     
2025-01-22T20:11:26.2447990Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2448300Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2448560Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2448780Z         """
2025-01-22T20:11:26.2449030Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2449270Z         try:
2025-01-22T20:11:26.2449470Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2449620Z 
2025-01-22T20:11:26.2449880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2450350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2450730Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2451060Z     ???
2025-01-22T20:11:26.2451280Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2451590Z     ???
2025-01-22T20:11:26.2451930Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2452280Z     ???
2025-01-22T20:11:26.2452430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2452580Z 
2025-01-22T20:11:26.2452630Z >   ???
2025-01-22T20:11:26.2452750Z E   KeyError: 'cups'
2025-01-22T20:11:26.2452840Z 
2025-01-22T20:11:26.2453000Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2453220Z 
2025-01-22T20:11:26.2453410Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2453630Z 
2025-01-22T20:11:26.2454110Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2454630Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2456030Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2456670Z 
2025-01-22T20:11:26.2456740Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2456940Z     def plasma(
2025-01-22T20:11:26.2457140Z         self,
2025-01-22T20:11:26.2457350Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2457510Z         config,
2025-01-22T20:11:26.2457700Z     ):
2025-01-22T20:11:26.2457900Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2458120Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2458270Z 
2025-01-22T20:11:26.2458360Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2458680Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2458930Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2459210Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2459600Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2459890Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2460170Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2460450Z     return BasePlasma(
2025-01-22T20:11:26.2460690Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2460940Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2461260Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2461490Z     self.update(**kwargs)
2025-01-22T20:11:26.2461760Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2462040Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2462370Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2462690Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2463120Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2463560Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2464290Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2464600Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2464960Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2465310Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2465720Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2466120Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2466620Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2467080Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2467450Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2467820Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2468260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2468670Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2469090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2469460Z     return self.apply_standard()
2025-01-22T20:11:26.2469850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2470280Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2470740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2471180Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2471570Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2472160Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2472510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2472910Z     return self._get_value(key)
2025-01-22T20:11:26.2473350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2473740Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2474020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2474190Z 
2025-01-22T20:11:26.2474320Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2474800Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2475200Z        't046000', 't048000'],
2025-01-22T20:11:26.2475380Z       dtype='object')
2025-01-22T20:11:26.2475590Z key = 'cups'
2025-01-22T20:11:26.2475680Z 
2025-01-22T20:11:26.2475790Z     def get_loc(self, key):
2025-01-22T20:11:26.2475960Z         """
2025-01-22T20:11:26.2476270Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2491430Z     
2025-01-22T20:11:26.2491630Z         Parameters
2025-01-22T20:11:26.2491830Z         ----------
2025-01-22T20:11:26.2491970Z         key : label
2025-01-22T20:11:26.2492100Z     
2025-01-22T20:11:26.2492210Z         Returns
2025-01-22T20:11:26.2492340Z         -------
2025-01-22T20:11:26.2492540Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2492880Z     
2025-01-22T20:11:26.2492990Z         Examples
2025-01-22T20:11:26.2493140Z         --------
2025-01-22T20:11:26.2493320Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2493550Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2493740Z         1
2025-01-22T20:11:26.2493850Z     
2025-01-22T20:11:26.2494010Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2494230Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2494920Z         slice(1, 3, None)
2025-01-22T20:11:26.2495070Z     
2025-01-22T20:11:26.2495250Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2495530Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2495770Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2496000Z         """
2025-01-22T20:11:26.2496220Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2496420Z         try:
2025-01-22T20:11:26.2496620Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2496830Z         except KeyError as err:
2025-01-22T20:11:26.2497050Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2497340Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2497610Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2497830Z             ):
2025-01-22T20:11:26.2497980Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2498180Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2498370Z E           KeyError: 'cups'
2025-01-22T20:11:26.2498470Z 
2025-01-22T20:11:26.2498710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2499130Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:26.2501560Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:26.2502140Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:26.2502630Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:26.2503220Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:26.2504130Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-g_electron] _
2025-01-22T20:11:26.2504460Z 
2025-01-22T20:11:26.2504580Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2504950Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2505260Z        't046000', 't048000'],
2025-01-22T20:11:26.2505410Z       dtype='object')
2025-01-22T20:11:26.2505550Z key = 'cups'
2025-01-22T20:11:26.2505630Z 
2025-01-22T20:11:26.2505680Z     def get_loc(self, key):
2025-01-22T20:11:26.2505840Z         """
2025-01-22T20:11:26.2506030Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2506270Z     
2025-01-22T20:11:26.2506380Z         Parameters
2025-01-22T20:11:26.2506520Z         ----------
2025-01-22T20:11:26.2506650Z         key : label
2025-01-22T20:11:26.2506780Z     
2025-01-22T20:11:26.2506880Z         Returns
2025-01-22T20:11:26.2507000Z         -------
2025-01-22T20:11:26.2507190Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2507430Z     
2025-01-22T20:11:26.2507550Z         Examples
2025-01-22T20:11:26.2507670Z         --------
2025-01-22T20:11:26.2507820Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2508020Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2508200Z         1
2025-01-22T20:11:26.2508310Z     
2025-01-22T20:11:26.2508450Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2508660Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2508840Z         slice(1, 3, None)
2025-01-22T20:11:26.2508980Z     
2025-01-22T20:11:26.2509120Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2509350Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2509570Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2509750Z         """
2025-01-22T20:11:26.2509890Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2510270Z         try:
2025-01-22T20:11:26.2510420Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2510580Z 
2025-01-22T20:11:26.2510780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2511150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2511420Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2511640Z     ???
2025-01-22T20:11:26.2511810Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2512020Z     ???
2025-01-22T20:11:26.2512300Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2512620Z     ???
2025-01-22T20:11:26.2512770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2512930Z 
2025-01-22T20:11:26.2512980Z >   ???
2025-01-22T20:11:26.2513110Z E   KeyError: 'cups'
2025-01-22T20:11:26.2513200Z 
2025-01-22T20:11:26.2513300Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2513480Z 
2025-01-22T20:11:26.2513610Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2513820Z 
2025-01-22T20:11:26.2513990Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2514560Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2515410Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2515990Z 
2025-01-22T20:11:26.2516200Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2516400Z     def plasma(
2025-01-22T20:11:26.2516530Z         self,
2025-01-22T20:11:26.2516670Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2516820Z         config,
2025-01-22T20:11:26.2516940Z     ):
2025-01-22T20:11:26.2517080Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2517320Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2517460Z 
2025-01-22T20:11:26.2517560Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2517810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2518060Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2518260Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2518500Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2518770Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2518990Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2519200Z     return BasePlasma(
2025-01-22T20:11:26.2519360Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2519550Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2519730Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2519910Z     self.update(**kwargs)
2025-01-22T20:11:26.2520080Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2520290Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2520530Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2520760Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2521090Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2521480Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2521830Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2522150Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2522410Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2522710Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2523250Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2523590Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2524020Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2524470Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2524830Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2525130Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2525480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2525870Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2526230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2526560Z     return self.apply_standard()
2025-01-22T20:11:26.2526910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2527320Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2527730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2528130Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2528470Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2528780Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2529110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2529470Z     return self._get_value(key)
2025-01-22T20:11:26.2529810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2530310Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2530530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2530690Z 
2025-01-22T20:11:26.2530820Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2531190Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2531480Z        't046000', 't048000'],
2025-01-22T20:11:26.2531640Z       dtype='object')
2025-01-22T20:11:26.2531770Z key = 'cups'
2025-01-22T20:11:26.2531850Z 
2025-01-22T20:11:26.2531910Z     def get_loc(self, key):
2025-01-22T20:11:26.2532060Z         """
2025-01-22T20:11:26.2532260Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2532500Z     
2025-01-22T20:11:26.2532610Z         Parameters
2025-01-22T20:11:26.2532740Z         ----------
2025-01-22T20:11:26.2532870Z         key : label
2025-01-22T20:11:26.2533000Z     
2025-01-22T20:11:26.2533100Z         Returns
2025-01-22T20:11:26.2533220Z         -------
2025-01-22T20:11:26.2533410Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2533630Z     
2025-01-22T20:11:26.2533740Z         Examples
2025-01-22T20:11:26.2533880Z         --------
2025-01-22T20:11:26.2534030Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2534240Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2534410Z         1
2025-01-22T20:11:26.2534520Z     
2025-01-22T20:11:26.2534660Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2534870Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2535050Z         slice(1, 3, None)
2025-01-22T20:11:26.2535190Z     
2025-01-22T20:11:26.2535330Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2535550Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2535780Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2535970Z         """
2025-01-22T20:11:26.2536120Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2536690Z         try:
2025-01-22T20:11:26.2536840Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2537040Z         except KeyError as err:
2025-01-22T20:11:26.2537230Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2537450Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2537680Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2537890Z             ):
2025-01-22T20:11:26.2538030Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2538220Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2538430Z E           KeyError: 'cups'
2025-01-22T20:11:26.2538540Z 
2025-01-22T20:11:26.2538760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2539330Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-selected_atoms] _
2025-01-22T20:11:26.2539660Z 
2025-01-22T20:11:26.2539800Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2540180Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2540470Z        't046000', 't048000'],
2025-01-22T20:11:26.2540630Z       dtype='object')
2025-01-22T20:11:26.2540780Z key = 'cups'
2025-01-22T20:11:26.2540860Z 
2025-01-22T20:11:26.2540910Z     def get_loc(self, key):
2025-01-22T20:11:26.2541060Z         """
2025-01-22T20:11:26.2541260Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2541500Z     
2025-01-22T20:11:26.2541600Z         Parameters
2025-01-22T20:11:26.2541730Z         ----------
2025-01-22T20:11:26.2541850Z         key : label
2025-01-22T20:11:26.2542350Z     
2025-01-22T20:11:26.2542470Z         Returns
2025-01-22T20:11:26.2542600Z         -------
2025-01-22T20:11:26.2542770Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2543130Z     
2025-01-22T20:11:26.2543250Z         Examples
2025-01-22T20:11:26.2543380Z         --------
2025-01-22T20:11:26.2543740Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2544060Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2544370Z         1
2025-01-22T20:11:26.2544620Z     
2025-01-22T20:11:26.2544940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2545240Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2545550Z         slice(1, 3, None)
2025-01-22T20:11:26.2545770Z     
2025-01-22T20:11:26.2546000Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2546280Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2546600Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2546860Z         """
2025-01-22T20:11:26.2547270Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2547650Z         try:
2025-01-22T20:11:26.2547930Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2548130Z 
2025-01-22T20:11:26.2560080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2560550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2560870Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2561120Z     ???
2025-01-22T20:11:26.2561320Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2561570Z     ???
2025-01-22T20:11:26.2561900Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2562260Z     ???
2025-01-22T20:11:26.2562440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2562620Z 
2025-01-22T20:11:26.2562660Z >   ???
2025-01-22T20:11:26.2562800Z E   KeyError: 'cups'
2025-01-22T20:11:26.2563390Z 
2025-01-22T20:11:26.2563510Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2563700Z 
2025-01-22T20:11:26.2563850Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2564090Z 
2025-01-22T20:11:26.2564280Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2564840Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2565740Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2566360Z 
2025-01-22T20:11:26.2566440Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2566650Z     def plasma(
2025-01-22T20:11:26.2566800Z         self,
2025-01-22T20:11:26.2566960Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2567130Z         config,
2025-01-22T20:11:26.2567240Z     ):
2025-01-22T20:11:26.2567400Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2567620Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2567770Z 
2025-01-22T20:11:26.2567870Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2568130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2568400Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2568650Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2568930Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2569210Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2569430Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2569640Z     return BasePlasma(
2025-01-22T20:11:26.2569940Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2570120Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2570310Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2570500Z     self.update(**kwargs)
2025-01-22T20:11:26.2570670Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2570900Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2571160Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2571380Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2571720Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2572110Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2572460Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2572770Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2573000Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2573310Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2573670Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2574030Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2574450Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2574870Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2575220Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2575510Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2575870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2576240Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2576600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2576930Z     return self.apply_standard()
2025-01-22T20:11:26.2577270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2577840Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2578260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2578670Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2579000Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2579320Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2579650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2579990Z     return self._get_value(key)
2025-01-22T20:11:26.2580310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2580660Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2580900Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2581070Z 
2025-01-22T20:11:26.2581200Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2581580Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2581900Z        't046000', 't048000'],
2025-01-22T20:11:26.2582050Z       dtype='object')
2025-01-22T20:11:26.2582200Z key = 'cups'
2025-01-22T20:11:26.2582270Z 
2025-01-22T20:11:26.2582330Z     def get_loc(self, key):
2025-01-22T20:11:26.2582490Z         """
2025-01-22T20:11:26.2582700Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2582960Z     
2025-01-22T20:11:26.2583070Z         Parameters
2025-01-22T20:11:26.2583200Z         ----------
2025-01-22T20:11:26.2583330Z         key : label
2025-01-22T20:11:26.2583550Z     
2025-01-22T20:11:26.2583660Z         Returns
2025-01-22T20:11:26.2583780Z         -------
2025-01-22T20:11:26.2583960Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2584180Z     
2025-01-22T20:11:26.2584290Z         Examples
2025-01-22T20:11:26.2584420Z         --------
2025-01-22T20:11:26.2584570Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2584770Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2584940Z         1
2025-01-22T20:11:26.2585050Z     
2025-01-22T20:11:26.2585190Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2585390Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2585570Z         slice(1, 3, None)
2025-01-22T20:11:26.2585710Z     
2025-01-22T20:11:26.2585860Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2586070Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2586290Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2586490Z         """
2025-01-22T20:11:26.2586640Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2586840Z         try:
2025-01-22T20:11:26.2586990Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2587290Z         except KeyError as err:
2025-01-22T20:11:26.2587480Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2587700Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2587950Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2588180Z             ):
2025-01-22T20:11:26.2588320Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2588520Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2588700Z E           KeyError: 'cups'
2025-01-22T20:11:26.2588800Z 
2025-01-22T20:11:26.2589020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2589580Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-number_density] _
2025-01-22T20:11:26.2590170Z 
2025-01-22T20:11:26.2590300Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2590680Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2590980Z        't046000', 't048000'],
2025-01-22T20:11:26.2591140Z       dtype='object')
2025-01-22T20:11:26.2591290Z key = 'cups'
2025-01-22T20:11:26.2591360Z 
2025-01-22T20:11:26.2591420Z     def get_loc(self, key):
2025-01-22T20:11:26.2591560Z         """
2025-01-22T20:11:26.2591760Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2591990Z     
2025-01-22T20:11:26.2592100Z         Parameters
2025-01-22T20:11:26.2592240Z         ----------
2025-01-22T20:11:26.2592370Z         key : label
2025-01-22T20:11:26.2592490Z     
2025-01-22T20:11:26.2592600Z         Returns
2025-01-22T20:11:26.2592720Z         -------
2025-01-22T20:11:26.2592890Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2593110Z     
2025-01-22T20:11:26.2593220Z         Examples
2025-01-22T20:11:26.2593340Z         --------
2025-01-22T20:11:26.2593490Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2593690Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2593860Z         1
2025-01-22T20:11:26.2593970Z     
2025-01-22T20:11:26.2594110Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2594340Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2594540Z         slice(1, 3, None)
2025-01-22T20:11:26.2594680Z     
2025-01-22T20:11:26.2594830Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2595040Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2595240Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2595410Z         """
2025-01-22T20:11:26.2595640Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2595830Z         try:
2025-01-22T20:11:26.2595970Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2596120Z 
2025-01-22T20:11:26.2596320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2596690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2596950Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2597170Z     ???
2025-01-22T20:11:26.2597330Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2597560Z     ???
2025-01-22T20:11:26.2597840Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2598180Z     ???
2025-01-22T20:11:26.2598330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2598490Z 
2025-01-22T20:11:26.2598540Z >   ???
2025-01-22T20:11:26.2598660Z E   KeyError: 'cups'
2025-01-22T20:11:26.2598750Z 
2025-01-22T20:11:26.2598850Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2599010Z 
2025-01-22T20:11:26.2599150Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2599360Z 
2025-01-22T20:11:26.2599540Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2600070Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2600940Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2601570Z 
2025-01-22T20:11:26.2601640Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2601830Z     def plasma(
2025-01-22T20:11:26.2601990Z         self,
2025-01-22T20:11:26.2602130Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2602290Z         config,
2025-01-22T20:11:26.2602660Z     ):
2025-01-22T20:11:26.2602810Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2603050Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2603190Z 
2025-01-22T20:11:26.2603280Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2603540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2603770Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2603970Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2604210Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2604480Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2604700Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2604910Z     return BasePlasma(
2025-01-22T20:11:26.2605090Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2605280Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2605470Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2605660Z     self.update(**kwargs)
2025-01-22T20:11:26.2605820Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2606040Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2606280Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2606510Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2606850Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2607230Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2607580Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2607890Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2608130Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2608640Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2608980Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2609340Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2609750Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2610160Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2610510Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2610800Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2611140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2611510Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2611860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2612210Z     return self.apply_standard()
2025-01-22T20:11:26.2612610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2613080Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2613570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2614050Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2614420Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2614880Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2615320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2615760Z     return self._get_value(key)
2025-01-22T20:11:26.2616160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2616680Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2617000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2617500Z 
2025-01-22T20:11:26.2617660Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2618140Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2618950Z        't046000', 't048000'],
2025-01-22T20:11:26.2619230Z       dtype='object')
2025-01-22T20:11:26.2619440Z key = 'cups'
2025-01-22T20:11:26.2619610Z 
2025-01-22T20:11:26.2619690Z     def get_loc(self, key):
2025-01-22T20:11:26.2619900Z         """
2025-01-22T20:11:26.2620220Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2620490Z     
2025-01-22T20:11:26.2620710Z         Parameters
2025-01-22T20:11:26.2620920Z         ----------
2025-01-22T20:11:26.2621180Z         key : label
2025-01-22T20:11:26.2621400Z     
2025-01-22T20:11:26.2621600Z         Returns
2025-01-22T20:11:26.2621900Z         -------
2025-01-22T20:11:26.2622210Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2622490Z     
2025-01-22T20:11:26.2622710Z         Examples
2025-01-22T20:11:26.2635630Z         --------
2025-01-22T20:11:26.2635810Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2636020Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2636200Z         1
2025-01-22T20:11:26.2636320Z     
2025-01-22T20:11:26.2636490Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2636730Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2636920Z         slice(1, 3, None)
2025-01-22T20:11:26.2637060Z     
2025-01-22T20:11:26.2637220Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2637470Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2637690Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2638240Z         """
2025-01-22T20:11:26.2638400Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2638590Z         try:
2025-01-22T20:11:26.2638750Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2638970Z         except KeyError as err:
2025-01-22T20:11:26.2639180Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2639400Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2639690Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2639920Z             ):
2025-01-22T20:11:26.2640070Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2640280Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2640480Z E           KeyError: 'cups'
2025-01-22T20:11:26.2640590Z 
2025-01-22T20:11:26.2640820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2641390Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_electrons] _
2025-01-22T20:11:26.2641740Z 
2025-01-22T20:11:26.2641880Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2642270Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2642590Z        't046000', 't048000'],
2025-01-22T20:11:26.2642750Z       dtype='object')
2025-01-22T20:11:26.2642900Z key = 'cups'
2025-01-22T20:11:26.2642990Z 
2025-01-22T20:11:26.2643040Z     def get_loc(self, key):
2025-01-22T20:11:26.2643190Z         """
2025-01-22T20:11:26.2643380Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2643630Z     
2025-01-22T20:11:26.2643740Z         Parameters
2025-01-22T20:11:26.2643870Z         ----------
2025-01-22T20:11:26.2644000Z         key : label
2025-01-22T20:11:26.2644130Z     
2025-01-22T20:11:26.2644230Z         Returns
2025-01-22T20:11:26.2644350Z         -------
2025-01-22T20:11:26.2644530Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2645030Z     
2025-01-22T20:11:26.2645140Z         Examples
2025-01-22T20:11:26.2645270Z         --------
2025-01-22T20:11:26.2645420Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2645610Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2645800Z         1
2025-01-22T20:11:26.2645920Z     
2025-01-22T20:11:26.2646070Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2646280Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2646460Z         slice(1, 3, None)
2025-01-22T20:11:26.2646600Z     
2025-01-22T20:11:26.2646750Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2646980Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2647210Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2647390Z         """
2025-01-22T20:11:26.2647530Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2647740Z         try:
2025-01-22T20:11:26.2647890Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2648040Z 
2025-01-22T20:11:26.2648240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2648600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2648870Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2649090Z     ???
2025-01-22T20:11:26.2649250Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2649470Z     ???
2025-01-22T20:11:26.2649740Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2650070Z     ???
2025-01-22T20:11:26.2650220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2650380Z 
2025-01-22T20:11:26.2650430Z >   ???
2025-01-22T20:11:26.2650650Z E   KeyError: 'cups'
2025-01-22T20:11:26.2650750Z 
2025-01-22T20:11:26.2650850Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2651020Z 
2025-01-22T20:11:26.2651160Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2651360Z 
2025-01-22T20:11:26.2651530Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2652030Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2652870Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2653450Z 
2025-01-22T20:11:26.2653520Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2653690Z     def plasma(
2025-01-22T20:11:26.2653820Z         self,
2025-01-22T20:11:26.2653950Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2654110Z         config,
2025-01-22T20:11:26.2654230Z     ):
2025-01-22T20:11:26.2654390Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2654610Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2654750Z 
2025-01-22T20:11:26.2654840Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2655090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2655320Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2655530Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2655790Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2656070Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2656290Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2656490Z     return BasePlasma(
2025-01-22T20:11:26.2656640Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2656830Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2657020Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2657390Z     self.update(**kwargs)
2025-01-22T20:11:26.2657560Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2657790Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2658030Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2658260Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2658590Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2659060Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2659410Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2659720Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2659960Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2660250Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2660610Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2660970Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2661390Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2661810Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2662170Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2665020Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2665390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2665780Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2666160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2666490Z     return self.apply_standard()
2025-01-22T20:11:26.2667010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2667400Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2667820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2668220Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2668540Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2668850Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2669190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2669530Z     return self._get_value(key)
2025-01-22T20:11:26.2669870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2670210Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2670430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2670590Z 
2025-01-22T20:11:26.2670730Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2671110Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2671400Z        't046000', 't048000'],
2025-01-22T20:11:26.2671570Z       dtype='object')
2025-01-22T20:11:26.2671710Z key = 'cups'
2025-01-22T20:11:26.2671780Z 
2025-01-22T20:11:26.2671840Z     def get_loc(self, key):
2025-01-22T20:11:26.2671990Z         """
2025-01-22T20:11:26.2672180Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2672430Z     
2025-01-22T20:11:26.2672540Z         Parameters
2025-01-22T20:11:26.2672670Z         ----------
2025-01-22T20:11:26.2672800Z         key : label
2025-01-22T20:11:26.2672920Z     
2025-01-22T20:11:26.2673020Z         Returns
2025-01-22T20:11:26.2673150Z         -------
2025-01-22T20:11:26.2673350Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2673870Z     
2025-01-22T20:11:26.2673980Z         Examples
2025-01-22T20:11:26.2674110Z         --------
2025-01-22T20:11:26.2674270Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2674480Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2674640Z         1
2025-01-22T20:11:26.2674750Z     
2025-01-22T20:11:26.2674900Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2675100Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2675300Z         slice(1, 3, None)
2025-01-22T20:11:26.2675440Z     
2025-01-22T20:11:26.2675590Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2675800Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2676010Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2676190Z         """
2025-01-22T20:11:26.2676340Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2676530Z         try:
2025-01-22T20:11:26.2676670Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2676880Z         except KeyError as err:
2025-01-22T20:11:26.2677080Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2677300Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2677540Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2677780Z             ):
2025-01-22T20:11:26.2677920Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2678110Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2678310Z E           KeyError: 'cups'
2025-01-22T20:11:26.2678420Z 
2025-01-22T20:11:26.2678650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2679190Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-w] _
2025-01-22T20:11:26.2679710Z 
2025-01-22T20:11:26.2679840Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2680210Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2680500Z        't046000', 't048000'],
2025-01-22T20:11:26.2680660Z       dtype='object')
2025-01-22T20:11:26.2680810Z key = 'cups'
2025-01-22T20:11:26.2680880Z 
2025-01-22T20:11:26.2680940Z     def get_loc(self, key):
2025-01-22T20:11:26.2681100Z         """
2025-01-22T20:11:26.2681310Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2681550Z     
2025-01-22T20:11:26.2681660Z         Parameters
2025-01-22T20:11:26.2681790Z         ----------
2025-01-22T20:11:26.2681910Z         key : label
2025-01-22T20:11:26.2682040Z     
2025-01-22T20:11:26.2682140Z         Returns
2025-01-22T20:11:26.2682270Z         -------
2025-01-22T20:11:26.2682500Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2682730Z     
2025-01-22T20:11:26.2682830Z         Examples
2025-01-22T20:11:26.2682960Z         --------
2025-01-22T20:11:26.2683110Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2683300Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2683470Z         1
2025-01-22T20:11:26.2683580Z     
2025-01-22T20:11:26.2683720Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2683930Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2684110Z         slice(1, 3, None)
2025-01-22T20:11:26.2684240Z     
2025-01-22T20:11:26.2684380Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2684620Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2684820Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2685000Z         """
2025-01-22T20:11:26.2685140Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2685330Z         try:
2025-01-22T20:11:26.2685480Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2685620Z 
2025-01-22T20:11:26.2685930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2686280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2686540Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2686760Z     ???
2025-01-22T20:11:26.2687150Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2687430Z     ???
2025-01-22T20:11:26.2687830Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2688250Z     ???
2025-01-22T20:11:26.2688530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2688760Z 
2025-01-22T20:11:26.2688810Z >   ???
2025-01-22T20:11:26.2689140Z E   KeyError: 'cups'
2025-01-22T20:11:26.2689310Z 
2025-01-22T20:11:26.2689430Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2689680Z 
2025-01-22T20:11:26.2689820Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2690090Z 
2025-01-22T20:11:26.2690280Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2690800Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2691770Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2692430Z 
2025-01-22T20:11:26.2692560Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2692810Z     def plasma(
2025-01-22T20:11:26.2693070Z         self,
2025-01-22T20:11:26.2693260Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2693650Z         config,
2025-01-22T20:11:26.2693880Z     ):
2025-01-22T20:11:26.2694150Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2694510Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2694720Z 
2025-01-22T20:11:26.2694880Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2695140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2705000Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2705280Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2705530Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2705820Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2706110Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2706320Z     return BasePlasma(
2025-01-22T20:11:26.2706480Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2706670Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2706880Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2707060Z     self.update(**kwargs)
2025-01-22T20:11:26.2707240Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2707450Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2707700Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2707950Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2708290Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2708680Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2709030Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2709350Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2709590Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2709900Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2710240Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2710590Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2711230Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2711640Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2712000Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2712290Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2712640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2713050Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2713420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2713740Z     return self.apply_standard()
2025-01-22T20:11:26.2714090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2714480Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2714940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2715390Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2715730Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2717580Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2717950Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2720560Z     return self._get_value(key)
2025-01-22T20:11:26.2720910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2721250Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2721470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2721770Z 
2025-01-22T20:11:26.2721910Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2722280Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2722590Z        't046000', 't048000'],
2025-01-22T20:11:26.2722750Z       dtype='object')
2025-01-22T20:11:26.2722890Z key = 'cups'
2025-01-22T20:11:26.2722970Z 
2025-01-22T20:11:26.2723030Z     def get_loc(self, key):
2025-01-22T20:11:26.2723180Z         """
2025-01-22T20:11:26.2723400Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2723640Z     
2025-01-22T20:11:26.2723750Z         Parameters
2025-01-22T20:11:26.2723880Z         ----------
2025-01-22T20:11:26.2724000Z         key : label
2025-01-22T20:11:26.2724130Z     
2025-01-22T20:11:26.2724230Z         Returns
2025-01-22T20:11:26.2724350Z         -------
2025-01-22T20:11:26.2724540Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2724750Z     
2025-01-22T20:11:26.2724850Z         Examples
2025-01-22T20:11:26.2724980Z         --------
2025-01-22T20:11:26.2725130Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2725340Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2725530Z         1
2025-01-22T20:11:26.2725640Z     
2025-01-22T20:11:26.2725780Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2726000Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2726180Z         slice(1, 3, None)
2025-01-22T20:11:26.2726320Z     
2025-01-22T20:11:26.2726470Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2726680Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2726880Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2727060Z         """
2025-01-22T20:11:26.2727210Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2727430Z         try:
2025-01-22T20:11:26.2727580Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2727880Z         except KeyError as err:
2025-01-22T20:11:26.2728070Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2728290Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2728530Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2728740Z             ):
2025-01-22T20:11:26.2728880Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2729090Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2729280Z E           KeyError: 'cups'
2025-01-22T20:11:26.2729390Z 
2025-01-22T20:11:26.2729610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2730140Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_rad] _
2025-01-22T20:11:26.2730460Z 
2025-01-22T20:11:26.2730590Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2730980Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2731280Z        't046000', 't048000'],
2025-01-22T20:11:26.2731440Z       dtype='object')
2025-01-22T20:11:26.2731580Z key = 'cups'
2025-01-22T20:11:26.2731660Z 
2025-01-22T20:11:26.2731720Z     def get_loc(self, key):
2025-01-22T20:11:26.2731860Z         """
2025-01-22T20:11:26.2732060Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2732300Z     
2025-01-22T20:11:26.2732420Z         Parameters
2025-01-22T20:11:26.2732540Z         ----------
2025-01-22T20:11:26.2732670Z         key : label
2025-01-22T20:11:26.2732790Z     
2025-01-22T20:11:26.2732900Z         Returns
2025-01-22T20:11:26.2733030Z         -------
2025-01-22T20:11:26.2733210Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2733500Z     
2025-01-22T20:11:26.2733610Z         Examples
2025-01-22T20:11:26.2733730Z         --------
2025-01-22T20:11:26.2733890Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2734090Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2734280Z         1
2025-01-22T20:11:26.2734400Z     
2025-01-22T20:11:26.2734540Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2734780Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2734970Z         slice(1, 3, None)
2025-01-22T20:11:26.2735100Z     
2025-01-22T20:11:26.2735250Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2735470Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2735670Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2735850Z         """
2025-01-22T20:11:26.2735990Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2736190Z         try:
2025-01-22T20:11:26.2736350Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2736500Z 
2025-01-22T20:11:26.2736700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2737070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2737340Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2737560Z     ???
2025-01-22T20:11:26.2737730Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2737940Z     ???
2025-01-22T20:11:26.2738240Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2738570Z     ???
2025-01-22T20:11:26.2738720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2738880Z 
2025-01-22T20:11:26.2738920Z >   ???
2025-01-22T20:11:26.2739040Z E   KeyError: 'cups'
2025-01-22T20:11:26.2739130Z 
2025-01-22T20:11:26.2739230Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2739400Z 
2025-01-22T20:11:26.2739530Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2739940Z 
2025-01-22T20:11:26.2740120Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2740620Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2741440Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2742030Z 
2025-01-22T20:11:26.2742090Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2742270Z     def plasma(
2025-01-22T20:11:26.2742390Z         self,
2025-01-22T20:11:26.2742520Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2742680Z         config,
2025-01-22T20:11:26.2742800Z     ):
2025-01-22T20:11:26.2742950Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2743170Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2743310Z 
2025-01-22T20:11:26.2743400Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2743650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2743880Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2744080Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2744340Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2744620Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2744840Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2745060Z     return BasePlasma(
2025-01-22T20:11:26.2745230Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2745410Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2745600Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2746230Z     self.update(**kwargs)
2025-01-22T20:11:26.2746420Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2746640Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2746880Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2747110Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2747450Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2747850Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2748220Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2748530Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2748770Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2749070Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2749400Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2749750Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2750190Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2750640Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2751000Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2751290Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2751660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2752040Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2752410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2752750Z     return self.apply_standard()
2025-01-22T20:11:26.2753090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2753480Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2753890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2754410Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2754750Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2755060Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2755390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2755730Z     return self._get_value(key)
2025-01-22T20:11:26.2756070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2756410Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2756630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2756790Z 
2025-01-22T20:11:26.2756920Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2757290Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2757590Z        't046000', 't048000'],
2025-01-22T20:11:26.2757750Z       dtype='object')
2025-01-22T20:11:26.2757890Z key = 'cups'
2025-01-22T20:11:26.2757960Z 
2025-01-22T20:11:26.2758020Z     def get_loc(self, key):
2025-01-22T20:11:26.2758260Z         """
2025-01-22T20:11:26.2758470Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2758700Z     
2025-01-22T20:11:26.2758810Z         Parameters
2025-01-22T20:11:26.2758950Z         ----------
2025-01-22T20:11:26.2759200Z         key : label
2025-01-22T20:11:26.2759500Z     
2025-01-22T20:11:26.2759680Z         Returns
2025-01-22T20:11:26.2759890Z         -------
2025-01-22T20:11:26.2760090Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2760540Z     
2025-01-22T20:11:26.2760670Z         Examples
2025-01-22T20:11:26.2760880Z         --------
2025-01-22T20:11:26.2761050Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2761320Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2761580Z         1
2025-01-22T20:11:26.2761760Z     
2025-01-22T20:11:26.2761940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2762290Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2762550Z         slice(1, 3, None)
2025-01-22T20:11:26.2780260Z     
2025-01-22T20:11:26.2780450Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2780680Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2780890Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2781100Z         """
2025-01-22T20:11:26.2781270Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2781490Z         try:
2025-01-22T20:11:26.2781650Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2781890Z         except KeyError as err:
2025-01-22T20:11:26.2782130Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2782390Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2782690Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2782910Z             ):
2025-01-22T20:11:26.2783060Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2783280Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2783490Z E           KeyError: 'cups'
2025-01-22T20:11:26.2783610Z 
2025-01-22T20:11:26.2783860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2784440Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_electron] _
2025-01-22T20:11:26.2784790Z 
2025-01-22T20:11:26.2784940Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2785350Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2786020Z        't046000', 't048000'],
2025-01-22T20:11:26.2786200Z       dtype='object')
2025-01-22T20:11:26.2786360Z key = 'cups'
2025-01-22T20:11:26.2786450Z 
2025-01-22T20:11:26.2786510Z     def get_loc(self, key):
2025-01-22T20:11:26.2786670Z         """
2025-01-22T20:11:26.2786890Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2787160Z     
2025-01-22T20:11:26.2787280Z         Parameters
2025-01-22T20:11:26.2787410Z         ----------
2025-01-22T20:11:26.2787570Z         key : label
2025-01-22T20:11:26.2787700Z     
2025-01-22T20:11:26.2787810Z         Returns
2025-01-22T20:11:26.2787930Z         -------
2025-01-22T20:11:26.2788130Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2788380Z     
2025-01-22T20:11:26.2788490Z         Examples
2025-01-22T20:11:26.2788640Z         --------
2025-01-22T20:11:26.2788810Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2789010Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2789190Z         1
2025-01-22T20:11:26.2887230Z     
2025-01-22T20:11:26.2887570Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2887800Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2887990Z         slice(1, 3, None)
2025-01-22T20:11:26.2888140Z     
2025-01-22T20:11:26.2888280Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2888510Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2888720Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2888890Z         """
2025-01-22T20:11:26.2889040Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2889220Z         try:
2025-01-22T20:11:26.2889380Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2889960Z 
2025-01-22T20:11:26.2890180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2890560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2890830Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2891060Z     ???
2025-01-22T20:11:26.2891230Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2891450Z     ???
2025-01-22T20:11:26.2891740Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2892080Z     ???
2025-01-22T20:11:26.2892230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2892390Z 
2025-01-22T20:11:26.2892440Z >   ???
2025-01-22T20:11:26.2892560Z E   KeyError: 'cups'
2025-01-22T20:11:26.2892650Z 
2025-01-22T20:11:26.2892750Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2892920Z 
2025-01-22T20:11:26.2893060Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2893260Z 
2025-01-22T20:11:26.2893440Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2893940Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2894770Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2895360Z 
2025-01-22T20:11:26.2895420Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2895600Z     def plasma(
2025-01-22T20:11:26.2895730Z         self,
2025-01-22T20:11:26.2895860Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2896010Z         config,
2025-01-22T20:11:26.2896130Z     ):
2025-01-22T20:11:26.2896280Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2896500Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2896760Z 
2025-01-22T20:11:26.2896860Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2897110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2897340Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2897550Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2897780Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2898080Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2898300Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2898500Z     return BasePlasma(
2025-01-22T20:11:26.2898650Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2898850Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2899040Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2899230Z     self.update(**kwargs)
2025-01-22T20:11:26.2899390Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2899610Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2899860Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2900090Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2900440Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2900850Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2901200Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2901500Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2901750Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2902050Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2902400Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2902910Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2903330Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2903760Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2904120Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2904410Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2904770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2905160Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2905520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2905860Z     return self.apply_standard()
2025-01-22T20:11:26.2906200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2906590Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2907000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2907430Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2907770Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2908070Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2908400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2908740Z     return self._get_value(key)
2025-01-22T20:11:26.2909070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2909410Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2909630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2909790Z 
2025-01-22T20:11:26.2909920Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2910310Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2910930Z        't046000', 't048000'],
2025-01-22T20:11:26.2911090Z       dtype='object')
2025-01-22T20:11:26.2911230Z key = 'cups'
2025-01-22T20:11:26.2911300Z 
2025-01-22T20:11:26.2911360Z     def get_loc(self, key):
2025-01-22T20:11:26.2911510Z         """
2025-01-22T20:11:26.2911710Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2911970Z     
2025-01-22T20:11:26.2912090Z         Parameters
2025-01-22T20:11:26.2912230Z         ----------
2025-01-22T20:11:26.2912380Z         key : label
2025-01-22T20:11:26.2912500Z     
2025-01-22T20:11:26.2912620Z         Returns
2025-01-22T20:11:26.2912760Z         -------
2025-01-22T20:11:26.2912940Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2913170Z     
2025-01-22T20:11:26.2913280Z         Examples
2025-01-22T20:11:26.2913400Z         --------
2025-01-22T20:11:26.2913550Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2913760Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2913930Z         1
2025-01-22T20:11:26.2914030Z     
2025-01-22T20:11:26.2914170Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2914380Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2914570Z         slice(1, 3, None)
2025-01-22T20:11:26.2914720Z     
2025-01-22T20:11:26.2914880Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2915100Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2915310Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2915510Z         """
2025-01-22T20:11:26.2915670Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2915860Z         try:
2025-01-22T20:11:26.2916010Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2916670Z         except KeyError as err:
2025-01-22T20:11:26.2916860Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2917080Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2917320Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2917530Z             ):
2025-01-22T20:11:26.2917680Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2917890Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2918080Z E           KeyError: 'cups'
2025-01-22T20:11:26.2918190Z 
2025-01-22T20:11:26.2918410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2918990Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_boltzmann_factor] _
2025-01-22T20:11:26.2919330Z 
2025-01-22T20:11:26.2919460Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2919830Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2920130Z        't046000', 't048000'],
2025-01-22T20:11:26.2920300Z       dtype='object')
2025-01-22T20:11:26.2920440Z key = 'cups'
2025-01-22T20:11:26.2920520Z 
2025-01-22T20:11:26.2920570Z     def get_loc(self, key):
2025-01-22T20:11:26.2920730Z         """
2025-01-22T20:11:26.2920930Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2921160Z     
2025-01-22T20:11:26.2921260Z         Parameters
2025-01-22T20:11:26.2921380Z         ----------
2025-01-22T20:11:26.2921510Z         key : label
2025-01-22T20:11:26.2921640Z     
2025-01-22T20:11:26.2921750Z         Returns
2025-01-22T20:11:26.2921870Z         -------
2025-01-22T20:11:26.2922280Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2922500Z     
2025-01-22T20:11:26.2922600Z         Examples
2025-01-22T20:11:26.2922870Z         --------
2025-01-22T20:11:26.2923030Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2923340Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2923510Z         1
2025-01-22T20:11:26.2923620Z     
2025-01-22T20:11:26.2923760Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2923960Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2924140Z         slice(1, 3, None)
2025-01-22T20:11:26.2924280Z     
2025-01-22T20:11:26.2924410Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2924630Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2924810Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2924980Z         """
2025-01-22T20:11:26.2925120Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2925380Z         try:
2025-01-22T20:11:26.2925530Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2925760Z 
2025-01-22T20:11:26.2925970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2926330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2926590Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2926810Z     ???
2025-01-22T20:11:26.2926980Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2927250Z     ???
2025-01-22T20:11:26.2927520Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2927880Z     ???
2025-01-22T20:11:26.2928030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2928180Z 
2025-01-22T20:11:26.2928230Z >   ???
2025-01-22T20:11:26.2928340Z E   KeyError: 'cups'
2025-01-22T20:11:26.2928430Z 
2025-01-22T20:11:26.2928530Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2928680Z 
2025-01-22T20:11:26.2948780Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2949120Z 
2025-01-22T20:11:26.2949330Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2949870Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2950760Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2951720Z 
2025-01-22T20:11:26.2951830Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2952040Z     def plasma(
2025-01-22T20:11:26.2952200Z         self,
2025-01-22T20:11:26.2952330Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2952490Z         config,
2025-01-22T20:11:26.2952620Z     ):
2025-01-22T20:11:26.2952780Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2953060Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2953230Z 
2025-01-22T20:11:26.2953350Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2953630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2953890Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2954110Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2954350Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2954640Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2954970Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2955200Z     return BasePlasma(
2025-01-22T20:11:26.2955380Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2955580Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2955810Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2956000Z     self.update(**kwargs)
2025-01-22T20:11:26.2956210Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2956450Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2957100Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2957390Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2957780Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2958230Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2958630Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2958990Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2959230Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2959570Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2959990Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2960400Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2960880Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2961360Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.2961760Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.2962080Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.2962450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.2962830Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.2963200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.2963540Z     return self.apply_standard()
2025-01-22T20:11:26.2963880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.2964280Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.2964860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.2965280Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.2965720Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.2966070Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.2966440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.2966820Z     return self._get_value(key)
2025-01-22T20:11:26.2967250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.2967670Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.2967930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2968120Z 
2025-01-22T20:11:26.2968280Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2968670Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2969000Z        't046000', 't048000'],
2025-01-22T20:11:26.2969160Z       dtype='object')
2025-01-22T20:11:26.2969300Z key = 'cups'
2025-01-22T20:11:26.2969380Z 
2025-01-22T20:11:26.2969440Z     def get_loc(self, key):
2025-01-22T20:11:26.2969590Z         """
2025-01-22T20:11:26.2969800Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2970040Z     
2025-01-22T20:11:26.2970150Z         Parameters
2025-01-22T20:11:26.2970290Z         ----------
2025-01-22T20:11:26.2970420Z         key : label
2025-01-22T20:11:26.2970540Z     
2025-01-22T20:11:26.2970640Z         Returns
2025-01-22T20:11:26.2970770Z         -------
2025-01-22T20:11:26.2970950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2971160Z     
2025-01-22T20:11:26.2971270Z         Examples
2025-01-22T20:11:26.2971400Z         --------
2025-01-22T20:11:26.2971560Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2972000Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2972210Z         1
2025-01-22T20:11:26.2972340Z     
2025-01-22T20:11:26.2972510Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2972730Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2972910Z         slice(1, 3, None)
2025-01-22T20:11:26.2973050Z     
2025-01-22T20:11:26.2973200Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2973440Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2973640Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2973820Z         """
2025-01-22T20:11:26.2973960Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2974150Z         try:
2025-01-22T20:11:26.2974290Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2974490Z         except KeyError as err:
2025-01-22T20:11:26.2974680Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.2974900Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.2975140Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.2975350Z             ):
2025-01-22T20:11:26.2975490Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.2975690Z >           raise KeyError(key) from err
2025-01-22T20:11:26.2975960Z E           KeyError: 'cups'
2025-01-22T20:11:26.2976090Z 
2025-01-22T20:11:26.2976350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.2976940Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-partition_function] _
2025-01-22T20:11:26.2977280Z 
2025-01-22T20:11:26.2977410Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.2977870Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.2978170Z        't046000', 't048000'],
2025-01-22T20:11:26.2978320Z       dtype='object')
2025-01-22T20:11:26.2978460Z key = 'cups'
2025-01-22T20:11:26.2978530Z 
2025-01-22T20:11:26.2978590Z     def get_loc(self, key):
2025-01-22T20:11:26.2978740Z         """
2025-01-22T20:11:26.2978930Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.2979260Z     
2025-01-22T20:11:26.2979370Z         Parameters
2025-01-22T20:11:26.2979510Z         ----------
2025-01-22T20:11:26.2979660Z         key : label
2025-01-22T20:11:26.2979790Z     
2025-01-22T20:11:26.2979890Z         Returns
2025-01-22T20:11:26.2980010Z         -------
2025-01-22T20:11:26.2980210Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.2980630Z     
2025-01-22T20:11:26.2980930Z         Examples
2025-01-22T20:11:26.2981120Z         --------
2025-01-22T20:11:26.2981330Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.2981600Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.2981820Z         1
2025-01-22T20:11:26.2981970Z     
2025-01-22T20:11:26.2982130Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.2982390Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.2982580Z         slice(1, 3, None)
2025-01-22T20:11:26.2982750Z     
2025-01-22T20:11:26.2982910Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.2983150Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.2983390Z         array([False,  True, False,  True])
2025-01-22T20:11:26.2983570Z         """
2025-01-22T20:11:26.2983740Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.2983950Z         try:
2025-01-22T20:11:26.2984130Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.2984280Z 
2025-01-22T20:11:26.2984510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.2984890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2985630Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2985870Z     ???
2025-01-22T20:11:26.2986060Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.2986310Z     ???
2025-01-22T20:11:26.2986590Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.2986970Z     ???
2025-01-22T20:11:26.2987150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2987330Z 
2025-01-22T20:11:26.2987390Z >   ???
2025-01-22T20:11:26.2987510Z E   KeyError: 'cups'
2025-01-22T20:11:26.2987610Z 
2025-01-22T20:11:26.2987730Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.2987920Z 
2025-01-22T20:11:26.2988050Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.2988270Z 
2025-01-22T20:11:26.2988460Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.2989000Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.2989890Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.2990520Z 
2025-01-22T20:11:26.2990600Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.2990800Z     def plasma(
2025-01-22T20:11:26.2990930Z         self,
2025-01-22T20:11:26.2991050Z         chianti_he_db_fpath,
2025-01-22T20:11:26.2991230Z         config,
2025-01-22T20:11:26.2991380Z     ):
2025-01-22T20:11:26.2991530Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.2991990Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.2992150Z 
2025-01-22T20:11:26.2992240Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.2992540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.2992800Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.2993010Z     plasma = assemble_plasma(
2025-01-22T20:11:26.2993280Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.2993580Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.2993820Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.2994070Z     return BasePlasma(
2025-01-22T20:11:26.2994240Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.2994430Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.2994650Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.2994860Z     self.update(**kwargs)
2025-01-22T20:11:26.2995040Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.2995280Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.2995540Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.2995780Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.2996150Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.2996570Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.2996960Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.2997330Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.2997590Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.2997910Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.2998290Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.2998670Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.2999130Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.2999710Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3000090Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3000410Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3000780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3001190Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3001560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3001890Z     return self.apply_standard()
2025-01-22T20:11:26.3002250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3002650Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3003090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3003530Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3003880Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3004220Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3004560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3004900Z     return self._get_value(key)
2025-01-22T20:11:26.3005230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3005570Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3005790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3005950Z 
2025-01-22T20:11:26.3006080Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3006580Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3006890Z        't046000', 't048000'],
2025-01-22T20:11:26.3007050Z       dtype='object')
2025-01-22T20:11:26.3007310Z key = 'cups'
2025-01-22T20:11:26.3007390Z 
2025-01-22T20:11:26.3007450Z     def get_loc(self, key):
2025-01-22T20:11:26.3007600Z         """
2025-01-22T20:11:26.3007800Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3008050Z     
2025-01-22T20:11:26.3008160Z         Parameters
2025-01-22T20:11:26.3008300Z         ----------
2025-01-22T20:11:26.3008430Z         key : label
2025-01-22T20:11:26.3008550Z     
2025-01-22T20:11:26.3008660Z         Returns
2025-01-22T20:11:26.3008780Z         -------
2025-01-22T20:11:26.3008960Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3009180Z     
2025-01-22T20:11:26.3009280Z         Examples
2025-01-22T20:11:26.3009420Z         --------
2025-01-22T20:11:26.3009560Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3009770Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3009940Z         1
2025-01-22T20:11:26.3010050Z     
2025-01-22T20:11:26.3010190Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3010400Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3010860Z         slice(1, 3, None)
2025-01-22T20:11:26.3011140Z     
2025-01-22T20:11:26.3011460Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3011770Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3012170Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3012470Z         """
2025-01-22T20:11:26.3012730Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3013020Z         try:
2025-01-22T20:11:26.3013390Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3013730Z         except KeyError as err:
2025-01-22T20:11:26.3014020Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3014340Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3014920Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3015310Z             ):
2025-01-22T20:11:26.3015540Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3015900Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3016170Z E           KeyError: 'cups'
2025-01-22T20:11:26.3016770Z 
2025-01-22T20:11:26.3017080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3017690Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-excitation_energy] _
2025-01-22T20:11:26.3018040Z 
2025-01-22T20:11:26.3018170Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3018630Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3019020Z        't046000', 't048000'],
2025-01-22T20:11:26.3019370Z       dtype='object')
2025-01-22T20:11:26.3019540Z key = 'cups'
2025-01-22T20:11:26.3019690Z 
2025-01-22T20:11:26.3019850Z     def get_loc(self, key):
2025-01-22T20:11:26.3020080Z         """
2025-01-22T20:11:26.3030190Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3030580Z     
2025-01-22T20:11:26.3030690Z         Parameters
2025-01-22T20:11:26.3030830Z         ----------
2025-01-22T20:11:26.3030960Z         key : label
2025-01-22T20:11:26.3031080Z     
2025-01-22T20:11:26.3031180Z         Returns
2025-01-22T20:11:26.3031300Z         -------
2025-01-22T20:11:26.3031480Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3031700Z     
2025-01-22T20:11:26.3032250Z         Examples
2025-01-22T20:11:26.3032430Z         --------
2025-01-22T20:11:26.3033170Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3033370Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3033560Z         1
2025-01-22T20:11:26.3033660Z     
2025-01-22T20:11:26.3033810Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3034020Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3034200Z         slice(1, 3, None)
2025-01-22T20:11:26.3034350Z     
2025-01-22T20:11:26.3034490Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3034720Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3034930Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3035120Z         """
2025-01-22T20:11:26.3035280Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3035470Z         try:
2025-01-22T20:11:26.3035620Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3035760Z 
2025-01-22T20:11:26.3035960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3036330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3036600Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3036820Z     ???
2025-01-22T20:11:26.3036990Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3037220Z     ???
2025-01-22T20:11:26.3037520Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3037860Z     ???
2025-01-22T20:11:26.3038010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3038170Z 
2025-01-22T20:11:26.3038210Z >   ???
2025-01-22T20:11:26.3038320Z E   KeyError: 'cups'
2025-01-22T20:11:26.3038420Z 
2025-01-22T20:11:26.3038520Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3038680Z 
2025-01-22T20:11:26.3038820Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3038830Z 
2025-01-22T20:11:26.3039000Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3039420Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3039930Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3039940Z 
2025-01-22T20:11:26.3040010Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3040060Z     def plasma(
2025-01-22T20:11:26.3040100Z         self,
2025-01-22T20:11:26.3040160Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3040200Z         config,
2025-01-22T20:11:26.3040250Z     ):
2025-01-22T20:11:26.3040330Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3040410Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3040420Z 
2025-01-22T20:11:26.3040510Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3040600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3040680Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3040740Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3040890Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3040960Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3041050Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3041100Z     return BasePlasma(
2025-01-22T20:11:26.3041160Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3041220Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3041290Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3041350Z     self.update(**kwargs)
2025-01-22T20:11:26.3041410Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3041510Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3041680Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3041760Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3041950Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3042080Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3042240Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3042320Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3042420Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3042570Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3042700Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3042850Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3043060Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3043210Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3043360Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3043430Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3043640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3043740Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3043930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3044010Z     return self.apply_standard()
2025-01-22T20:11:26.3044240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3044340Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3044590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3044680Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3045220Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3045300Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3045530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3045590Z     return self._get_value(key)
2025-01-22T20:11:26.3045800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3045860Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3045950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3045950Z 
2025-01-22T20:11:26.3046100Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3046280Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3046340Z        't046000', 't048000'],
2025-01-22T20:11:26.3046390Z       dtype='object')
2025-01-22T20:11:26.3046440Z key = 'cups'
2025-01-22T20:11:26.3046450Z 
2025-01-22T20:11:26.3046500Z     def get_loc(self, key):
2025-01-22T20:11:26.3046550Z         """
2025-01-22T20:11:26.3046680Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3046720Z     
2025-01-22T20:11:26.3046770Z         Parameters
2025-01-22T20:11:26.3046810Z         ----------
2025-01-22T20:11:26.3046870Z         key : label
2025-01-22T20:11:26.3046910Z     
2025-01-22T20:11:26.3046950Z         Returns
2025-01-22T20:11:26.3047010Z         -------
2025-01-22T20:11:26.3047110Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3047160Z     
2025-01-22T20:11:26.3047200Z         Examples
2025-01-22T20:11:26.3047250Z         --------
2025-01-22T20:11:26.3047680Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3047740Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3047790Z         1
2025-01-22T20:11:26.3047840Z     
2025-01-22T20:11:26.3047910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3047980Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3048040Z         slice(1, 3, None)
2025-01-22T20:11:26.3048080Z     
2025-01-22T20:11:26.3048170Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3048230Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3048300Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3048350Z         """
2025-01-22T20:11:26.3048420Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3048460Z         try:
2025-01-22T20:11:26.3048560Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3048620Z         except KeyError as err:
2025-01-22T20:11:26.3048700Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3048780Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3048880Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3048920Z             ):
2025-01-22T20:11:26.3048990Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3049060Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3049110Z E           KeyError: 'cups'
2025-01-22T20:11:26.3049120Z 
2025-01-22T20:11:26.3049340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3049590Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] _
2025-01-22T20:11:26.3049600Z 
2025-01-22T20:11:26.3049730Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3049900Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3049960Z        't046000', 't048000'],
2025-01-22T20:11:26.3050010Z       dtype='object')
2025-01-22T20:11:26.3050180Z key = 'cups'
2025-01-22T20:11:26.3050190Z 
2025-01-22T20:11:26.3050250Z     def get_loc(self, key):
2025-01-22T20:11:26.3050290Z         """
2025-01-22T20:11:26.3050430Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3050470Z     
2025-01-22T20:11:26.3050530Z         Parameters
2025-01-22T20:11:26.3050570Z         ----------
2025-01-22T20:11:26.3050620Z         key : label
2025-01-22T20:11:26.3050670Z     
2025-01-22T20:11:26.3050710Z         Returns
2025-01-22T20:11:26.3050760Z         -------
2025-01-22T20:11:26.3050860Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3050910Z     
2025-01-22T20:11:26.3050950Z         Examples
2025-01-22T20:11:26.3051000Z         --------
2025-01-22T20:11:26.3051070Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3051130Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3051180Z         1
2025-01-22T20:11:26.3051220Z     
2025-01-22T20:11:26.3051310Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3051370Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3051430Z         slice(1, 3, None)
2025-01-22T20:11:26.3051500Z     
2025-01-22T20:11:26.3051580Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3051640Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3051720Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3051790Z         """
2025-01-22T20:11:26.3051860Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3051910Z         try:
2025-01-22T20:11:26.3051980Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3051990Z 
2025-01-22T20:11:26.3052190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3052370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3052480Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3052530Z     ???
2025-01-22T20:11:26.3052630Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3052680Z     ???
2025-01-22T20:11:26.3052900Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3052950Z     ???
2025-01-22T20:11:26.3053040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3053040Z 
2025-01-22T20:11:26.3053090Z >   ???
2025-01-22T20:11:26.3053140Z E   KeyError: 'cups'
2025-01-22T20:11:26.3053140Z 
2025-01-22T20:11:26.3053240Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3053240Z 
2025-01-22T20:11:26.3053380Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3053380Z 
2025-01-22T20:11:26.3053550Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3053820Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3054320Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3054320Z 
2025-01-22T20:11:26.3054390Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3054440Z     def plasma(
2025-01-22T20:11:26.3054480Z         self,
2025-01-22T20:11:26.3054540Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3054590Z         config,
2025-01-22T20:11:26.3054630Z     ):
2025-01-22T20:11:26.3054710Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3054790Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3054790Z 
2025-01-22T20:11:26.3054890Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3054980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3055130Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3055190Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3055320Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3055400Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3055480Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3055540Z     return BasePlasma(
2025-01-22T20:11:26.3055600Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3055660Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3055720Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3055770Z     self.update(**kwargs)
2025-01-22T20:11:26.3055840Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3055930Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3056020Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3056090Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3056300Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3056420Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3056580Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3056650Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3056760Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3056890Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3057030Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3057170Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3057380Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3057630Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3057800Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3057890Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3058090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3058190Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3058380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3058440Z     return self.apply_standard()
2025-01-22T20:11:26.3058660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3058760Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3059010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3059100Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3059280Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3059340Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3059560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3059620Z     return self._get_value(key)
2025-01-22T20:11:26.3059830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3059890Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3059990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3059990Z 
2025-01-22T20:11:26.3060120Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3060300Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3060350Z        't046000', 't048000'],
2025-01-22T20:11:26.3060410Z       dtype='object')
2025-01-22T20:11:26.3060550Z key = 'cups'
2025-01-22T20:11:26.3060560Z 
2025-01-22T20:11:26.3060610Z     def get_loc(self, key):
2025-01-22T20:11:26.3060660Z         """
2025-01-22T20:11:26.3060780Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3060830Z     
2025-01-22T20:11:26.3060870Z         Parameters
2025-01-22T20:11:26.3060920Z         ----------
2025-01-22T20:11:26.3060970Z         key : label
2025-01-22T20:11:26.3061010Z     
2025-01-22T20:11:26.3061060Z         Returns
2025-01-22T20:11:26.3061130Z         -------
2025-01-22T20:11:26.3061240Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3061290Z     
2025-01-22T20:11:26.3061330Z         Examples
2025-01-22T20:11:26.3061380Z         --------
2025-01-22T20:11:26.3061450Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3061510Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3061560Z         1
2025-01-22T20:11:26.3061610Z     
2025-01-22T20:11:26.3061690Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3061750Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3061800Z         slice(1, 3, None)
2025-01-22T20:11:26.3061850Z     
2025-01-22T20:11:26.3061930Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3062000Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3062070Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3062110Z         """
2025-01-22T20:11:26.3062190Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3062230Z         try:
2025-01-22T20:11:26.3062310Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3062360Z         except KeyError as err:
2025-01-22T20:11:26.3062440Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3062600Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3062690Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3062740Z             ):
2025-01-22T20:11:26.3062810Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3062880Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3062930Z E           KeyError: 'cups'
2025-01-22T20:11:26.3062940Z 
2025-01-22T20:11:26.3063160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3063450Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] _
2025-01-22T20:11:26.3063450Z 
2025-01-22T20:11:26.3063590Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3063760Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3063820Z        't046000', 't048000'],
2025-01-22T20:11:26.3063870Z       dtype='object')
2025-01-22T20:11:26.3063920Z key = 'cups'
2025-01-22T20:11:26.3063920Z 
2025-01-22T20:11:26.3063980Z     def get_loc(self, key):
2025-01-22T20:11:26.3064020Z         """
2025-01-22T20:11:26.3064150Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3064190Z     
2025-01-22T20:11:26.3064250Z         Parameters
2025-01-22T20:11:26.3064290Z         ----------
2025-01-22T20:11:26.3064340Z         key : label
2025-01-22T20:11:26.3064380Z     
2025-01-22T20:11:26.3064430Z         Returns
2025-01-22T20:11:26.3064480Z         -------
2025-01-22T20:11:26.3064580Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3064620Z     
2025-01-22T20:11:26.3064670Z         Examples
2025-01-22T20:11:26.3064720Z         --------
2025-01-22T20:11:26.3064790Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3064850Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3064900Z         1
2025-01-22T20:11:26.3064950Z     
2025-01-22T20:11:26.3065030Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3065520Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3065570Z         slice(1, 3, None)
2025-01-22T20:11:26.3065620Z     
2025-01-22T20:11:26.3065700Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3065770Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3065830Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3065880Z         """
2025-01-22T20:11:26.3065960Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3066000Z         try:
2025-01-22T20:11:26.3066070Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3066080Z 
2025-01-22T20:11:26.3066280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3066380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3066490Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3066540Z     ???
2025-01-22T20:11:26.3066640Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3066690Z     ???
2025-01-22T20:11:26.3066900Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3066950Z     ???
2025-01-22T20:11:26.3067050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3067050Z 
2025-01-22T20:11:26.3067430Z >   ???
2025-01-22T20:11:26.3067500Z E   KeyError: 'cups'
2025-01-22T20:11:26.3067510Z 
2025-01-22T20:11:26.3067620Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3067630Z 
2025-01-22T20:11:26.3067770Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3067770Z 
2025-01-22T20:11:26.3067950Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3068840Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3069360Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3069370Z 
2025-01-22T20:11:26.3069450Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3069500Z     def plasma(
2025-01-22T20:11:26.3069540Z         self,
2025-01-22T20:11:26.3069600Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3069640Z         config,
2025-01-22T20:11:26.3069690Z     ):
2025-01-22T20:11:26.3069780Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3069850Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3069850Z 
2025-01-22T20:11:26.3069940Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3070040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3070120Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3070190Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3070330Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3070410Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3070490Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3070540Z     return BasePlasma(
2025-01-22T20:11:26.3070610Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3070680Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3070740Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3070800Z     self.update(**kwargs)
2025-01-22T20:11:26.3070860Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3070950Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3071040Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3071120Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3071420Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3071530Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3071700Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3071770Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3071880Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3072020Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3072170Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3072440Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3072660Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3072810Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3072960Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3073040Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3073240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3073340Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3073530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3073600Z     return self.apply_standard()
2025-01-22T20:11:26.3073830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3073940Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3074200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3074390Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3074560Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3074630Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3074850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3074900Z     return self._get_value(key)
2025-01-22T20:11:26.3075120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3075180Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3075270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3075270Z 
2025-01-22T20:11:26.3075400Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3075580Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3075630Z        't046000', 't048000'],
2025-01-22T20:11:26.3075680Z       dtype='object')
2025-01-22T20:11:26.3075740Z key = 'cups'
2025-01-22T20:11:26.3075740Z 
2025-01-22T20:11:26.3075790Z     def get_loc(self, key):
2025-01-22T20:11:26.3075840Z         """
2025-01-22T20:11:26.3075970Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3076010Z     
2025-01-22T20:11:26.3076060Z         Parameters
2025-01-22T20:11:26.3076110Z         ----------
2025-01-22T20:11:26.3076160Z         key : label
2025-01-22T20:11:26.3076200Z     
2025-01-22T20:11:26.3076250Z         Returns
2025-01-22T20:11:26.3076290Z         -------
2025-01-22T20:11:26.3076400Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3076450Z     
2025-01-22T20:11:26.3076490Z         Examples
2025-01-22T20:11:26.3076540Z         --------
2025-01-22T20:11:26.3076610Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3076670Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3076720Z         1
2025-01-22T20:11:26.3076760Z     
2025-01-22T20:11:26.3076910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3076970Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3077020Z         slice(1, 3, None)
2025-01-22T20:11:26.3077060Z     
2025-01-22T20:11:26.3077150Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3077210Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3077280Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3077330Z         """
2025-01-22T20:11:26.3077400Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3077450Z         try:
2025-01-22T20:11:26.3077520Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3077580Z         except KeyError as err:
2025-01-22T20:11:26.3077640Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3077730Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3077830Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3077890Z             ):
2025-01-22T20:11:26.3077970Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3078040Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3078090Z E           KeyError: 'cups'
2025-01-22T20:11:26.3078090Z 
2025-01-22T20:11:26.3078310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3078630Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] _
2025-01-22T20:11:26.3078640Z 
2025-01-22T20:11:26.3079190Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3079470Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3079530Z        't046000', 't048000'],
2025-01-22T20:11:26.3079850Z       dtype='object')
2025-01-22T20:11:26.3079910Z key = 'cups'
2025-01-22T20:11:26.3079910Z 
2025-01-22T20:11:26.3079970Z     def get_loc(self, key):
2025-01-22T20:11:26.3080020Z         """
2025-01-22T20:11:26.3080160Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3080210Z     
2025-01-22T20:11:26.3080260Z         Parameters
2025-01-22T20:11:26.3080310Z         ----------
2025-01-22T20:11:26.3080360Z         key : label
2025-01-22T20:11:26.3080410Z     
2025-01-22T20:11:26.3080450Z         Returns
2025-01-22T20:11:26.3080500Z         -------
2025-01-22T20:11:26.3080610Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3080660Z     
2025-01-22T20:11:26.3080700Z         Examples
2025-01-22T20:11:26.3080750Z         --------
2025-01-22T20:11:26.3080820Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3080890Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3080940Z         1
2025-01-22T20:11:26.3080980Z     
2025-01-22T20:11:26.3081060Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3081140Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3081190Z         slice(1, 3, None)
2025-01-22T20:11:26.3081230Z     
2025-01-22T20:11:26.3081320Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3081400Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3081460Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3081510Z         """
2025-01-22T20:11:26.3081760Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3116710Z         try:
2025-01-22T20:11:26.3116920Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3116930Z 
2025-01-22T20:11:26.3117140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3117240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3117390Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3117440Z     ???
2025-01-22T20:11:26.3117950Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3117990Z     ???
2025-01-22T20:11:26.3118210Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3118250Z     ???
2025-01-22T20:11:26.3118340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3118340Z 
2025-01-22T20:11:26.3118380Z >   ???
2025-01-22T20:11:26.3118430Z E   KeyError: 'cups'
2025-01-22T20:11:26.3118440Z 
2025-01-22T20:11:26.3118540Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3118550Z 
2025-01-22T20:11:26.3118690Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3118690Z 
2025-01-22T20:11:26.3118870Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3119280Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3119780Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3119790Z 
2025-01-22T20:11:26.3119850Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3119900Z     def plasma(
2025-01-22T20:11:26.3119940Z         self,
2025-01-22T20:11:26.3120000Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3120040Z         config,
2025-01-22T20:11:26.3120080Z     ):
2025-01-22T20:11:26.3120160Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3120230Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3120240Z 
2025-01-22T20:11:26.3120320Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3120540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3120620Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3120680Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3120820Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3120890Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3120970Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3121020Z     return BasePlasma(
2025-01-22T20:11:26.3121080Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3121140Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3121200Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3121260Z     self.update(**kwargs)
2025-01-22T20:11:26.3121320Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3121410Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3121490Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3121570Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3121760Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3121880Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3122050Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3122120Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3122220Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3122350Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3122480Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3122620Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3122820Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3122960Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3123100Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3123510Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3123710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3123810Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3124010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3124080Z     return self.apply_standard()
2025-01-22T20:11:26.3124300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3124390Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3124650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3124740Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3124910Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3124970Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3125190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3125250Z     return self._get_value(key)
2025-01-22T20:11:26.3125450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3125510Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3125600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3125610Z 
2025-01-22T20:11:26.3125730Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3125910Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3126390Z        't046000', 't048000'],
2025-01-22T20:11:26.3126450Z       dtype='object')
2025-01-22T20:11:26.3126490Z key = 'cups'
2025-01-22T20:11:26.3126500Z 
2025-01-22T20:11:26.3126550Z     def get_loc(self, key):
2025-01-22T20:11:26.3126600Z         """
2025-01-22T20:11:26.3126720Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3126770Z     
2025-01-22T20:11:26.3126810Z         Parameters
2025-01-22T20:11:26.3126860Z         ----------
2025-01-22T20:11:26.3126900Z         key : label
2025-01-22T20:11:26.3126940Z     
2025-01-22T20:11:26.3126990Z         Returns
2025-01-22T20:11:26.3127030Z         -------
2025-01-22T20:11:26.3127130Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3127180Z     
2025-01-22T20:11:26.3127220Z         Examples
2025-01-22T20:11:26.3127270Z         --------
2025-01-22T20:11:26.3127340Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3127400Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3127450Z         1
2025-01-22T20:11:26.3127490Z     
2025-01-22T20:11:26.3127560Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3127630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3127680Z         slice(1, 3, None)
2025-01-22T20:11:26.3127720Z     
2025-01-22T20:11:26.3127800Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3127860Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3127930Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3127970Z         """
2025-01-22T20:11:26.3128040Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3128090Z         try:
2025-01-22T20:11:26.3128160Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3128210Z         except KeyError as err:
2025-01-22T20:11:26.3128280Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3128360Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3128450Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3128500Z             ):
2025-01-22T20:11:26.3128640Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3128700Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3128760Z E           KeyError: 'cups'
2025-01-22T20:11:26.3128760Z 
2025-01-22T20:11:26.3128980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3129240Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-atomic_mass] _
2025-01-22T20:11:26.3129240Z 
2025-01-22T20:11:26.3129370Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3129540Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3129590Z        't046000', 't048000'],
2025-01-22T20:11:26.3129650Z       dtype='object')
2025-01-22T20:11:26.3129690Z key = 'cups'
2025-01-22T20:11:26.3129690Z 
2025-01-22T20:11:26.3129750Z     def get_loc(self, key):
2025-01-22T20:11:26.3129790Z         """
2025-01-22T20:11:26.3129920Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3129960Z     
2025-01-22T20:11:26.3130010Z         Parameters
2025-01-22T20:11:26.3130060Z         ----------
2025-01-22T20:11:26.3130100Z         key : label
2025-01-22T20:11:26.3130140Z     
2025-01-22T20:11:26.3130190Z         Returns
2025-01-22T20:11:26.3130230Z         -------
2025-01-22T20:11:26.3130340Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3130380Z     
2025-01-22T20:11:26.3130430Z         Examples
2025-01-22T20:11:26.3130480Z         --------
2025-01-22T20:11:26.3130540Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3130600Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3130640Z         1
2025-01-22T20:11:26.3130740Z     
2025-01-22T20:11:26.3130830Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3130890Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3130940Z         slice(1, 3, None)
2025-01-22T20:11:26.3130990Z     
2025-01-22T20:11:26.3131070Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3131140Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3131200Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3131240Z         """
2025-01-22T20:11:26.3131310Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3131360Z         try:
2025-01-22T20:11:26.3131430Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3131430Z 
2025-01-22T20:11:26.3131630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3131720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3131830Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3131870Z     ???
2025-01-22T20:11:26.3131970Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3132020Z     ???
2025-01-22T20:11:26.3132240Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3132280Z     ???
2025-01-22T20:11:26.3132360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3132370Z 
2025-01-22T20:11:26.3132410Z >   ???
2025-01-22T20:11:26.3132460Z E   KeyError: 'cups'
2025-01-22T20:11:26.3132460Z 
2025-01-22T20:11:26.3132560Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3132560Z 
2025-01-22T20:11:26.3132700Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3132700Z 
2025-01-22T20:11:26.3132870Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3133140Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3133690Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3133690Z 
2025-01-22T20:11:26.3133760Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3133810Z     def plasma(
2025-01-22T20:11:26.3133850Z         self,
2025-01-22T20:11:26.3133900Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3133950Z         config,
2025-01-22T20:11:26.3133990Z     ):
2025-01-22T20:11:26.3134070Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3134140Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3134150Z 
2025-01-22T20:11:26.3134230Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3134320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3134390Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3134460Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3134590Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3134660Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3134740Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3134790Z     return BasePlasma(
2025-01-22T20:11:26.3134850Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3134910Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3134970Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3135030Z     self.update(**kwargs)
2025-01-22T20:11:26.3135100Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3135180Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3135270Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3135340Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3135590Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3135710Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3135880Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3135940Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3136040Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3136170Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3136300Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3136440Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3136640Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3136780Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3136920Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3137000Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3137210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3137300Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3137490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3137550Z     return self.apply_standard()
2025-01-22T20:11:26.3137770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3137900Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3138160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3138240Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3138420Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3138480Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3138780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3138840Z     return self._get_value(key)
2025-01-22T20:11:26.3139050Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3139110Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3139200Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3139210Z 
2025-01-22T20:11:26.3139330Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3139500Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3139550Z        't046000', 't048000'],
2025-01-22T20:11:26.3139600Z       dtype='object')
2025-01-22T20:11:26.3139650Z key = 'cups'
2025-01-22T20:11:26.3139660Z 
2025-01-22T20:11:26.3139710Z     def get_loc(self, key):
2025-01-22T20:11:26.3139760Z         """
2025-01-22T20:11:26.3139880Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3139930Z     
2025-01-22T20:11:26.3139970Z         Parameters
2025-01-22T20:11:26.3140020Z         ----------
2025-01-22T20:11:26.3140070Z         key : label
2025-01-22T20:11:26.3140100Z     
2025-01-22T20:11:26.3140150Z         Returns
2025-01-22T20:11:26.3140190Z         -------
2025-01-22T20:11:26.3140290Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3140330Z     
2025-01-22T20:11:26.3140380Z         Examples
2025-01-22T20:11:26.3140430Z         --------
2025-01-22T20:11:26.3140500Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3140560Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3140600Z         1
2025-01-22T20:11:26.3140690Z     
2025-01-22T20:11:26.3140770Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3140840Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3140890Z         slice(1, 3, None)
2025-01-22T20:11:26.3140930Z     
2025-01-22T20:11:26.3141010Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3141080Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3141140Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3141180Z         """
2025-01-22T20:11:26.3141250Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3141300Z         try:
2025-01-22T20:11:26.3141370Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3141420Z         except KeyError as err:
2025-01-22T20:11:26.3141490Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3141560Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3141660Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3141710Z             ):
2025-01-22T20:11:26.3141770Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3141830Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3141890Z E           KeyError: 'cups'
2025-01-22T20:11:26.3141890Z 
2025-01-22T20:11:26.3142100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3142360Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ionization_data] _
2025-01-22T20:11:26.3142370Z 
2025-01-22T20:11:26.3142490Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3142660Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3142710Z        't046000', 't048000'],
2025-01-22T20:11:26.3142760Z       dtype='object')
2025-01-22T20:11:26.3142810Z key = 'cups'
2025-01-22T20:11:26.3142810Z 
2025-01-22T20:11:26.3142860Z     def get_loc(self, key):
2025-01-22T20:11:26.3143010Z         """
2025-01-22T20:11:26.3143140Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3143180Z     
2025-01-22T20:11:26.3143230Z         Parameters
2025-01-22T20:11:26.3143270Z         ----------
2025-01-22T20:11:26.3143320Z         key : label
2025-01-22T20:11:26.3143360Z     
2025-01-22T20:11:26.3143400Z         Returns
2025-01-22T20:11:26.3143440Z         -------
2025-01-22T20:11:26.3143540Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3143580Z     
2025-01-22T20:11:26.3143630Z         Examples
2025-01-22T20:11:26.3143670Z         --------
2025-01-22T20:11:26.3143740Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3143800Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3143840Z         1
2025-01-22T20:11:26.3143880Z     
2025-01-22T20:11:26.3143950Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3144020Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3144070Z         slice(1, 3, None)
2025-01-22T20:11:26.3144120Z     
2025-01-22T20:11:26.3144200Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3144260Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3144320Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3144360Z         """
2025-01-22T20:11:26.3144430Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3144480Z         try:
2025-01-22T20:11:26.3144550Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3144550Z 
2025-01-22T20:11:26.3144750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3144840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3144950Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3145180Z     ???
2025-01-22T20:11:26.3145280Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3145330Z     ???
2025-01-22T20:11:26.3145550Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3145590Z     ???
2025-01-22T20:11:26.3145680Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3145680Z 
2025-01-22T20:11:26.3145720Z >   ???
2025-01-22T20:11:26.3145770Z E   KeyError: 'cups'
2025-01-22T20:11:26.3145770Z 
2025-01-22T20:11:26.3145870Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3145870Z 
2025-01-22T20:11:26.3146000Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3146010Z 
2025-01-22T20:11:26.3146170Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3146440Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3146930Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3146940Z 
2025-01-22T20:11:26.3147000Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3147060Z     def plasma(
2025-01-22T20:11:26.3147100Z         self,
2025-01-22T20:11:26.3147160Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3147200Z         config,
2025-01-22T20:11:26.3147250Z     ):
2025-01-22T20:11:26.3147330Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3147400Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3147400Z 
2025-01-22T20:11:26.3147490Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3147570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3147650Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3147710Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3147960Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3148040Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3148130Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3148180Z     return BasePlasma(
2025-01-22T20:11:26.3148240Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3148300Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3148370Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3148420Z     self.update(**kwargs)
2025-01-22T20:11:26.3148480Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3148570Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3148660Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3148730Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3148930Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3149040Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3149210Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3149280Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3149380Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3149510Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3149640Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3149780Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3149980Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3150120Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3150260Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3150400Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3150900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3151010Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3151210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3151520Z     return self.apply_standard()
2025-01-22T20:11:26.3151890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3151990Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3152260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3152350Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3152540Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3152620Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3152850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3152910Z     return self._get_value(key)
2025-01-22T20:11:26.3153120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3153190Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3153280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3153280Z 
2025-01-22T20:11:26.3153410Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3153590Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3153640Z        't046000', 't048000'],
2025-01-22T20:11:26.3153690Z       dtype='object')
2025-01-22T20:11:26.3153740Z key = 'cups'
2025-01-22T20:11:26.3153740Z 
2025-01-22T20:11:26.3153790Z     def get_loc(self, key):
2025-01-22T20:11:26.3154130Z         """
2025-01-22T20:11:26.3154260Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3154300Z     
2025-01-22T20:11:26.3154350Z         Parameters
2025-01-22T20:11:26.3154400Z         ----------
2025-01-22T20:11:26.3154440Z         key : label
2025-01-22T20:11:26.3154480Z     
2025-01-22T20:11:26.3154520Z         Returns
2025-01-22T20:11:26.3154570Z         -------
2025-01-22T20:11:26.3154670Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3154710Z     
2025-01-22T20:11:26.3154760Z         Examples
2025-01-22T20:11:26.3154800Z         --------
2025-01-22T20:11:26.3154870Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3154930Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3154970Z         1
2025-01-22T20:11:26.3155010Z     
2025-01-22T20:11:26.3155090Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3155150Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3155210Z         slice(1, 3, None)
2025-01-22T20:11:26.3155250Z     
2025-01-22T20:11:26.3155330Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3155400Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3155460Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3155500Z         """
2025-01-22T20:11:26.3155570Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3155620Z         try:
2025-01-22T20:11:26.3155690Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3155740Z         except KeyError as err:
2025-01-22T20:11:26.3155810Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3155890Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3155980Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3156090Z             ):
2025-01-22T20:11:26.3156160Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3156230Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3156280Z E           KeyError: 'cups'
2025-01-22T20:11:26.3156280Z 
2025-01-22T20:11:26.3156500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3156760Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] _
2025-01-22T20:11:26.3156760Z 
2025-01-22T20:11:26.3156890Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3157060Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3157110Z        't046000', 't048000'],
2025-01-22T20:11:26.3157150Z       dtype='object')
2025-01-22T20:11:26.3157200Z key = 'cups'
2025-01-22T20:11:26.3157200Z 
2025-01-22T20:11:26.3157260Z     def get_loc(self, key):
2025-01-22T20:11:26.3157300Z         """
2025-01-22T20:11:26.3157420Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3157470Z     
2025-01-22T20:11:26.3157510Z         Parameters
2025-01-22T20:11:26.3157560Z         ----------
2025-01-22T20:11:26.3157600Z         key : label
2025-01-22T20:11:26.3157640Z     
2025-01-22T20:11:26.3157690Z         Returns
2025-01-22T20:11:26.3157730Z         -------
2025-01-22T20:11:26.3157830Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3157880Z     
2025-01-22T20:11:26.3157920Z         Examples
2025-01-22T20:11:26.3157970Z         --------
2025-01-22T20:11:26.3158030Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3158090Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3158140Z         1
2025-01-22T20:11:26.3158180Z     
2025-01-22T20:11:26.3158250Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3158320Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3158360Z         slice(1, 3, None)
2025-01-22T20:11:26.3158460Z     
2025-01-22T20:11:26.3158550Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3158620Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3158690Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3158730Z         """
2025-01-22T20:11:26.3158800Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3158850Z         try:
2025-01-22T20:11:26.3158920Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3158920Z 
2025-01-22T20:11:26.3159120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3159220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3159330Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3159370Z     ???
2025-01-22T20:11:26.3159470Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3159520Z     ???
2025-01-22T20:11:26.3159740Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3159780Z     ???
2025-01-22T20:11:26.3159870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3159870Z 
2025-01-22T20:11:26.3159910Z >   ???
2025-01-22T20:11:26.3159960Z E   KeyError: 'cups'
2025-01-22T20:11:26.3159970Z 
2025-01-22T20:11:26.3160060Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3160060Z 
2025-01-22T20:11:26.3160200Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3160200Z 
2025-01-22T20:11:26.3160370Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3160640Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3161190Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3161200Z 
2025-01-22T20:11:26.3161270Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3161320Z     def plasma(
2025-01-22T20:11:26.3161360Z         self,
2025-01-22T20:11:26.3161410Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3161460Z         config,
2025-01-22T20:11:26.3161500Z     ):
2025-01-22T20:11:26.3161590Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3161660Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3161660Z 
2025-01-22T20:11:26.3161750Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3161830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3161920Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3161970Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3162100Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3162180Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3162260Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3162310Z     return BasePlasma(
2025-01-22T20:11:26.3162370Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3162430Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3162490Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3162540Z     self.update(**kwargs)
2025-01-22T20:11:26.3162610Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3162700Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3162780Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3162850Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3163050Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3163170Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3163880Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3163950Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3164050Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3164180Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3164320Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3164460Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3164660Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3164810Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3164960Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3165040Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3165250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3165340Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3165550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3165610Z     return self.apply_standard()
2025-01-22T20:11:26.3165830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3165930Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3166180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3170810Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3171040Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3171510Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3171730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3171790Z     return self._get_value(key)
2025-01-22T20:11:26.3172000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3172060Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3172150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3172150Z 
2025-01-22T20:11:26.3172290Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3172450Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3172500Z        't046000', 't048000'],
2025-01-22T20:11:26.3172560Z       dtype='object')
2025-01-22T20:11:26.3172600Z key = 'cups'
2025-01-22T20:11:26.3172610Z 
2025-01-22T20:11:26.3172660Z     def get_loc(self, key):
2025-01-22T20:11:26.3172700Z         """
2025-01-22T20:11:26.3172830Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3172870Z     
2025-01-22T20:11:26.3172920Z         Parameters
2025-01-22T20:11:26.3172970Z         ----------
2025-01-22T20:11:26.3173020Z         key : label
2025-01-22T20:11:26.3173060Z     
2025-01-22T20:11:26.3173100Z         Returns
2025-01-22T20:11:26.3173150Z         -------
2025-01-22T20:11:26.3173250Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3173290Z     
2025-01-22T20:11:26.3173330Z         Examples
2025-01-22T20:11:26.3173370Z         --------
2025-01-22T20:11:26.3173440Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3173510Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3173550Z         1
2025-01-22T20:11:26.3173590Z     
2025-01-22T20:11:26.3173670Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3173740Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3173790Z         slice(1, 3, None)
2025-01-22T20:11:26.3173910Z     
2025-01-22T20:11:26.3173990Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3174060Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3174130Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3174170Z         """
2025-01-22T20:11:26.3174240Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3174290Z         try:
2025-01-22T20:11:26.3174360Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3174410Z         except KeyError as err:
2025-01-22T20:11:26.3174480Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3174550Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3174650Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3174690Z             ):
2025-01-22T20:11:26.3174760Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3174820Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3174880Z E           KeyError: 'cups'
2025-01-22T20:11:26.3174880Z 
2025-01-22T20:11:26.3175090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3175360Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] _
2025-01-22T20:11:26.3175360Z 
2025-01-22T20:11:26.3175490Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3175670Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3175730Z        't046000', 't048000'],
2025-01-22T20:11:26.3175780Z       dtype='object')
2025-01-22T20:11:26.3175820Z key = 'cups'
2025-01-22T20:11:26.3175820Z 
2025-01-22T20:11:26.3175870Z     def get_loc(self, key):
2025-01-22T20:11:26.3176000Z         """
2025-01-22T20:11:26.3176130Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3176180Z     
2025-01-22T20:11:26.3176220Z         Parameters
2025-01-22T20:11:26.3176270Z         ----------
2025-01-22T20:11:26.3176310Z         key : label
2025-01-22T20:11:26.3176360Z     
2025-01-22T20:11:26.3176400Z         Returns
2025-01-22T20:11:26.3176450Z         -------
2025-01-22T20:11:26.3176550Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3176600Z     
2025-01-22T20:11:26.3176640Z         Examples
2025-01-22T20:11:26.3176690Z         --------
2025-01-22T20:11:26.3176760Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3176810Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3176860Z         1
2025-01-22T20:11:26.3176900Z     
2025-01-22T20:11:26.3176970Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3177030Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3177090Z         slice(1, 3, None)
2025-01-22T20:11:26.3177130Z     
2025-01-22T20:11:26.3177210Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3177280Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3177350Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3177390Z         """
2025-01-22T20:11:26.3177460Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3177500Z         try:
2025-01-22T20:11:26.3177570Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3177570Z 
2025-01-22T20:11:26.3177770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3177860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3177970Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3178010Z     ???
2025-01-22T20:11:26.3178120Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3178160Z     ???
2025-01-22T20:11:26.3178390Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3178490Z     ???
2025-01-22T20:11:26.3178570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3178580Z 
2025-01-22T20:11:26.3178620Z >   ???
2025-01-22T20:11:26.3178680Z E   KeyError: 'cups'
2025-01-22T20:11:26.3178680Z 
2025-01-22T20:11:26.3178780Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3178780Z 
2025-01-22T20:11:26.3178910Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3178910Z 
2025-01-22T20:11:26.3179080Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3179350Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3179930Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3179940Z 
2025-01-22T20:11:26.3180000Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3180050Z     def plasma(
2025-01-22T20:11:26.3180090Z         self,
2025-01-22T20:11:26.3180140Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3180190Z         config,
2025-01-22T20:11:26.3180230Z     ):
2025-01-22T20:11:26.3180310Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3180380Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3180380Z 
2025-01-22T20:11:26.3180480Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3180560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3180640Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3180760Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3180890Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3180970Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3181060Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3181110Z     return BasePlasma(
2025-01-22T20:11:26.3181160Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3181220Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3181280Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3181340Z     self.update(**kwargs)
2025-01-22T20:11:26.3181400Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3181490Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3181570Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3181650Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3181840Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3181980Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3182150Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3182230Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3182320Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3182460Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3182590Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3182730Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3182940Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3183070Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3183220Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3183290Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3183490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3183640Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3183840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3183910Z     return self.apply_standard()
2025-01-22T20:11:26.3184130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3184230Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3184480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3184570Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3184740Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3184800Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3185020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3185080Z     return self._get_value(key)
2025-01-22T20:11:26.3185300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3185360Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3185440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3185450Z 
2025-01-22T20:11:26.3185570Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3185740Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3185790Z        't046000', 't048000'],
2025-01-22T20:11:26.3185850Z       dtype='object')
2025-01-22T20:11:26.3185890Z key = 'cups'
2025-01-22T20:11:26.3185890Z 
2025-01-22T20:11:26.3185990Z     def get_loc(self, key):
2025-01-22T20:11:26.3186040Z         """
2025-01-22T20:11:26.3186170Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3186210Z     
2025-01-22T20:11:26.3186260Z         Parameters
2025-01-22T20:11:26.3186300Z         ----------
2025-01-22T20:11:26.3186350Z         key : label
2025-01-22T20:11:26.3186390Z     
2025-01-22T20:11:26.3186430Z         Returns
2025-01-22T20:11:26.3186470Z         -------
2025-01-22T20:11:26.3186570Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3186620Z     
2025-01-22T20:11:26.3186660Z         Examples
2025-01-22T20:11:26.3186700Z         --------
2025-01-22T20:11:26.3186770Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3186830Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3186870Z         1
2025-01-22T20:11:26.3186910Z     
2025-01-22T20:11:26.3186990Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3187050Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3187100Z         slice(1, 3, None)
2025-01-22T20:11:26.3187140Z     
2025-01-22T20:11:26.3187220Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3187290Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3187350Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3187400Z         """
2025-01-22T20:11:26.3187470Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3187520Z         try:
2025-01-22T20:11:26.3187590Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3187640Z         except KeyError as err:
2025-01-22T20:11:26.3187710Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3187780Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3187880Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3187920Z             ):
2025-01-22T20:11:26.3187980Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3188040Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3188100Z E           KeyError: 'cups'
2025-01-22T20:11:26.3188400Z 
2025-01-22T20:11:26.3188640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3188890Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] _
2025-01-22T20:11:26.3188890Z 
2025-01-22T20:11:26.3189020Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3189180Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3189230Z        't046000', 't048000'],
2025-01-22T20:11:26.3189280Z       dtype='object')
2025-01-22T20:11:26.3189330Z key = 'cups'
2025-01-22T20:11:26.3189330Z 
2025-01-22T20:11:26.3189380Z     def get_loc(self, key):
2025-01-22T20:11:26.3189420Z         """
2025-01-22T20:11:26.3189550Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3189590Z     
2025-01-22T20:11:26.3189640Z         Parameters
2025-01-22T20:11:26.3189690Z         ----------
2025-01-22T20:11:26.3189730Z         key : label
2025-01-22T20:11:26.3189770Z     
2025-01-22T20:11:26.3189820Z         Returns
2025-01-22T20:11:26.3189860Z         -------
2025-01-22T20:11:26.3189970Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3190010Z     
2025-01-22T20:11:26.3190050Z         Examples
2025-01-22T20:11:26.3190090Z         --------
2025-01-22T20:11:26.3190160Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3190220Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3190260Z         1
2025-01-22T20:11:26.3190300Z     
2025-01-22T20:11:26.3190380Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3190440Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3190900Z         slice(1, 3, None)
2025-01-22T20:11:26.3190940Z     
2025-01-22T20:11:26.3191020Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3191090Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3191160Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3191200Z         """
2025-01-22T20:11:26.3191270Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3191320Z         try:
2025-01-22T20:11:26.3191390Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3191390Z 
2025-01-22T20:11:26.3191750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3191840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3191940Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3191980Z     ???
2025-01-22T20:11:26.3192080Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3192130Z     ???
2025-01-22T20:11:26.3192350Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3192390Z     ???
2025-01-22T20:11:26.3192470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3192480Z 
2025-01-22T20:11:26.3192520Z >   ???
2025-01-22T20:11:26.3192570Z E   KeyError: 'cups'
2025-01-22T20:11:26.3192570Z 
2025-01-22T20:11:26.3192660Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3192670Z 
2025-01-22T20:11:26.3192790Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3192800Z 
2025-01-22T20:11:26.3192970Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3193220Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3193710Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3193810Z 
2025-01-22T20:11:26.3193880Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3193930Z     def plasma(
2025-01-22T20:11:26.3193970Z         self,
2025-01-22T20:11:26.3194020Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3194060Z         config,
2025-01-22T20:11:26.3194100Z     ):
2025-01-22T20:11:26.3194190Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3194250Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3194260Z 
2025-01-22T20:11:26.3194350Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3194430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3194510Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3194560Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3194690Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3194770Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3194850Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3194900Z     return BasePlasma(
2025-01-22T20:11:26.3194960Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3195020Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3195080Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3195140Z     self.update(**kwargs)
2025-01-22T20:11:26.3195200Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3195290Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3195380Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3195460Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3195650Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3195770Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3195990Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3196070Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3196170Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3196300Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3196440Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3196580Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3196790Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3196930Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3197070Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3197140Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3197360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3197450Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3197650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3197710Z     return self.apply_standard()
2025-01-22T20:11:26.3197940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3198030Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3198280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3198370Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3198540Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3198600Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3198820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3198880Z     return self._get_value(key)
2025-01-22T20:11:26.3199150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3199210Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3199300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3199310Z 
2025-01-22T20:11:26.3199430Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3199600Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3199660Z        't046000', 't048000'],
2025-01-22T20:11:26.3199710Z       dtype='object')
2025-01-22T20:11:26.3199750Z key = 'cups'
2025-01-22T20:11:26.3199760Z 
2025-01-22T20:11:26.3199810Z     def get_loc(self, key):
2025-01-22T20:11:26.3199860Z         """
2025-01-22T20:11:26.3199980Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3200030Z     
2025-01-22T20:11:26.3200070Z         Parameters
2025-01-22T20:11:26.3200120Z         ----------
2025-01-22T20:11:26.3200160Z         key : label
2025-01-22T20:11:26.3200210Z     
2025-01-22T20:11:26.3200250Z         Returns
2025-01-22T20:11:26.3200290Z         -------
2025-01-22T20:11:26.3200390Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3200430Z     
2025-01-22T20:11:26.3200480Z         Examples
2025-01-22T20:11:26.3200520Z         --------
2025-01-22T20:11:26.3200590Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3200650Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3200690Z         1
2025-01-22T20:11:26.3200730Z     
2025-01-22T20:11:26.3200800Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3200860Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3200960Z         slice(1, 3, None)
2025-01-22T20:11:26.3201010Z     
2025-01-22T20:11:26.3201090Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3201160Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3201220Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3201260Z         """
2025-01-22T20:11:26.3201340Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3201380Z         try:
2025-01-22T20:11:26.3201450Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3201510Z         except KeyError as err:
2025-01-22T20:11:26.3201580Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3201650Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3201750Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3201790Z             ):
2025-01-22T20:11:26.3201860Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3201920Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3201980Z E           KeyError: 'cups'
2025-01-22T20:11:26.3201980Z 
2025-01-22T20:11:26.3202200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3202470Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-metastability] _
2025-01-22T20:11:26.3202470Z 
2025-01-22T20:11:26.3202590Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3202760Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3202810Z        't046000', 't048000'],
2025-01-22T20:11:26.3202860Z       dtype='object')
2025-01-22T20:11:26.3202900Z key = 'cups'
2025-01-22T20:11:26.3202910Z 
2025-01-22T20:11:26.3202960Z     def get_loc(self, key):
2025-01-22T20:11:26.3203010Z         """
2025-01-22T20:11:26.3203130Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3203180Z     
2025-01-22T20:11:26.3203230Z         Parameters
2025-01-22T20:11:26.3203320Z         ----------
2025-01-22T20:11:26.3203370Z         key : label
2025-01-22T20:11:26.3203410Z     
2025-01-22T20:11:26.3203450Z         Returns
2025-01-22T20:11:26.3203500Z         -------
2025-01-22T20:11:26.3203600Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3203640Z     
2025-01-22T20:11:26.3203690Z         Examples
2025-01-22T20:11:26.3203730Z         --------
2025-01-22T20:11:26.3203800Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3203860Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3203910Z         1
2025-01-22T20:11:26.3203950Z     
2025-01-22T20:11:26.3204030Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3204080Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3204130Z         slice(1, 3, None)
2025-01-22T20:11:26.3204180Z     
2025-01-22T20:11:26.3204260Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3204320Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3204380Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3204430Z         """
2025-01-22T20:11:26.3204500Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3204540Z         try:
2025-01-22T20:11:26.3204610Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3204610Z 
2025-01-22T20:11:26.3204810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3204890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3205000Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3205040Z     ???
2025-01-22T20:11:26.3205140Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3205180Z     ???
2025-01-22T20:11:26.3205440Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3205480Z     ???
2025-01-22T20:11:26.3205570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3205570Z 
2025-01-22T20:11:26.3205620Z >   ???
2025-01-22T20:11:26.3205660Z E   KeyError: 'cups'
2025-01-22T20:11:26.3205660Z 
2025-01-22T20:11:26.3205760Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3205760Z 
2025-01-22T20:11:26.3205890Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3205890Z 
2025-01-22T20:11:26.3206060Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3206310Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3206800Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3206810Z 
2025-01-22T20:11:26.3206880Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3206920Z     def plasma(
2025-01-22T20:11:26.3206970Z         self,
2025-01-22T20:11:26.3207020Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3207060Z         config,
2025-01-22T20:11:26.3207100Z     ):
2025-01-22T20:11:26.3207190Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3207250Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3207260Z 
2025-01-22T20:11:26.3207340Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3207430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3207500Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3207570Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3207690Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3207770Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3208320Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3208370Z     return BasePlasma(
2025-01-22T20:11:26.3208420Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3208490Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3208550Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3208600Z     self.update(**kwargs)
2025-01-22T20:11:26.3208660Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3208760Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3208840Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3208910Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3209100Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3209220Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3209390Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3209460Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3209560Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3209690Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3209830Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3209970Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3210180Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3210320Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3210460Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3210550Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3210750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3211510Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3211710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3211780Z     return self.apply_standard()
2025-01-22T20:11:26.3212000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3212090Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3212340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3212430Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3212610Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3212660Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3212880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3212940Z     return self._get_value(key)
2025-01-22T20:11:26.3213160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3213220Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3213300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3213310Z 
2025-01-22T20:11:26.3213430Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3213600Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3213660Z        't046000', 't048000'],
2025-01-22T20:11:26.3213710Z       dtype='object')
2025-01-22T20:11:26.3213750Z key = 'cups'
2025-01-22T20:11:26.3213760Z 
2025-01-22T20:11:26.3213810Z     def get_loc(self, key):
2025-01-22T20:11:26.3213850Z         """
2025-01-22T20:11:26.3213980Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3214020Z     
2025-01-22T20:11:26.3214060Z         Parameters
2025-01-22T20:11:26.3214190Z         ----------
2025-01-22T20:11:26.3214230Z         key : label
2025-01-22T20:11:26.3214280Z     
2025-01-22T20:11:26.3214320Z         Returns
2025-01-22T20:11:26.3214360Z         -------
2025-01-22T20:11:26.3214460Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3214500Z     
2025-01-22T20:11:26.3214550Z         Examples
2025-01-22T20:11:26.3214590Z         --------
2025-01-22T20:11:26.3214660Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3214720Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3214760Z         1
2025-01-22T20:11:26.3214800Z     
2025-01-22T20:11:26.3214880Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3214950Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3215000Z         slice(1, 3, None)
2025-01-22T20:11:26.3215040Z     
2025-01-22T20:11:26.3215120Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3215190Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3215250Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3215300Z         """
2025-01-22T20:11:26.3215370Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3215410Z         try:
2025-01-22T20:11:26.3215480Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3215530Z         except KeyError as err:
2025-01-22T20:11:26.3215610Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3215680Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3215770Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3215820Z             ):
2025-01-22T20:11:26.3215880Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3215940Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3216050Z E           KeyError: 'cups'
2025-01-22T20:11:26.3216050Z 
2025-01-22T20:11:26.3216280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3216530Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-delta] _
2025-01-22T20:11:26.3216530Z 
2025-01-22T20:11:26.3216660Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3216830Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3216880Z        't046000', 't048000'],
2025-01-22T20:11:26.3216930Z       dtype='object')
2025-01-22T20:11:26.3216970Z key = 'cups'
2025-01-22T20:11:26.3216980Z 
2025-01-22T20:11:26.3217030Z     def get_loc(self, key):
2025-01-22T20:11:26.3217070Z         """
2025-01-22T20:11:26.3217200Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3217240Z     
2025-01-22T20:11:26.3217290Z         Parameters
2025-01-22T20:11:26.3217340Z         ----------
2025-01-22T20:11:26.3221490Z         key : label
2025-01-22T20:11:26.3221560Z     
2025-01-22T20:11:26.3221610Z         Returns
2025-01-22T20:11:26.3221660Z         -------
2025-01-22T20:11:26.3221760Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3221820Z     
2025-01-22T20:11:26.3221870Z         Examples
2025-01-22T20:11:26.3221910Z         --------
2025-01-22T20:11:26.3221980Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3222040Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3222080Z         1
2025-01-22T20:11:26.3222130Z     
2025-01-22T20:11:26.3222200Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3222260Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3222330Z         slice(1, 3, None)
2025-01-22T20:11:26.3222370Z     
2025-01-22T20:11:26.3222450Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3222530Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3222800Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3222840Z         """
2025-01-22T20:11:26.3222920Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3222960Z         try:
2025-01-22T20:11:26.3223040Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3223040Z 
2025-01-22T20:11:26.3223230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3223330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3223430Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3223470Z     ???
2025-01-22T20:11:26.3223570Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3223610Z     ???
2025-01-22T20:11:26.3223830Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3223880Z     ???
2025-01-22T20:11:26.3223960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3223970Z 
2025-01-22T20:11:26.3224010Z >   ???
2025-01-22T20:11:26.3224050Z E   KeyError: 'cups'
2025-01-22T20:11:26.3224060Z 
2025-01-22T20:11:26.3224150Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3224160Z 
2025-01-22T20:11:26.3224290Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3224290Z 
2025-01-22T20:11:26.3224460Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3224720Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3225210Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3225280Z 
2025-01-22T20:11:26.3225350Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3225400Z     def plasma(
2025-01-22T20:11:26.3225440Z         self,
2025-01-22T20:11:26.3225500Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3225540Z         config,
2025-01-22T20:11:26.3225580Z     ):
2025-01-22T20:11:26.3225670Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3225730Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3225730Z 
2025-01-22T20:11:26.3225820Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3225910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3225980Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3226040Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3226160Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3226240Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3226320Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3226370Z     return BasePlasma(
2025-01-22T20:11:26.3226440Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3226500Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3226560Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3226610Z     self.update(**kwargs)
2025-01-22T20:11:26.3226670Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3226760Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3226850Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3226920Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3227110Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3227230Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3227400Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3227470Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3227620Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3227760Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3227890Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3228040Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3228240Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3228380Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3228530Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3228610Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3228810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3228910Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3229100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3229170Z     return self.apply_standard()
2025-01-22T20:11:26.3229400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3229490Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3229750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3229830Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3230010Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3230070Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3230280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3230380Z     return self._get_value(key)
2025-01-22T20:11:26.3230600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3230660Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3230750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3230750Z 
2025-01-22T20:11:26.3230880Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3231050Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3231110Z        't046000', 't048000'],
2025-01-22T20:11:26.3231150Z       dtype='object')
2025-01-22T20:11:26.3231200Z key = 'cups'
2025-01-22T20:11:26.3231200Z 
2025-01-22T20:11:26.3231250Z     def get_loc(self, key):
2025-01-22T20:11:26.3231300Z         """
2025-01-22T20:11:26.3231420Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3231470Z     
2025-01-22T20:11:26.3231520Z         Parameters
2025-01-22T20:11:26.3231750Z         ----------
2025-01-22T20:11:26.3231800Z         key : label
2025-01-22T20:11:26.3231840Z     
2025-01-22T20:11:26.3231890Z         Returns
2025-01-22T20:11:26.3231940Z         -------
2025-01-22T20:11:26.3232040Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3232080Z     
2025-01-22T20:11:26.3232130Z         Examples
2025-01-22T20:11:26.3232170Z         --------
2025-01-22T20:11:26.3232250Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3232310Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3232350Z         1
2025-01-22T20:11:26.3232390Z     
2025-01-22T20:11:26.3232470Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3232530Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3232580Z         slice(1, 3, None)
2025-01-22T20:11:26.3232620Z     
2025-01-22T20:11:26.3232710Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3232770Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3233150Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3233200Z         """
2025-01-22T20:11:26.3233280Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3233320Z         try:
2025-01-22T20:11:26.3233400Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3233450Z         except KeyError as err:
2025-01-22T20:11:26.3233520Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3233600Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3233690Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3233730Z             ):
2025-01-22T20:11:26.3233800Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3233860Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3233910Z E           KeyError: 'cups'
2025-01-22T20:11:26.3233920Z 
2025-01-22T20:11:26.3234130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3234430Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_electron_densities] _
2025-01-22T20:11:26.3234430Z 
2025-01-22T20:11:26.3234550Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3234720Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3234770Z        't046000', 't048000'],
2025-01-22T20:11:26.3234820Z       dtype='object')
2025-01-22T20:11:26.3234860Z key = 'cups'
2025-01-22T20:11:26.3234870Z 
2025-01-22T20:11:26.3234920Z     def get_loc(self, key):
2025-01-22T20:11:26.3234960Z         """
2025-01-22T20:11:26.3235080Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3235500Z     
2025-01-22T20:11:26.3235550Z         Parameters
2025-01-22T20:11:26.3235600Z         ----------
2025-01-22T20:11:26.3235650Z         key : label
2025-01-22T20:11:26.3235700Z     
2025-01-22T20:11:26.3235740Z         Returns
2025-01-22T20:11:26.3235790Z         -------
2025-01-22T20:11:26.3235890Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3235930Z     
2025-01-22T20:11:26.3235980Z         Examples
2025-01-22T20:11:26.3236020Z         --------
2025-01-22T20:11:26.3236100Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3236160Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3236200Z         1
2025-01-22T20:11:26.3236240Z     
2025-01-22T20:11:26.3236310Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3236370Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3236420Z         slice(1, 3, None)
2025-01-22T20:11:26.3236460Z     
2025-01-22T20:11:26.3236540Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3236600Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3236670Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3236710Z         """
2025-01-22T20:11:26.3236790Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3236830Z         try:
2025-01-22T20:11:26.3236910Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3236910Z 
2025-01-22T20:11:26.3237100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3237190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3237290Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3237340Z     ???
2025-01-22T20:11:26.3237430Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3237480Z     ???
2025-01-22T20:11:26.3237690Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3237740Z     ???
2025-01-22T20:11:26.3237830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3237890Z 
2025-01-22T20:11:26.3237940Z >   ???
2025-01-22T20:11:26.3237990Z E   KeyError: 'cups'
2025-01-22T20:11:26.3238000Z 
2025-01-22T20:11:26.3238090Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3238090Z 
2025-01-22T20:11:26.3238220Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3238220Z 
2025-01-22T20:11:26.3238390Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3238650Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3239140Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3239150Z 
2025-01-22T20:11:26.3239210Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3239260Z     def plasma(
2025-01-22T20:11:26.3239300Z         self,
2025-01-22T20:11:26.3239350Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3239400Z         config,
2025-01-22T20:11:26.3239440Z     ):
2025-01-22T20:11:26.3239520Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3239590Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3239590Z 
2025-01-22T20:11:26.3239680Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3239770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3239840Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3239900Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3240020Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3240140Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3240230Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3240280Z     return BasePlasma(
2025-01-22T20:11:26.3240340Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3240400Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3240460Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3240510Z     self.update(**kwargs)
2025-01-22T20:11:26.3240570Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3240660Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3240740Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3240820Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3241010Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3241130Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3241290Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3241370Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3241460Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3241600Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3241740Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3241880Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3242080Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3242220Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3242360Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3242430Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3242630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3242730Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3242920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3243030Z     return self.apply_standard()
2025-01-22T20:11:26.3243260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3243350Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3243600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3243690Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3243850Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3243910Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3244120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3244180Z     return self._get_value(key)
2025-01-22T20:11:26.3244390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3244460Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3244540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3244540Z 
2025-01-22T20:11:26.3244670Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3244830Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3244880Z        't046000', 't048000'],
2025-01-22T20:11:26.3244930Z       dtype='object')
2025-01-22T20:11:26.3244980Z key = 'cups'
2025-01-22T20:11:26.3244980Z 
2025-01-22T20:11:26.3245030Z     def get_loc(self, key):
2025-01-22T20:11:26.3245070Z         """
2025-01-22T20:11:26.3245190Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3245280Z     
2025-01-22T20:11:26.3245330Z         Parameters
2025-01-22T20:11:26.3245370Z         ----------
2025-01-22T20:11:26.3245420Z         key : label
2025-01-22T20:11:26.3245460Z     
2025-01-22T20:11:26.3245510Z         Returns
2025-01-22T20:11:26.3245550Z         -------
2025-01-22T20:11:26.3245650Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3245690Z     
2025-01-22T20:11:26.3245740Z         Examples
2025-01-22T20:11:26.3245780Z         --------
2025-01-22T20:11:26.3245850Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3245900Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3245950Z         1
2025-01-22T20:11:26.3245990Z     
2025-01-22T20:11:26.3246060Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3246130Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3246170Z         slice(1, 3, None)
2025-01-22T20:11:26.3246210Z     
2025-01-22T20:11:26.3246290Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3246360Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3246420Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3246500Z         """
2025-01-22T20:11:26.3246580Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3246630Z         try:
2025-01-22T20:11:26.3246700Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3246750Z         except KeyError as err:
2025-01-22T20:11:26.3246820Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3246900Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3246990Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3247040Z             ):
2025-01-22T20:11:26.3247100Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3247170Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3247220Z E           KeyError: 'cups'
2025-01-22T20:11:26.3247230Z 
2025-01-22T20:11:26.3247440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3247810Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-phi] _
2025-01-22T20:11:26.3247810Z 
2025-01-22T20:11:26.3247940Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3248110Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3248160Z        't046000', 't048000'],
2025-01-22T20:11:26.3248210Z       dtype='object')
2025-01-22T20:11:26.3248250Z key = 'cups'
2025-01-22T20:11:26.3248250Z 
2025-01-22T20:11:26.3248300Z     def get_loc(self, key):
2025-01-22T20:11:26.3248350Z         """
2025-01-22T20:11:26.3248470Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3248510Z     
2025-01-22T20:11:26.3248560Z         Parameters
2025-01-22T20:11:26.3248610Z         ----------
2025-01-22T20:11:26.3248650Z         key : label
2025-01-22T20:11:26.3248690Z     
2025-01-22T20:11:26.3248740Z         Returns
2025-01-22T20:11:26.3248780Z         -------
2025-01-22T20:11:26.3248880Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3248930Z     
2025-01-22T20:11:26.3248970Z         Examples
2025-01-22T20:11:26.3249020Z         --------
2025-01-22T20:11:26.3249090Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3249140Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3249190Z         1
2025-01-22T20:11:26.3249230Z     
2025-01-22T20:11:26.3249300Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3249370Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3249420Z         slice(1, 3, None)
2025-01-22T20:11:26.3249460Z     
2025-01-22T20:11:26.3249540Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3249610Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3249720Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3249770Z         """
2025-01-22T20:11:26.3249850Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3249890Z         try:
2025-01-22T20:11:26.3249960Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3249960Z 
2025-01-22T20:11:26.3250160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3250250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3250350Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3250400Z     ???
2025-01-22T20:11:26.3250500Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3250540Z     ???
2025-01-22T20:11:26.3250760Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3250850Z     ???
2025-01-22T20:11:26.3250940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3250950Z 
2025-01-22T20:11:26.3250990Z >   ???
2025-01-22T20:11:26.3251040Z E   KeyError: 'cups'
2025-01-22T20:11:26.3251040Z 
2025-01-22T20:11:26.3251140Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3251140Z 
2025-01-22T20:11:26.3251280Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3251280Z 
2025-01-22T20:11:26.3251450Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3251700Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3252200Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3252210Z 
2025-01-22T20:11:26.3252280Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3252330Z     def plasma(
2025-01-22T20:11:26.3252770Z         self,
2025-01-22T20:11:26.3252830Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3252870Z         config,
2025-01-22T20:11:26.3252920Z     ):
2025-01-22T20:11:26.3253000Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3253070Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3253080Z 
2025-01-22T20:11:26.3253160Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3253250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3253320Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3253370Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3253500Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3253570Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3253660Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3253710Z     return BasePlasma(
2025-01-22T20:11:26.3253770Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3253820Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3253890Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3253950Z     self.update(**kwargs)
2025-01-22T20:11:26.3254010Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3254100Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3254190Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3254270Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3254460Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3254580Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3254750Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3255140Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3255240Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3255380Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3255510Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3255650Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3255850Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3255990Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3256130Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3256200Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3256410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3256510Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3256710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3256770Z     return self.apply_standard()
2025-01-22T20:11:26.3256990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3257080Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3257320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3257410Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3257580Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3257650Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3257860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3257920Z     return self._get_value(key)
2025-01-22T20:11:26.3258130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3258260Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3258350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3258360Z 
2025-01-22T20:11:26.3258480Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3258650Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3258700Z        't046000', 't048000'],
2025-01-22T20:11:26.3258750Z       dtype='object')
2025-01-22T20:11:26.3258790Z key = 'cups'
2025-01-22T20:11:26.3258790Z 
2025-01-22T20:11:26.3258850Z     def get_loc(self, key):
2025-01-22T20:11:26.3258890Z         """
2025-01-22T20:11:26.3259010Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3259050Z     
2025-01-22T20:11:26.3259100Z         Parameters
2025-01-22T20:11:26.3259140Z         ----------
2025-01-22T20:11:26.3259190Z         key : label
2025-01-22T20:11:26.3259230Z     
2025-01-22T20:11:26.3259280Z         Returns
2025-01-22T20:11:26.3259320Z         -------
2025-01-22T20:11:26.3259430Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3259460Z     
2025-01-22T20:11:26.3259510Z         Examples
2025-01-22T20:11:26.3259550Z         --------
2025-01-22T20:11:26.3259630Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3259690Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3259730Z         1
2025-01-22T20:11:26.3259770Z     
2025-01-22T20:11:26.3259840Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3259900Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3259950Z         slice(1, 3, None)
2025-01-22T20:11:26.3259990Z     
2025-01-22T20:11:26.3260070Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3260200Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3260260Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3260310Z         """
2025-01-22T20:11:26.3260380Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3260420Z         try:
2025-01-22T20:11:26.3260490Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3260550Z         except KeyError as err:
2025-01-22T20:11:26.3260620Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3260690Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3260780Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3260830Z             ):
2025-01-22T20:11:26.3260900Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3260950Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3261010Z E           KeyError: 'cups'
2025-01-22T20:11:26.3261010Z 
2025-01-22T20:11:26.3261220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3261490Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ion_number_density] _
2025-01-22T20:11:26.3261500Z 
2025-01-22T20:11:26.3261620Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3261790Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3261840Z        't046000', 't048000'],
2025-01-22T20:11:26.3261890Z       dtype='object')
2025-01-22T20:11:26.3261940Z key = 'cups'
2025-01-22T20:11:26.3261940Z 
2025-01-22T20:11:26.3261990Z     def get_loc(self, key):
2025-01-22T20:11:26.3262040Z         """
2025-01-22T20:11:26.3262160Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3262210Z     
2025-01-22T20:11:26.3262250Z         Parameters
2025-01-22T20:11:26.3262300Z         ----------
2025-01-22T20:11:26.3262350Z         key : label
2025-01-22T20:11:26.3262390Z     
2025-01-22T20:11:26.3262440Z         Returns
2025-01-22T20:11:26.3262540Z         -------
2025-01-22T20:11:26.3262660Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3262710Z     
2025-01-22T20:11:26.3262750Z         Examples
2025-01-22T20:11:26.3262800Z         --------
2025-01-22T20:11:26.3262870Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3262930Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3262980Z         1
2025-01-22T20:11:26.3263010Z     
2025-01-22T20:11:26.3263090Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3263150Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3263200Z         slice(1, 3, None)
2025-01-22T20:11:26.3263240Z     
2025-01-22T20:11:26.3263320Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3263380Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3263450Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3263490Z         """
2025-01-22T20:11:26.3263560Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3263610Z         try:
2025-01-22T20:11:26.3263680Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3263680Z 
2025-01-22T20:11:26.3263880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3263970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3264080Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3264120Z     ???
2025-01-22T20:11:26.3264220Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3264260Z     ???
2025-01-22T20:11:26.3264480Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3264520Z     ???
2025-01-22T20:11:26.3264610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3264690Z 
2025-01-22T20:11:26.3264740Z >   ???
2025-01-22T20:11:26.3264790Z E   KeyError: 'cups'
2025-01-22T20:11:26.3264800Z 
2025-01-22T20:11:26.3264890Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3264900Z 
2025-01-22T20:11:26.3265030Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3265030Z 
2025-01-22T20:11:26.3265200Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3265460Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3265950Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3265960Z 
2025-01-22T20:11:26.3266020Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3266070Z     def plasma(
2025-01-22T20:11:26.3266120Z         self,
2025-01-22T20:11:26.3266170Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3266210Z         config,
2025-01-22T20:11:26.3266250Z     ):
2025-01-22T20:11:26.3266340Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3266410Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3266410Z 
2025-01-22T20:11:26.3266500Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3266580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3266660Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3266720Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3266840Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3266910Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3266990Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3267040Z     return BasePlasma(
2025-01-22T20:11:26.3267100Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3267210Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3267280Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3267340Z     self.update(**kwargs)
2025-01-22T20:11:26.3267400Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3267490Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3267570Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3271630Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3272020Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3272150Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3272310Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3272390Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3272500Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3272630Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3272770Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3272910Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3273110Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3273250Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3273390Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3273460Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3273670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3273760Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3274160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3274220Z     return self.apply_standard()
2025-01-22T20:11:26.3274450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3274540Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3274780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3274870Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3275040Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3275100Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3275320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3275370Z     return self._get_value(key)
2025-01-22T20:11:26.3275580Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3275640Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3275730Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3275730Z 
2025-01-22T20:11:26.3275860Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3276030Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3276080Z        't046000', 't048000'],
2025-01-22T20:11:26.3276130Z       dtype='object')
2025-01-22T20:11:26.3276170Z key = 'cups'
2025-01-22T20:11:26.3276170Z 
2025-01-22T20:11:26.3276230Z     def get_loc(self, key):
2025-01-22T20:11:26.3276270Z         """
2025-01-22T20:11:26.3276390Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3276430Z     
2025-01-22T20:11:26.3276480Z         Parameters
2025-01-22T20:11:26.3276530Z         ----------
2025-01-22T20:11:26.3276570Z         key : label
2025-01-22T20:11:26.3276610Z     
2025-01-22T20:11:26.3276650Z         Returns
2025-01-22T20:11:26.3277000Z         -------
2025-01-22T20:11:26.3277100Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3277140Z     
2025-01-22T20:11:26.3277190Z         Examples
2025-01-22T20:11:26.3277240Z         --------
2025-01-22T20:11:26.3277300Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3277360Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3277400Z         1
2025-01-22T20:11:26.3277450Z     
2025-01-22T20:11:26.3277520Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3277590Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3277630Z         slice(1, 3, None)
2025-01-22T20:11:26.3277680Z     
2025-01-22T20:11:26.3277760Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3277830Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3277890Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3277930Z         """
2025-01-22T20:11:26.3278010Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3278050Z         try:
2025-01-22T20:11:26.3278130Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3278180Z         except KeyError as err:
2025-01-22T20:11:26.3278250Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3278320Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3278410Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3278450Z             ):
2025-01-22T20:11:26.3278520Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3278580Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3278630Z E           KeyError: 'cups'
2025-01-22T20:11:26.3278640Z 
2025-01-22T20:11:26.3278850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3279320Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-electron_densities] _
2025-01-22T20:11:26.3279330Z 
2025-01-22T20:11:26.3279460Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3279630Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3279680Z        't046000', 't048000'],
2025-01-22T20:11:26.3279730Z       dtype='object')
2025-01-22T20:11:26.3279770Z key = 'cups'
2025-01-22T20:11:26.3279780Z 
2025-01-22T20:11:26.3279830Z     def get_loc(self, key):
2025-01-22T20:11:26.3279870Z         """
2025-01-22T20:11:26.3279990Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3280030Z     
2025-01-22T20:11:26.3280080Z         Parameters
2025-01-22T20:11:26.3280120Z         ----------
2025-01-22T20:11:26.3280170Z         key : label
2025-01-22T20:11:26.3280210Z     
2025-01-22T20:11:26.3280260Z         Returns
2025-01-22T20:11:26.3280300Z         -------
2025-01-22T20:11:26.3280410Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3280450Z     
2025-01-22T20:11:26.3280500Z         Examples
2025-01-22T20:11:26.3280540Z         --------
2025-01-22T20:11:26.3280610Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3280670Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3280710Z         1
2025-01-22T20:11:26.3280750Z     
2025-01-22T20:11:26.3280830Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3280890Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3280940Z         slice(1, 3, None)
2025-01-22T20:11:26.3280980Z     
2025-01-22T20:11:26.3281070Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3281130Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3281200Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3281240Z         """
2025-01-22T20:11:26.3281310Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3281420Z         try:
2025-01-22T20:11:26.3281500Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3281500Z 
2025-01-22T20:11:26.3281700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3281780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3281890Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3281940Z     ???
2025-01-22T20:11:26.3282040Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3282080Z     ???
2025-01-22T20:11:26.3282300Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3282350Z     ???
2025-01-22T20:11:26.3282430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3282440Z 
2025-01-22T20:11:26.3282480Z >   ???
2025-01-22T20:11:26.3282530Z E   KeyError: 'cups'
2025-01-22T20:11:26.3282540Z 
2025-01-22T20:11:26.3282630Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3282640Z 
2025-01-22T20:11:26.3282760Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3282770Z 
2025-01-22T20:11:26.3282940Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3283190Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3283690Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3283690Z 
2025-01-22T20:11:26.3283760Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3283860Z     def plasma(
2025-01-22T20:11:26.3283900Z         self,
2025-01-22T20:11:26.3283960Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3284000Z         config,
2025-01-22T20:11:26.3284040Z     ):
2025-01-22T20:11:26.3284130Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3284190Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3284200Z 
2025-01-22T20:11:26.3284290Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3284380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3284450Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3284510Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3284640Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3284710Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3284790Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3284850Z     return BasePlasma(
2025-01-22T20:11:26.3284910Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3284970Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3285030Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3285090Z     self.update(**kwargs)
2025-01-22T20:11:26.3285150Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3285250Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3285330Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3285400Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3285590Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3285710Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3285880Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3285950Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3286050Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3286190Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3286380Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3286520Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3286720Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3286860Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3287000Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3287080Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3287270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3287370Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3287560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3287630Z     return self.apply_standard()
2025-01-22T20:11:26.3287850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3287950Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3288200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3288290Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3288480Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3288550Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3288770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3288820Z     return self._get_value(key)
2025-01-22T20:11:26.3289030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3289170Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3289260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3289260Z 
2025-01-22T20:11:26.3289390Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3289560Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3289610Z        't046000', 't048000'],
2025-01-22T20:11:26.3289660Z       dtype='object')
2025-01-22T20:11:26.3289710Z key = 'cups'
2025-01-22T20:11:26.3289710Z 
2025-01-22T20:11:26.3289760Z     def get_loc(self, key):
2025-01-22T20:11:26.3289810Z         """
2025-01-22T20:11:26.3289930Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3289970Z     
2025-01-22T20:11:26.3290020Z         Parameters
2025-01-22T20:11:26.3290070Z         ----------
2025-01-22T20:11:26.3290110Z         key : label
2025-01-22T20:11:26.3290160Z     
2025-01-22T20:11:26.3290200Z         Returns
2025-01-22T20:11:26.3290250Z         -------
2025-01-22T20:11:26.3290350Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3290390Z     
2025-01-22T20:11:26.3290440Z         Examples
2025-01-22T20:11:26.3290480Z         --------
2025-01-22T20:11:26.3290550Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3290610Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3290650Z         1
2025-01-22T20:11:26.3290690Z     
2025-01-22T20:11:26.3290770Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3290830Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3290880Z         slice(1, 3, None)
2025-01-22T20:11:26.3290920Z     
2025-01-22T20:11:26.3291000Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3291060Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3291130Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3291170Z         """
2025-01-22T20:11:26.3291240Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3291340Z         try:
2025-01-22T20:11:26.3291410Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3291470Z         except KeyError as err:
2025-01-22T20:11:26.3291540Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3291610Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3291700Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3291750Z             ):
2025-01-22T20:11:26.3291810Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3291880Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3291930Z E           KeyError: 'cups'
2025-01-22T20:11:26.3291930Z 
2025-01-22T20:11:26.3292150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3292420Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_number_density] _
2025-01-22T20:11:26.3292430Z 
2025-01-22T20:11:26.3292550Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3292720Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3292770Z        't046000', 't048000'],
2025-01-22T20:11:26.3292810Z       dtype='object')
2025-01-22T20:11:26.3292860Z key = 'cups'
2025-01-22T20:11:26.3292860Z 
2025-01-22T20:11:26.3292920Z     def get_loc(self, key):
2025-01-22T20:11:26.3292960Z         """
2025-01-22T20:11:26.3293080Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3293120Z     
2025-01-22T20:11:26.3293170Z         Parameters
2025-01-22T20:11:26.3293210Z         ----------
2025-01-22T20:11:26.3293260Z         key : label
2025-01-22T20:11:26.3293340Z     
2025-01-22T20:11:26.3293390Z         Returns
2025-01-22T20:11:26.3293430Z         -------
2025-01-22T20:11:26.3293540Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3293580Z     
2025-01-22T20:11:26.3293630Z         Examples
2025-01-22T20:11:26.3293670Z         --------
2025-01-22T20:11:26.3293750Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3293800Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3293850Z         1
2025-01-22T20:11:26.3293890Z     
2025-01-22T20:11:26.3293960Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3294030Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3294070Z         slice(1, 3, None)
2025-01-22T20:11:26.3294120Z     
2025-01-22T20:11:26.3294200Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3294270Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3294330Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3294370Z         """
2025-01-22T20:11:26.3294440Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3294490Z         try:
2025-01-22T20:11:26.3294560Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3294560Z 
2025-01-22T20:11:26.3294760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3294850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3294950Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3295000Z     ???
2025-01-22T20:11:26.3295100Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3295140Z     ???
2025-01-22T20:11:26.3295350Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3295390Z     ???
2025-01-22T20:11:26.3295480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3295480Z 
2025-01-22T20:11:26.3295530Z >   ???
2025-01-22T20:11:26.3295570Z E   KeyError: 'cups'
2025-01-22T20:11:26.3295660Z 
2025-01-22T20:11:26.3295770Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3295770Z 
2025-01-22T20:11:26.3295900Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3295900Z 
2025-01-22T20:11:26.3296070Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3296330Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3296810Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3296820Z 
2025-01-22T20:11:26.3296880Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3296930Z     def plasma(
2025-01-22T20:11:26.3296980Z         self,
2025-01-22T20:11:26.3297030Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3297080Z         config,
2025-01-22T20:11:26.3297120Z     ):
2025-01-22T20:11:26.3297200Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3297260Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3297270Z 
2025-01-22T20:11:26.3297350Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3297440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3297510Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3297560Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3297690Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3297760Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3297840Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3297890Z     return BasePlasma(
2025-01-22T20:11:26.3298350Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3298420Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3298490Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3298540Z     self.update(**kwargs)
2025-01-22T20:11:26.3298600Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3298690Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3298770Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3298850Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3299050Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3299160Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3299330Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3299400Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3299500Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3299640Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3299780Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3299920Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3300120Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3300260Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3300400Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3300470Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3300670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3300770Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3300960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3301020Z     return self.apply_standard()
2025-01-22T20:11:26.3301240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3301420Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3301670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3301760Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3301940Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3301990Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3302210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3302270Z     return self._get_value(key)
2025-01-22T20:11:26.3302480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3302550Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3302640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3302650Z 
2025-01-22T20:11:26.3302770Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3302950Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3303000Z        't046000', 't048000'],
2025-01-22T20:11:26.3303050Z       dtype='object')
2025-01-22T20:11:26.3303090Z key = 'cups'
2025-01-22T20:11:26.3303090Z 
2025-01-22T20:11:26.3303150Z     def get_loc(self, key):
2025-01-22T20:11:26.3303190Z         """
2025-01-22T20:11:26.3303310Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3303360Z     
2025-01-22T20:11:26.3303400Z         Parameters
2025-01-22T20:11:26.3303450Z         ----------
2025-01-22T20:11:26.3303490Z         key : label
2025-01-22T20:11:26.3303590Z     
2025-01-22T20:11:26.3303630Z         Returns
2025-01-22T20:11:26.3303670Z         -------
2025-01-22T20:11:26.3303780Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3303820Z     
2025-01-22T20:11:26.3303870Z         Examples
2025-01-22T20:11:26.3303910Z         --------
2025-01-22T20:11:26.3303980Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3304040Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3304080Z         1
2025-01-22T20:11:26.3304120Z     
2025-01-22T20:11:26.3304200Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3304260Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3304310Z         slice(1, 3, None)
2025-01-22T20:11:26.3304350Z     
2025-01-22T20:11:26.3304430Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3304490Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3304560Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3304710Z         """
2025-01-22T20:11:26.3304790Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3304840Z         try:
2025-01-22T20:11:26.3304920Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3304970Z         except KeyError as err:
2025-01-22T20:11:26.3305050Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3305120Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3305210Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3305260Z             ):
2025-01-22T20:11:26.3305320Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3305380Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3305440Z E           KeyError: 'cups'
2025-01-22T20:11:26.3305440Z 
2025-01-22T20:11:26.3305650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3305940Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] _
2025-01-22T20:11:26.3306020Z 
2025-01-22T20:11:26.3306150Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3306320Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3306370Z        't046000', 't048000'],
2025-01-22T20:11:26.3306420Z       dtype='object')
2025-01-22T20:11:26.3306460Z key = 'cups'
2025-01-22T20:11:26.3306460Z 
2025-01-22T20:11:26.3306520Z     def get_loc(self, key):
2025-01-22T20:11:26.3306560Z         """
2025-01-22T20:11:26.3306690Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3306730Z     
2025-01-22T20:11:26.3306780Z         Parameters
2025-01-22T20:11:26.3306820Z         ----------
2025-01-22T20:11:26.3306860Z         key : label
2025-01-22T20:11:26.3306900Z     
2025-01-22T20:11:26.3306950Z         Returns
2025-01-22T20:11:26.3306990Z         -------
2025-01-22T20:11:26.3307090Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3307140Z     
2025-01-22T20:11:26.3307180Z         Examples
2025-01-22T20:11:26.3307220Z         --------
2025-01-22T20:11:26.3307290Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3307350Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3307390Z         1
2025-01-22T20:11:26.3307430Z     
2025-01-22T20:11:26.3307510Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3307580Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3307620Z         slice(1, 3, None)
2025-01-22T20:11:26.3307660Z     
2025-01-22T20:11:26.3307740Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3307800Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3307870Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3307910Z         """
2025-01-22T20:11:26.3308030Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3308070Z         try:
2025-01-22T20:11:26.3308150Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3308150Z 
2025-01-22T20:11:26.3308350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3308430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3308540Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3308580Z     ???
2025-01-22T20:11:26.3308680Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3308720Z     ???
2025-01-22T20:11:26.3308930Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3308970Z     ???
2025-01-22T20:11:26.3309060Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3309060Z 
2025-01-22T20:11:26.3309100Z >   ???
2025-01-22T20:11:26.3309150Z E   KeyError: 'cups'
2025-01-22T20:11:26.3309150Z 
2025-01-22T20:11:26.3309250Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3309250Z 
2025-01-22T20:11:26.3309390Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3309390Z 
2025-01-22T20:11:26.3309560Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3309810Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3310300Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3310300Z 
2025-01-22T20:11:26.3310370Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3310410Z     def plasma(
2025-01-22T20:11:26.3310540Z         self,
2025-01-22T20:11:26.3310590Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3310630Z         config,
2025-01-22T20:11:26.3310740Z     ):
2025-01-22T20:11:26.3310820Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3310890Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3310890Z 
2025-01-22T20:11:26.3310980Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3311070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3311140Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3311200Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3311320Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3311390Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3311470Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3311520Z     return BasePlasma(
2025-01-22T20:11:26.3311580Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3311640Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3311710Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3311760Z     self.update(**kwargs)
2025-01-22T20:11:26.3311970Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3312060Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3312140Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3312210Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3312420Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3312540Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3312710Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3312770Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3312880Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3313070Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3313200Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3313350Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3313550Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3313690Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3313830Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3313910Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3314110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3314200Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3314400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3314460Z     return self.apply_standard()
2025-01-22T20:11:26.3314690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3314790Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3315040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3315130Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3315300Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3315360Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3315580Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3315640Z     return self._get_value(key)
2025-01-22T20:11:26.3315850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3315910Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3316000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3316390Z 
2025-01-22T20:11:26.3316550Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3316720Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3316770Z        't046000', 't048000'],
2025-01-22T20:11:26.3316820Z       dtype='object')
2025-01-22T20:11:26.3316860Z key = 'cups'
2025-01-22T20:11:26.3316870Z 
2025-01-22T20:11:26.3316920Z     def get_loc(self, key):
2025-01-22T20:11:26.3316960Z         """
2025-01-22T20:11:26.3317090Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3317130Z     
2025-01-22T20:11:26.3317170Z         Parameters
2025-01-22T20:11:26.3317220Z         ----------
2025-01-22T20:11:26.3317260Z         key : label
2025-01-22T20:11:26.3317300Z     
2025-01-22T20:11:26.3317350Z         Returns
2025-01-22T20:11:26.3317390Z         -------
2025-01-22T20:11:26.3317490Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3317530Z     
2025-01-22T20:11:26.3317580Z         Examples
2025-01-22T20:11:26.3317630Z         --------
2025-01-22T20:11:26.3317700Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3317750Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3317800Z         1
2025-01-22T20:11:26.3317840Z     
2025-01-22T20:11:26.3317910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3317980Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3318030Z         slice(1, 3, None)
2025-01-22T20:11:26.3318070Z     
2025-01-22T20:11:26.3318150Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3318220Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3318280Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3318520Z         """
2025-01-22T20:11:26.3318600Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3318640Z         try:
2025-01-22T20:11:26.3318720Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3322680Z         except KeyError as err:
2025-01-22T20:11:26.3322810Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3322880Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3322980Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3323020Z             ):
2025-01-22T20:11:26.3323090Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3323150Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3323200Z E           KeyError: 'cups'
2025-01-22T20:11:26.3323210Z 
2025-01-22T20:11:26.3323440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3323730Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] _
2025-01-22T20:11:26.3323740Z 
2025-01-22T20:11:26.3323870Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3324040Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3324090Z        't046000', 't048000'],
2025-01-22T20:11:26.3324140Z       dtype='object')
2025-01-22T20:11:26.3324180Z key = 'cups'
2025-01-22T20:11:26.3324180Z 
2025-01-22T20:11:26.3324230Z     def get_loc(self, key):
2025-01-22T20:11:26.3324280Z         """
2025-01-22T20:11:26.3324410Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3324450Z     
2025-01-22T20:11:26.3324490Z         Parameters
2025-01-22T20:11:26.3324540Z         ----------
2025-01-22T20:11:26.3324580Z         key : label
2025-01-22T20:11:26.3324620Z     
2025-01-22T20:11:26.3324660Z         Returns
2025-01-22T20:11:26.3324710Z         -------
2025-01-22T20:11:26.3324810Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3325060Z     
2025-01-22T20:11:26.3325110Z         Examples
2025-01-22T20:11:26.3325160Z         --------
2025-01-22T20:11:26.3325230Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3325280Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3325320Z         1
2025-01-22T20:11:26.3325360Z     
2025-01-22T20:11:26.3325440Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3325500Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3325550Z         slice(1, 3, None)
2025-01-22T20:11:26.3325600Z     
2025-01-22T20:11:26.3325680Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3325740Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3325810Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3325850Z         """
2025-01-22T20:11:26.3325920Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3325960Z         try:
2025-01-22T20:11:26.3326040Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3326040Z 
2025-01-22T20:11:26.3326240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3326330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3326430Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3326470Z     ???
2025-01-22T20:11:26.3326570Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3326610Z     ???
2025-01-22T20:11:26.3326830Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3326870Z     ???
2025-01-22T20:11:26.3326960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3326960Z 
2025-01-22T20:11:26.3327000Z >   ???
2025-01-22T20:11:26.3327120Z E   KeyError: 'cups'
2025-01-22T20:11:26.3327120Z 
2025-01-22T20:11:26.3327220Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3327220Z 
2025-01-22T20:11:26.3327360Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3327360Z 
2025-01-22T20:11:26.3327530Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3327790Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3328280Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3328280Z 
2025-01-22T20:11:26.3328340Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3328390Z     def plasma(
2025-01-22T20:11:26.3328440Z         self,
2025-01-22T20:11:26.3328490Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3328530Z         config,
2025-01-22T20:11:26.3328580Z     ):
2025-01-22T20:11:26.3328660Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3328730Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3328730Z 
2025-01-22T20:11:26.3328820Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3328910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3328980Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3329040Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3329160Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3329230Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3329310Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3329360Z     return BasePlasma(
2025-01-22T20:11:26.3329420Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3329480Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3329550Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3329650Z     self.update(**kwargs)
2025-01-22T20:11:26.3329720Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3329810Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3329900Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3329980Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3330170Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3330300Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3330460Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3330540Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3330630Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3330760Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3330900Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3331050Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3331250Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3331390Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3331540Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3331610Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3331820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3331910Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3332110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3332170Z     return self.apply_standard()
2025-01-22T20:11:26.3332440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3332540Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3332790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3332880Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3333050Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3333120Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3333330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3333380Z     return self._get_value(key)
2025-01-22T20:11:26.3333590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3333650Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3333740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3333750Z 
2025-01-22T20:11:26.3333880Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3334050Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3334100Z        't046000', 't048000'],
2025-01-22T20:11:26.3334150Z       dtype='object')
2025-01-22T20:11:26.3334200Z key = 'cups'
2025-01-22T20:11:26.3334200Z 
2025-01-22T20:11:26.3334260Z     def get_loc(self, key):
2025-01-22T20:11:26.3334300Z         """
2025-01-22T20:11:26.3334420Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3334460Z     
2025-01-22T20:11:26.3334510Z         Parameters
2025-01-22T20:11:26.3334550Z         ----------
2025-01-22T20:11:26.3334600Z         key : label
2025-01-22T20:11:26.3334640Z     
2025-01-22T20:11:26.3334680Z         Returns
2025-01-22T20:11:26.3334730Z         -------
2025-01-22T20:11:26.3334840Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3334930Z     
2025-01-22T20:11:26.3334980Z         Examples
2025-01-22T20:11:26.3335030Z         --------
2025-01-22T20:11:26.3335100Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3335160Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3335210Z         1
2025-01-22T20:11:26.3335250Z     
2025-01-22T20:11:26.3335330Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3335390Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3335440Z         slice(1, 3, None)
2025-01-22T20:11:26.3335480Z     
2025-01-22T20:11:26.3335560Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3335630Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3335690Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3335730Z         """
2025-01-22T20:11:26.3335810Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3335860Z         try:
2025-01-22T20:11:26.3335930Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3335990Z         except KeyError as err:
2025-01-22T20:11:26.3336050Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3336130Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3336220Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3336260Z             ):
2025-01-22T20:11:26.3336330Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3336390Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3336440Z E           KeyError: 'cups'
2025-01-22T20:11:26.3336450Z 
2025-01-22T20:11:26.3336660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3336910Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] _
2025-01-22T20:11:26.3336970Z 
2025-01-22T20:11:26.3337100Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3337270Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3337320Z        't046000', 't048000'],
2025-01-22T20:11:26.3337370Z       dtype='object')
2025-01-22T20:11:26.3337420Z key = 'cups'
2025-01-22T20:11:26.3337420Z 
2025-01-22T20:11:26.3337470Z     def get_loc(self, key):
2025-01-22T20:11:26.3337520Z         """
2025-01-22T20:11:26.3337640Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3337690Z     
2025-01-22T20:11:26.3337730Z         Parameters
2025-01-22T20:11:26.3337780Z         ----------
2025-01-22T20:11:26.3337820Z         key : label
2025-01-22T20:11:26.3337870Z     
2025-01-22T20:11:26.3337910Z         Returns
2025-01-22T20:11:26.3337950Z         -------
2025-01-22T20:11:26.3338050Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3338100Z     
2025-01-22T20:11:26.3338150Z         Examples
2025-01-22T20:11:26.3338200Z         --------
2025-01-22T20:11:26.3338270Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3338330Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3338370Z         1
2025-01-22T20:11:26.3338410Z     
2025-01-22T20:11:26.3338490Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3338550Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3338590Z         slice(1, 3, None)
2025-01-22T20:11:26.3338630Z     
2025-01-22T20:11:26.3338720Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3338780Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3338850Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3338890Z         """
2025-01-22T20:11:26.3338960Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3339000Z         try:
2025-01-22T20:11:26.3339080Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3339610Z 
2025-01-22T20:11:26.3339850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3339940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3340040Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3340080Z     ???
2025-01-22T20:11:26.3340180Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3340220Z     ???
2025-01-22T20:11:26.3340440Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3340480Z     ???
2025-01-22T20:11:26.3340570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3340570Z 
2025-01-22T20:11:26.3340610Z >   ???
2025-01-22T20:11:26.3340660Z E   KeyError: 'cups'
2025-01-22T20:11:26.3340670Z 
2025-01-22T20:11:26.3340760Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3340770Z 
2025-01-22T20:11:26.3340900Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3340900Z 
2025-01-22T20:11:26.3341070Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3341320Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3341810Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3341810Z 
2025-01-22T20:11:26.3341880Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3341920Z     def plasma(
2025-01-22T20:11:26.3341960Z         self,
2025-01-22T20:11:26.3342020Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3342380Z         config,
2025-01-22T20:11:26.3342420Z     ):
2025-01-22T20:11:26.3342510Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3342580Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3342580Z 
2025-01-22T20:11:26.3342680Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3342760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3342840Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3342890Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3343020Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3343090Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3343180Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3343220Z     return BasePlasma(
2025-01-22T20:11:26.3343290Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3343350Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3343410Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3343470Z     self.update(**kwargs)
2025-01-22T20:11:26.3343530Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3343630Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3343710Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3343780Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3343970Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3344090Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3344250Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3344320Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3344420Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3344550Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3344680Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3344820Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3345090Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3345230Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3345370Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3345450Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3345650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3345740Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3345930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3345990Z     return self.apply_standard()
2025-01-22T20:11:26.3346210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3346300Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3346550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3346640Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3346810Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3346870Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3347080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3347130Z     return self._get_value(key)
2025-01-22T20:11:26.3347340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3347400Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3347480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3347530Z 
2025-01-22T20:11:26.3347660Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3347840Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3347890Z        't046000', 't048000'],
2025-01-22T20:11:26.3347940Z       dtype='object')
2025-01-22T20:11:26.3347980Z key = 'cups'
2025-01-22T20:11:26.3347980Z 
2025-01-22T20:11:26.3348040Z     def get_loc(self, key):
2025-01-22T20:11:26.3348080Z         """
2025-01-22T20:11:26.3348200Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3348240Z     
2025-01-22T20:11:26.3348300Z         Parameters
2025-01-22T20:11:26.3348340Z         ----------
2025-01-22T20:11:26.3348390Z         key : label
2025-01-22T20:11:26.3348430Z     
2025-01-22T20:11:26.3348470Z         Returns
2025-01-22T20:11:26.3348510Z         -------
2025-01-22T20:11:26.3348620Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3348660Z     
2025-01-22T20:11:26.3348720Z         Examples
2025-01-22T20:11:26.3348770Z         --------
2025-01-22T20:11:26.3348840Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3348900Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3348940Z         1
2025-01-22T20:11:26.3348980Z     
2025-01-22T20:11:26.3349060Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3349120Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3349170Z         slice(1, 3, None)
2025-01-22T20:11:26.3349210Z     
2025-01-22T20:11:26.3349290Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3349360Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3349420Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3349470Z         """
2025-01-22T20:11:26.3349540Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3349580Z         try:
2025-01-22T20:11:26.3349650Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3349760Z         except KeyError as err:
2025-01-22T20:11:26.3349830Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3349910Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3350000Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3350050Z             ):
2025-01-22T20:11:26.3350120Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3350170Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3350230Z E           KeyError: 'cups'
2025-01-22T20:11:26.3350230Z 
2025-01-22T20:11:26.3350440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3350700Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] _
2025-01-22T20:11:26.3350710Z 
2025-01-22T20:11:26.3350870Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3351050Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3351100Z        't046000', 't048000'],
2025-01-22T20:11:26.3351150Z       dtype='object')
2025-01-22T20:11:26.3351190Z key = 'cups'
2025-01-22T20:11:26.3351190Z 
2025-01-22T20:11:26.3351250Z     def get_loc(self, key):
2025-01-22T20:11:26.3351300Z         """
2025-01-22T20:11:26.3351420Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3351460Z     
2025-01-22T20:11:26.3351510Z         Parameters
2025-01-22T20:11:26.3351550Z         ----------
2025-01-22T20:11:26.3351600Z         key : label
2025-01-22T20:11:26.3351640Z     
2025-01-22T20:11:26.3351680Z         Returns
2025-01-22T20:11:26.3351720Z         -------
2025-01-22T20:11:26.3351820Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3352110Z     
2025-01-22T20:11:26.3352160Z         Examples
2025-01-22T20:11:26.3352210Z         --------
2025-01-22T20:11:26.3352290Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3352340Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3352390Z         1
2025-01-22T20:11:26.3352430Z     
2025-01-22T20:11:26.3352500Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3352560Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3352620Z         slice(1, 3, None)
2025-01-22T20:11:26.3352660Z     
2025-01-22T20:11:26.3352740Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3352800Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3352870Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3352910Z         """
2025-01-22T20:11:26.3352980Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3353030Z         try:
2025-01-22T20:11:26.3353100Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3353110Z 
2025-01-22T20:11:26.3353300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3353390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3353510Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3353550Z     ???
2025-01-22T20:11:26.3353650Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3353690Z     ???
2025-01-22T20:11:26.3353900Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3353940Z     ???
2025-01-22T20:11:26.3354020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3354030Z 
2025-01-22T20:11:26.3354070Z >   ???
2025-01-22T20:11:26.3354120Z E   KeyError: 'cups'
2025-01-22T20:11:26.3354120Z 
2025-01-22T20:11:26.3354220Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3354230Z 
2025-01-22T20:11:26.3354360Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3354410Z 
2025-01-22T20:11:26.3354590Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3354850Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3355350Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3355350Z 
2025-01-22T20:11:26.3355410Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3355460Z     def plasma(
2025-01-22T20:11:26.3355500Z         self,
2025-01-22T20:11:26.3355550Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3355600Z         config,
2025-01-22T20:11:26.3355640Z     ):
2025-01-22T20:11:26.3355720Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3355790Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3355790Z 
2025-01-22T20:11:26.3355890Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3355970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3356050Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3356100Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3356230Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3356300Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3356380Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3356430Z     return BasePlasma(
2025-01-22T20:11:26.3356490Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3356550Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3356650Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3356710Z     self.update(**kwargs)
2025-01-22T20:11:26.3356770Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3356870Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3356950Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3357020Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3357220Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3357330Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3357500Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3357570Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3357660Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3357790Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3357930Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3358060Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3358270Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3358410Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3358550Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3358620Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3358820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3358910Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3359100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3359160Z     return self.apply_standard()
2025-01-22T20:11:26.3359380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3359480Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3360040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3360130Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3360300Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3360360Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3360580Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3360640Z     return self._get_value(key)
2025-01-22T20:11:26.3360850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3360900Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3360990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3361000Z 
2025-01-22T20:11:26.3361120Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3361290Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3361340Z        't046000', 't048000'],
2025-01-22T20:11:26.3361400Z       dtype='object')
2025-01-22T20:11:26.3361440Z key = 'cups'
2025-01-22T20:11:26.3361440Z 
2025-01-22T20:11:26.3361500Z     def get_loc(self, key):
2025-01-22T20:11:26.3361540Z         """
2025-01-22T20:11:26.3361660Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3361700Z     
2025-01-22T20:11:26.3361750Z         Parameters
2025-01-22T20:11:26.3361790Z         ----------
2025-01-22T20:11:26.3361840Z         key : label
2025-01-22T20:11:26.3361880Z     
2025-01-22T20:11:26.3361920Z         Returns
2025-01-22T20:11:26.3361960Z         -------
2025-01-22T20:11:26.3362060Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3362480Z     
2025-01-22T20:11:26.3362530Z         Examples
2025-01-22T20:11:26.3362590Z         --------
2025-01-22T20:11:26.3362660Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3362720Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3362770Z         1
2025-01-22T20:11:26.3362810Z     
2025-01-22T20:11:26.3362880Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3362950Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3363000Z         slice(1, 3, None)
2025-01-22T20:11:26.3363040Z     
2025-01-22T20:11:26.3363120Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3363190Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3363250Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3363300Z         """
2025-01-22T20:11:26.3363380Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3363420Z         try:
2025-01-22T20:11:26.3363500Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3363550Z         except KeyError as err:
2025-01-22T20:11:26.3363620Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3363700Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3363790Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3363830Z             ):
2025-01-22T20:11:26.3363900Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3363960Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3364010Z E           KeyError: 'cups'
2025-01-22T20:11:26.3364010Z 
2025-01-22T20:11:26.3364230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3364510Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-transition_probabilities] _
2025-01-22T20:11:26.3364520Z 
2025-01-22T20:11:26.3364650Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3364820Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3364960Z        't046000', 't048000'],
2025-01-22T20:11:26.3365000Z       dtype='object')
2025-01-22T20:11:26.3365050Z key = 'cups'
2025-01-22T20:11:26.3365050Z 
2025-01-22T20:11:26.3365110Z     def get_loc(self, key):
2025-01-22T20:11:26.3365150Z         """
2025-01-22T20:11:26.3365280Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3365320Z     
2025-01-22T20:11:26.3365370Z         Parameters
2025-01-22T20:11:26.3365410Z         ----------
2025-01-22T20:11:26.3365460Z         key : label
2025-01-22T20:11:26.3365500Z     
2025-01-22T20:11:26.3365540Z         Returns
2025-01-22T20:11:26.3365580Z         -------
2025-01-22T20:11:26.3365680Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3365730Z     
2025-01-22T20:11:26.3365780Z         Examples
2025-01-22T20:11:26.3365820Z         --------
2025-01-22T20:11:26.3365890Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3365950Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3366000Z         1
2025-01-22T20:11:26.3366040Z     
2025-01-22T20:11:26.3366110Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3366170Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3366230Z         slice(1, 3, None)
2025-01-22T20:11:26.3366270Z     
2025-01-22T20:11:26.3366350Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3366410Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3366480Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3366520Z         """
2025-01-22T20:11:26.3366590Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3366640Z         try:
2025-01-22T20:11:26.3366710Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3366750Z 
2025-01-22T20:11:26.3366960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3367050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3367150Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3367200Z     ???
2025-01-22T20:11:26.3367300Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3367340Z     ???
2025-01-22T20:11:26.3367560Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3367600Z     ???
2025-01-22T20:11:26.3367700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3367710Z 
2025-01-22T20:11:26.3367750Z >   ???
2025-01-22T20:11:26.3367800Z E   KeyError: 'cups'
2025-01-22T20:11:26.3367810Z 
2025-01-22T20:11:26.3367900Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3367910Z 
2025-01-22T20:11:26.3368040Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3368040Z 
2025-01-22T20:11:26.3368210Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3368470Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3368970Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3368970Z 
2025-01-22T20:11:26.3369030Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3369080Z     def plasma(
2025-01-22T20:11:26.3373110Z         self,
2025-01-22T20:11:26.3373220Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3373270Z         config,
2025-01-22T20:11:26.3373320Z     ):
2025-01-22T20:11:26.3373410Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3373470Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3373680Z 
2025-01-22T20:11:26.3373780Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3373870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3373940Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3374000Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3374130Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3374200Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3374280Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3374330Z     return BasePlasma(
2025-01-22T20:11:26.3374390Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3374450Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3374510Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3374570Z     self.update(**kwargs)
2025-01-22T20:11:26.3374630Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3374730Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3374810Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3374880Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3375080Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3375190Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3375360Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3375420Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3375520Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3375650Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3375790Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3376020Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3376230Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3376360Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3376510Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3376580Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3376780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3376880Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3377060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3377130Z     return self.apply_standard()
2025-01-22T20:11:26.3377350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3377440Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3377680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3377780Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3377950Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3378010Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3378220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3378280Z     return self._get_value(key)
2025-01-22T20:11:26.3378490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3378550Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3378640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3378640Z 
2025-01-22T20:11:26.3378770Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3379000Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3379050Z        't046000', 't048000'],
2025-01-22T20:11:26.3379100Z       dtype='object')
2025-01-22T20:11:26.3379150Z key = 'cups'
2025-01-22T20:11:26.3379150Z 
2025-01-22T20:11:26.3379200Z     def get_loc(self, key):
2025-01-22T20:11:26.3379240Z         """
2025-01-22T20:11:26.3379360Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3379410Z     
2025-01-22T20:11:26.3379450Z         Parameters
2025-01-22T20:11:26.3379500Z         ----------
2025-01-22T20:11:26.3379540Z         key : label
2025-01-22T20:11:26.3379580Z     
2025-01-22T20:11:26.3379630Z         Returns
2025-01-22T20:11:26.3379670Z         -------
2025-01-22T20:11:26.3379770Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3379810Z     
2025-01-22T20:11:26.3379850Z         Examples
2025-01-22T20:11:26.3379900Z         --------
2025-01-22T20:11:26.3379970Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3380030Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3380080Z         1
2025-01-22T20:11:26.3380120Z     
2025-01-22T20:11:26.3380200Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3380250Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3380300Z         slice(1, 3, None)
2025-01-22T20:11:26.3380340Z     
2025-01-22T20:11:26.3380420Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3380490Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3380550Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3380590Z         """
2025-01-22T20:11:26.3380660Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3380700Z         try:
2025-01-22T20:11:26.3380820Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3380880Z         except KeyError as err:
2025-01-22T20:11:26.3380950Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3381030Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3381120Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3381170Z             ):
2025-01-22T20:11:26.3381240Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3381300Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3381350Z E           KeyError: 'cups'
2025-01-22T20:11:26.3381350Z 
2025-01-22T20:11:26.3381570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3381820Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] _
2025-01-22T20:11:26.3381820Z 
2025-01-22T20:11:26.3381950Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3382120Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3382180Z        't046000', 't048000'],
2025-01-22T20:11:26.3382220Z       dtype='object')
2025-01-22T20:11:26.3382270Z key = 'cups'
2025-01-22T20:11:26.3382270Z 
2025-01-22T20:11:26.3382320Z     def get_loc(self, key):
2025-01-22T20:11:26.3382370Z         """
2025-01-22T20:11:26.3382500Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3382540Z     
2025-01-22T20:11:26.3382590Z         Parameters
2025-01-22T20:11:26.3382630Z         ----------
2025-01-22T20:11:26.3382680Z         key : label
2025-01-22T20:11:26.3382720Z     
2025-01-22T20:11:26.3382770Z         Returns
2025-01-22T20:11:26.3382810Z         -------
2025-01-22T20:11:26.3382910Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3382950Z     
2025-01-22T20:11:26.3383000Z         Examples
2025-01-22T20:11:26.3383040Z         --------
2025-01-22T20:11:26.3383110Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3383410Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3383450Z         1
2025-01-22T20:11:26.3383490Z     
2025-01-22T20:11:26.3383560Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3383620Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3383670Z         slice(1, 3, None)
2025-01-22T20:11:26.3383710Z     
2025-01-22T20:11:26.3383790Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3383860Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3383920Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3383970Z         """
2025-01-22T20:11:26.3384040Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3384080Z         try:
2025-01-22T20:11:26.3384150Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3384160Z 
2025-01-22T20:11:26.3384350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3384440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3384550Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3384590Z     ???
2025-01-22T20:11:26.3384690Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3384740Z     ???
2025-01-22T20:11:26.3384950Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3384990Z     ???
2025-01-22T20:11:26.3385070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3385080Z 
2025-01-22T20:11:26.3385120Z >   ???
2025-01-22T20:11:26.3385170Z E   KeyError: 'cups'
2025-01-22T20:11:26.3385170Z 
2025-01-22T20:11:26.3385270Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3385630Z 
2025-01-22T20:11:26.3385780Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3385780Z 
2025-01-22T20:11:26.3385960Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3386220Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3386720Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3386730Z 
2025-01-22T20:11:26.3386790Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3386840Z     def plasma(
2025-01-22T20:11:26.3386890Z         self,
2025-01-22T20:11:26.3386940Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3386980Z         config,
2025-01-22T20:11:26.3387030Z     ):
2025-01-22T20:11:26.3387110Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3387180Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3387190Z 
2025-01-22T20:11:26.3387280Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3387360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3387440Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3387500Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3387620Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3387690Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3387770Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3387820Z     return BasePlasma(
2025-01-22T20:11:26.3387880Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3387940Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3388000Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3388050Z     self.update(**kwargs)
2025-01-22T20:11:26.3388110Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3388200Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3388360Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3388430Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3388620Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3388740Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3388920Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3388980Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3389090Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3389220Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3389360Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3389500Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3389700Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3389850Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3389980Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3390060Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3390260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3390350Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3390540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3390610Z     return self.apply_standard()
2025-01-22T20:11:26.3390830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3390980Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3391230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3391320Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3391490Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3391550Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3391760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3391810Z     return self._get_value(key)
2025-01-22T20:11:26.3392180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3392240Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3392330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3392330Z 
2025-01-22T20:11:26.3392450Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3392620Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3392680Z        't046000', 't048000'],
2025-01-22T20:11:26.3392730Z       dtype='object')
2025-01-22T20:11:26.3392780Z key = 'cups'
2025-01-22T20:11:26.3392780Z 
2025-01-22T20:11:26.3392830Z     def get_loc(self, key):
2025-01-22T20:11:26.3392870Z         """
2025-01-22T20:11:26.3393000Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3393040Z     
2025-01-22T20:11:26.3393080Z         Parameters
2025-01-22T20:11:26.3393130Z         ----------
2025-01-22T20:11:26.3393170Z         key : label
2025-01-22T20:11:26.3393210Z     
2025-01-22T20:11:26.3393250Z         Returns
2025-01-22T20:11:26.3393300Z         -------
2025-01-22T20:11:26.3393400Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3393450Z     
2025-01-22T20:11:26.3393490Z         Examples
2025-01-22T20:11:26.3393540Z         --------
2025-01-22T20:11:26.3393610Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3393780Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3393820Z         1
2025-01-22T20:11:26.3393860Z     
2025-01-22T20:11:26.3393940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3394000Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3394060Z         slice(1, 3, None)
2025-01-22T20:11:26.3394100Z     
2025-01-22T20:11:26.3394180Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3394240Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3394310Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3394350Z         """
2025-01-22T20:11:26.3394420Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3394470Z         try:
2025-01-22T20:11:26.3394540Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3394600Z         except KeyError as err:
2025-01-22T20:11:26.3394670Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3394740Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3394840Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3394880Z             ):
2025-01-22T20:11:26.3394940Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3395000Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3395060Z E           KeyError: 'cups'
2025-01-22T20:11:26.3395060Z 
2025-01-22T20:11:26.3395270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3395540Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues_norm_factor] _
2025-01-22T20:11:26.3395550Z 
2025-01-22T20:11:26.3395670Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3395890Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3395940Z        't046000', 't048000'],
2025-01-22T20:11:26.3395990Z       dtype='object')
2025-01-22T20:11:26.3396030Z key = 'cups'
2025-01-22T20:11:26.3396040Z 
2025-01-22T20:11:26.3396090Z     def get_loc(self, key):
2025-01-22T20:11:26.3396130Z         """
2025-01-22T20:11:26.3396250Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3396290Z     
2025-01-22T20:11:26.3396340Z         Parameters
2025-01-22T20:11:26.3396380Z         ----------
2025-01-22T20:11:26.3396430Z         key : label
2025-01-22T20:11:26.3396470Z     
2025-01-22T20:11:26.3396510Z         Returns
2025-01-22T20:11:26.3396560Z         -------
2025-01-22T20:11:26.3396650Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3396700Z     
2025-01-22T20:11:26.3396740Z         Examples
2025-01-22T20:11:26.3396790Z         --------
2025-01-22T20:11:26.3396860Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3396920Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3396960Z         1
2025-01-22T20:11:26.3397000Z     
2025-01-22T20:11:26.3397070Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3397140Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3397190Z         slice(1, 3, None)
2025-01-22T20:11:26.3397230Z     
2025-01-22T20:11:26.3397310Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3397370Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3397440Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3397480Z         """
2025-01-22T20:11:26.3397550Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3397590Z         try:
2025-01-22T20:11:26.3397660Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3397660Z 
2025-01-22T20:11:26.3397860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3397950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3398100Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3398140Z     ???
2025-01-22T20:11:26.3398240Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3398290Z     ???
2025-01-22T20:11:26.3398500Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3398540Z     ???
2025-01-22T20:11:26.3398620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3398630Z 
2025-01-22T20:11:26.3398670Z >   ???
2025-01-22T20:11:26.3398720Z E   KeyError: 'cups'
2025-01-22T20:11:26.3398720Z 
2025-01-22T20:11:26.3398810Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3398810Z 
2025-01-22T20:11:26.3398950Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3398950Z 
2025-01-22T20:11:26.3399120Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3399370Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3399850Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3399860Z 
2025-01-22T20:11:26.3399930Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3399980Z     def plasma(
2025-01-22T20:11:26.3400020Z         self,
2025-01-22T20:11:26.3400080Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3400120Z         config,
2025-01-22T20:11:26.3400170Z     ):
2025-01-22T20:11:26.3400250Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3400360Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3400370Z 
2025-01-22T20:11:26.3400460Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3400550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3400630Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3400690Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3400810Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3400880Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3400960Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3401010Z     return BasePlasma(
2025-01-22T20:11:26.3401070Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3401130Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3401200Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3401250Z     self.update(**kwargs)
2025-01-22T20:11:26.3401320Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3401410Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3401490Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3401560Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3401760Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3401880Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3402050Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3402120Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3402220Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3402360Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3402490Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3402640Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3402840Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3403410Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3403550Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3403630Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3403840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3403930Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3404120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3404180Z     return self.apply_standard()
2025-01-22T20:11:26.3404410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3404500Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3404750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3404840Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3405010Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3405070Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3405280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3405340Z     return self._get_value(key)
2025-01-22T20:11:26.3405550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3405620Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3405710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3405710Z 
2025-01-22T20:11:26.3405840Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3406360Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3406420Z        't046000', 't048000'],
2025-01-22T20:11:26.3406460Z       dtype='object')
2025-01-22T20:11:26.3406510Z key = 'cups'
2025-01-22T20:11:26.3406510Z 
2025-01-22T20:11:26.3406560Z     def get_loc(self, key):
2025-01-22T20:11:26.3406600Z         """
2025-01-22T20:11:26.3406730Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3406780Z     
2025-01-22T20:11:26.3406820Z         Parameters
2025-01-22T20:11:26.3406870Z         ----------
2025-01-22T20:11:26.3406910Z         key : label
2025-01-22T20:11:26.3406950Z     
2025-01-22T20:11:26.3406990Z         Returns
2025-01-22T20:11:26.3407040Z         -------
2025-01-22T20:11:26.3407140Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3407180Z     
2025-01-22T20:11:26.3407220Z         Examples
2025-01-22T20:11:26.3407270Z         --------
2025-01-22T20:11:26.3407340Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3407400Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3407450Z         1
2025-01-22T20:11:26.3407490Z     
2025-01-22T20:11:26.3407560Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3407630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3407680Z         slice(1, 3, None)
2025-01-22T20:11:26.3407710Z     
2025-01-22T20:11:26.3407800Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3407860Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3407920Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3407970Z         """
2025-01-22T20:11:26.3408040Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3408090Z         try:
2025-01-22T20:11:26.3408170Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3408230Z         except KeyError as err:
2025-01-22T20:11:26.3408300Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3408370Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3408540Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3408590Z             ):
2025-01-22T20:11:26.3408660Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3408720Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3408770Z E           KeyError: 'cups'
2025-01-22T20:11:26.3408770Z 
2025-01-22T20:11:26.3408980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3409250Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blue_estimator] _
2025-01-22T20:11:26.3409250Z 
2025-01-22T20:11:26.3409370Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3409550Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3409600Z        't046000', 't048000'],
2025-01-22T20:11:26.3409650Z       dtype='object')
2025-01-22T20:11:26.3409690Z key = 'cups'
2025-01-22T20:11:26.3409690Z 
2025-01-22T20:11:26.3409750Z     def get_loc(self, key):
2025-01-22T20:11:26.3409790Z         """
2025-01-22T20:11:26.3409910Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3409950Z     
2025-01-22T20:11:26.3410000Z         Parameters
2025-01-22T20:11:26.3410040Z         ----------
2025-01-22T20:11:26.3410080Z         key : label
2025-01-22T20:11:26.3410130Z     
2025-01-22T20:11:26.3410170Z         Returns
2025-01-22T20:11:26.3410210Z         -------
2025-01-22T20:11:26.3410310Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3410350Z     
2025-01-22T20:11:26.3410390Z         Examples
2025-01-22T20:11:26.3410440Z         --------
2025-01-22T20:11:26.3410550Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3410620Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3410660Z         1
2025-01-22T20:11:26.3410700Z     
2025-01-22T20:11:26.3410780Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3410840Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3410890Z         slice(1, 3, None)
2025-01-22T20:11:26.3410930Z     
2025-01-22T20:11:26.3411010Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3411070Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3411130Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3411180Z         """
2025-01-22T20:11:26.3411250Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3411290Z         try:
2025-01-22T20:11:26.3411360Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3411360Z 
2025-01-22T20:11:26.3411550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3411650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3411750Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3411800Z     ???
2025-01-22T20:11:26.3411900Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3411940Z     ???
2025-01-22T20:11:26.3412160Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3412200Z     ???
2025-01-22T20:11:26.3412290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3412290Z 
2025-01-22T20:11:26.3412330Z >   ???
2025-01-22T20:11:26.3412380Z E   KeyError: 'cups'
2025-01-22T20:11:26.3412380Z 
2025-01-22T20:11:26.3412480Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3412480Z 
2025-01-22T20:11:26.3412610Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3412620Z 
2025-01-22T20:11:26.3412780Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3413090Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3413580Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3413590Z 
2025-01-22T20:11:26.3413640Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3413690Z     def plasma(
2025-01-22T20:11:26.3413730Z         self,
2025-01-22T20:11:26.3413790Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3413830Z         config,
2025-01-22T20:11:26.3413870Z     ):
2025-01-22T20:11:26.3413950Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3414030Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3414030Z 
2025-01-22T20:11:26.3414120Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3414210Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3414290Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3414340Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3414480Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3414550Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3414630Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3414680Z     return BasePlasma(
2025-01-22T20:11:26.3414740Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3414800Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3414870Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3414920Z     self.update(**kwargs)
2025-01-22T20:11:26.3414980Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3415110Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3415200Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3415270Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3415470Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3415580Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3415750Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3415820Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3415920Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3416050Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3416180Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3416330Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3416540Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3416680Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3416820Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3416900Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3417110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3417200Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3417390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3417450Z     return self.apply_standard()
2025-01-22T20:11:26.3417670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3417760Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3418010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3418150Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3418320Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3418390Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3418600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3418660Z     return self._get_value(key)
2025-01-22T20:11:26.3418860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3418920Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3419010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3419010Z 
2025-01-22T20:11:26.3419140Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3419310Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3419370Z        't046000', 't048000'],
2025-01-22T20:11:26.3419410Z       dtype='object')
2025-01-22T20:11:26.3419460Z key = 'cups'
2025-01-22T20:11:26.3419460Z 
2025-01-22T20:11:26.3419520Z     def get_loc(self, key):
2025-01-22T20:11:26.3419560Z         """
2025-01-22T20:11:26.3419690Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3419730Z     
2025-01-22T20:11:26.3419770Z         Parameters
2025-01-22T20:11:26.3419810Z         ----------
2025-01-22T20:11:26.3419860Z         key : label
2025-01-22T20:11:26.3419900Z     
2025-01-22T20:11:26.3424120Z         Returns
2025-01-22T20:11:26.3424220Z         -------
2025-01-22T20:11:26.3424320Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3424370Z     
2025-01-22T20:11:26.3424410Z         Examples
2025-01-22T20:11:26.3424680Z         --------
2025-01-22T20:11:26.3424750Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3424810Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3424860Z         1
2025-01-22T20:11:26.3424900Z     
2025-01-22T20:11:26.3424980Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3425050Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3425100Z         slice(1, 3, None)
2025-01-22T20:11:26.3425140Z     
2025-01-22T20:11:26.3425220Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3425280Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3425350Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3425390Z         """
2025-01-22T20:11:26.3425470Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3425520Z         try:
2025-01-22T20:11:26.3425590Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3425640Z         except KeyError as err:
2025-01-22T20:11:26.3425710Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3425790Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3425890Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3425930Z             ):
2025-01-22T20:11:26.3426000Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3426050Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3426110Z E           KeyError: 'cups'
2025-01-22T20:11:26.3426110Z 
2025-01-22T20:11:26.3426320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3426570Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-volume] _
2025-01-22T20:11:26.3426580Z 
2025-01-22T20:11:26.3426700Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3426870Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3426920Z        't046000', 't048000'],
2025-01-22T20:11:26.3427400Z       dtype='object')
2025-01-22T20:11:26.3427450Z key = 'cups'
2025-01-22T20:11:26.3427450Z 
2025-01-22T20:11:26.3427500Z     def get_loc(self, key):
2025-01-22T20:11:26.3427550Z         """
2025-01-22T20:11:26.3427670Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3427710Z     
2025-01-22T20:11:26.3427750Z         Parameters
2025-01-22T20:11:26.3427800Z         ----------
2025-01-22T20:11:26.3427840Z         key : label
2025-01-22T20:11:26.3427880Z     
2025-01-22T20:11:26.3427920Z         Returns
2025-01-22T20:11:26.3427970Z         -------
2025-01-22T20:11:26.3428060Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3428110Z     
2025-01-22T20:11:26.3428150Z         Examples
2025-01-22T20:11:26.3428190Z         --------
2025-01-22T20:11:26.3428260Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3428320Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3428370Z         1
2025-01-22T20:11:26.3428410Z     
2025-01-22T20:11:26.3428490Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3428550Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3428600Z         slice(1, 3, None)
2025-01-22T20:11:26.3428640Z     
2025-01-22T20:11:26.3428720Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3428780Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3428850Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3428890Z         """
2025-01-22T20:11:26.3428960Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3429000Z         try:
2025-01-22T20:11:26.3429080Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3429080Z 
2025-01-22T20:11:26.3429270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3429650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3429770Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3429810Z     ???
2025-01-22T20:11:26.3429910Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3429950Z     ???
2025-01-22T20:11:26.3430160Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3430200Z     ???
2025-01-22T20:11:26.3430290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3430300Z 
2025-01-22T20:11:26.3430340Z >   ???
2025-01-22T20:11:26.3430390Z E   KeyError: 'cups'
2025-01-22T20:11:26.3430390Z 
2025-01-22T20:11:26.3430480Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3430490Z 
2025-01-22T20:11:26.3430620Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3430620Z 
2025-01-22T20:11:26.3430790Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3431050Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3431540Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3431540Z 
2025-01-22T20:11:26.3431600Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3431650Z     def plasma(
2025-01-22T20:11:26.3431690Z         self,
2025-01-22T20:11:26.3431740Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3431790Z         config,
2025-01-22T20:11:26.3431830Z     ):
2025-01-22T20:11:26.3431910Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3431970Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3431980Z 
2025-01-22T20:11:26.3432210Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3432300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3432440Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3432500Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3432630Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3432700Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3432780Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3432830Z     return BasePlasma(
2025-01-22T20:11:26.3432890Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3432960Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3433020Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3433080Z     self.update(**kwargs)
2025-01-22T20:11:26.3433140Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3433240Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3433320Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3433400Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3433600Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3433720Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3433880Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3433950Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3434050Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3434180Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3434310Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3434450Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3434660Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3434850Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3435000Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3435070Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3435280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3435370Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3435570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3435620Z     return self.apply_standard()
2025-01-22T20:11:26.3435850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3435940Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3436190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3436280Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3436450Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3436520Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3436730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3436790Z     return self._get_value(key)
2025-01-22T20:11:26.3437000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3437060Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3437150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3437160Z 
2025-01-22T20:11:26.3437280Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3437450Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3437510Z        't046000', 't048000'],
2025-01-22T20:11:26.3437610Z       dtype='object')
2025-01-22T20:11:26.3437660Z key = 'cups'
2025-01-22T20:11:26.3437660Z 
2025-01-22T20:11:26.3437720Z     def get_loc(self, key):
2025-01-22T20:11:26.3437760Z         """
2025-01-22T20:11:26.3437890Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3437930Z     
2025-01-22T20:11:26.3437970Z         Parameters
2025-01-22T20:11:26.3438020Z         ----------
2025-01-22T20:11:26.3438060Z         key : label
2025-01-22T20:11:26.3438100Z     
2025-01-22T20:11:26.3438140Z         Returns
2025-01-22T20:11:26.3438190Z         -------
2025-01-22T20:11:26.3438290Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3438330Z     
2025-01-22T20:11:26.3438380Z         Examples
2025-01-22T20:11:26.3438420Z         --------
2025-01-22T20:11:26.3438490Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3438550Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3438600Z         1
2025-01-22T20:11:26.3438640Z     
2025-01-22T20:11:26.3438720Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3438780Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3438830Z         slice(1, 3, None)
2025-01-22T20:11:26.3438880Z     
2025-01-22T20:11:26.3438960Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3439020Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3439080Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3439130Z         """
2025-01-22T20:11:26.3439200Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3439250Z         try:
2025-01-22T20:11:26.3439320Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3439370Z         except KeyError as err:
2025-01-22T20:11:26.3439450Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3439570Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3439660Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3439710Z             ):
2025-01-22T20:11:26.3439780Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3439840Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3439890Z E           KeyError: 'cups'
2025-01-22T20:11:26.3439890Z 
2025-01-22T20:11:26.3440100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3440350Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-r_inner] _
2025-01-22T20:11:26.3440350Z 
2025-01-22T20:11:26.3440480Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3440640Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3440700Z        't046000', 't048000'],
2025-01-22T20:11:26.3440750Z       dtype='object')
2025-01-22T20:11:26.3440790Z key = 'cups'
2025-01-22T20:11:26.3440800Z 
2025-01-22T20:11:26.3440850Z     def get_loc(self, key):
2025-01-22T20:11:26.3440900Z         """
2025-01-22T20:11:26.3441020Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3441070Z     
2025-01-22T20:11:26.3441110Z         Parameters
2025-01-22T20:11:26.3441160Z         ----------
2025-01-22T20:11:26.3441210Z         key : label
2025-01-22T20:11:26.3441250Z     
2025-01-22T20:11:26.3441290Z         Returns
2025-01-22T20:11:26.3441340Z         -------
2025-01-22T20:11:26.3441440Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3441480Z     
2025-01-22T20:11:26.3441530Z         Examples
2025-01-22T20:11:26.3441570Z         --------
2025-01-22T20:11:26.3441640Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3441700Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3441750Z         1
2025-01-22T20:11:26.3441790Z     
2025-01-22T20:11:26.3441870Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3441970Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3442020Z         slice(1, 3, None)
2025-01-22T20:11:26.3442060Z     
2025-01-22T20:11:26.3442140Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3442200Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3442270Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3442310Z         """
2025-01-22T20:11:26.3442380Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3442420Z         try:
2025-01-22T20:11:26.3442490Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3442500Z 
2025-01-22T20:11:26.3442690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3442780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3442890Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3442940Z     ???
2025-01-22T20:11:26.3443040Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3443080Z     ???
2025-01-22T20:11:26.3443300Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3443340Z     ???
2025-01-22T20:11:26.3443430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3443430Z 
2025-01-22T20:11:26.3443470Z >   ???
2025-01-22T20:11:26.3443520Z E   KeyError: 'cups'
2025-01-22T20:11:26.3443520Z 
2025-01-22T20:11:26.3443620Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3443620Z 
2025-01-22T20:11:26.3443750Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3443750Z 
2025-01-22T20:11:26.3443920Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3444210Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3444700Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3444710Z 
2025-01-22T20:11:26.3444770Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3444810Z     def plasma(
2025-01-22T20:11:26.3444860Z         self,
2025-01-22T20:11:26.3444910Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3444950Z         config,
2025-01-22T20:11:26.3444990Z     ):
2025-01-22T20:11:26.3445070Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3445140Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3445140Z 
2025-01-22T20:11:26.3445230Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3445320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3445400Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3445460Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3445580Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3445650Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3445730Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3445780Z     return BasePlasma(
2025-01-22T20:11:26.3445840Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3445900Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3445960Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3446010Z     self.update(**kwargs)
2025-01-22T20:11:26.3446070Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3446160Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3446250Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3446320Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3446900Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3447020Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3447190Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3447260Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3447360Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3447490Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3447630Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3447760Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3447960Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3448110Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3448250Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3448330Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3448530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3448620Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3448820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3448880Z     return self.apply_standard()
2025-01-22T20:11:26.3449100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3449190Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3449430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3449870Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3450040Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3450110Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3450320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3450370Z     return self._get_value(key)
2025-01-22T20:11:26.3450580Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3450650Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3450740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3450740Z 
2025-01-22T20:11:26.3450930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3451100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3451160Z        't046000', 't048000'],
2025-01-22T20:11:26.3451210Z       dtype='object')
2025-01-22T20:11:26.3451250Z key = 'cups'
2025-01-22T20:11:26.3451260Z 
2025-01-22T20:11:26.3451310Z     def get_loc(self, key):
2025-01-22T20:11:26.3451350Z         """
2025-01-22T20:11:26.3451480Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3451520Z     
2025-01-22T20:11:26.3451560Z         Parameters
2025-01-22T20:11:26.3451610Z         ----------
2025-01-22T20:11:26.3451650Z         key : label
2025-01-22T20:11:26.3451690Z     
2025-01-22T20:11:26.3451730Z         Returns
2025-01-22T20:11:26.3451780Z         -------
2025-01-22T20:11:26.3451880Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3451920Z     
2025-01-22T20:11:26.3451960Z         Examples
2025-01-22T20:11:26.3452010Z         --------
2025-01-22T20:11:26.3452080Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3452140Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3452180Z         1
2025-01-22T20:11:26.3452230Z     
2025-01-22T20:11:26.3452390Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3452460Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3452500Z         slice(1, 3, None)
2025-01-22T20:11:26.3452550Z     
2025-01-22T20:11:26.3452630Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3452690Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3452760Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3452800Z         """
2025-01-22T20:11:26.3452870Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3452910Z         try:
2025-01-22T20:11:26.3452990Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3453040Z         except KeyError as err:
2025-01-22T20:11:26.3453110Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3453190Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3453280Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3453330Z             ):
2025-01-22T20:11:26.3453400Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3453460Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3453510Z E           KeyError: 'cups'
2025-01-22T20:11:26.3453520Z 
2025-01-22T20:11:26.3453730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3454000Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population] _
2025-01-22T20:11:26.3454000Z 
2025-01-22T20:11:26.3454130Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3454290Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3454400Z        't046000', 't048000'],
2025-01-22T20:11:26.3454450Z       dtype='object')
2025-01-22T20:11:26.3454500Z key = 'cups'
2025-01-22T20:11:26.3454500Z 
2025-01-22T20:11:26.3454560Z     def get_loc(self, key):
2025-01-22T20:11:26.3454600Z         """
2025-01-22T20:11:26.3454730Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3454770Z     
2025-01-22T20:11:26.3454820Z         Parameters
2025-01-22T20:11:26.3454870Z         ----------
2025-01-22T20:11:26.3454920Z         key : label
2025-01-22T20:11:26.3454960Z     
2025-01-22T20:11:26.3455000Z         Returns
2025-01-22T20:11:26.3455040Z         -------
2025-01-22T20:11:26.3455150Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3455180Z     
2025-01-22T20:11:26.3455240Z         Examples
2025-01-22T20:11:26.3455280Z         --------
2025-01-22T20:11:26.3455350Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3455400Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3455450Z         1
2025-01-22T20:11:26.3455490Z     
2025-01-22T20:11:26.3455570Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3455630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3455680Z         slice(1, 3, None)
2025-01-22T20:11:26.3455730Z     
2025-01-22T20:11:26.3455810Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3455880Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3455940Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3455990Z         """
2025-01-22T20:11:26.3456060Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3456100Z         try:
2025-01-22T20:11:26.3456170Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3456180Z 
2025-01-22T20:11:26.3456370Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3456460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3456570Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3456660Z     ???
2025-01-22T20:11:26.3456770Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3456810Z     ???
2025-01-22T20:11:26.3457030Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3457070Z     ???
2025-01-22T20:11:26.3457150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3457150Z 
2025-01-22T20:11:26.3457200Z >   ???
2025-01-22T20:11:26.3457240Z E   KeyError: 'cups'
2025-01-22T20:11:26.3457250Z 
2025-01-22T20:11:26.3457340Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3457340Z 
2025-01-22T20:11:26.3457470Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3457470Z 
2025-01-22T20:11:26.3457640Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3457900Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3458400Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3458400Z 
2025-01-22T20:11:26.3458470Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3458510Z     def plasma(
2025-01-22T20:11:26.3458560Z         self,
2025-01-22T20:11:26.3458610Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3458660Z         config,
2025-01-22T20:11:26.3458700Z     ):
2025-01-22T20:11:26.3458780Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3458850Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3458850Z 
2025-01-22T20:11:26.3458940Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3459070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3459150Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3459210Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3459340Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3459410Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3459490Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3459540Z     return BasePlasma(
2025-01-22T20:11:26.3459600Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3459660Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3459720Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3459770Z     self.update(**kwargs)
2025-01-22T20:11:26.3459830Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3459920Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3460000Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3460080Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3460280Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3460400Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3460570Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3460630Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3460730Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3460860Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3460990Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3461130Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3461340Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3461470Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3461610Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3461740Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3461940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3462040Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3462230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3462290Z     return self.apply_standard()
2025-01-22T20:11:26.3462510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3462600Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3462850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3462940Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3463110Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3463170Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3463390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3463440Z     return self._get_value(key)
2025-01-22T20:11:26.3463650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3463710Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3463800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3463800Z 
2025-01-22T20:11:26.3463930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3464100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3464190Z        't046000', 't048000'],
2025-01-22T20:11:26.3464240Z       dtype='object')
2025-01-22T20:11:26.3464290Z key = 'cups'
2025-01-22T20:11:26.3464290Z 
2025-01-22T20:11:26.3464340Z     def get_loc(self, key):
2025-01-22T20:11:26.3464390Z         """
2025-01-22T20:11:26.3464510Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3464560Z     
2025-01-22T20:11:26.3464610Z         Parameters
2025-01-22T20:11:26.3464650Z         ----------
2025-01-22T20:11:26.3464690Z         key : label
2025-01-22T20:11:26.3464740Z     
2025-01-22T20:11:26.3464780Z         Returns
2025-01-22T20:11:26.3464820Z         -------
2025-01-22T20:11:26.3464920Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3464960Z     
2025-01-22T20:11:26.3465010Z         Examples
2025-01-22T20:11:26.3465050Z         --------
2025-01-22T20:11:26.3465120Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3465180Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3465220Z         1
2025-01-22T20:11:26.3465260Z     
2025-01-22T20:11:26.3465340Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3465400Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3465460Z         slice(1, 3, None)
2025-01-22T20:11:26.3465500Z     
2025-01-22T20:11:26.3465580Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3465640Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3465710Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3465750Z         """
2025-01-22T20:11:26.3465820Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3465870Z         try:
2025-01-22T20:11:26.3465940Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3466000Z         except KeyError as err:
2025-01-22T20:11:26.3466070Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3466140Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3466240Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3466290Z             ):
2025-01-22T20:11:26.3466710Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3466770Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3466820Z E           KeyError: 'cups'
2025-01-22T20:11:26.3466820Z 
2025-01-22T20:11:26.3467040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3467320Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population_updated] _
2025-01-22T20:11:26.3467330Z 
2025-01-22T20:11:26.3467460Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3467620Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3467670Z        't046000', 't048000'],
2025-01-22T20:11:26.3467720Z       dtype='object')
2025-01-22T20:11:26.3467780Z key = 'cups'
2025-01-22T20:11:26.3467780Z 
2025-01-22T20:11:26.3467840Z     def get_loc(self, key):
2025-01-22T20:11:26.3467880Z         """
2025-01-22T20:11:26.3468000Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3468050Z     
2025-01-22T20:11:26.3468090Z         Parameters
2025-01-22T20:11:26.3468140Z         ----------
2025-01-22T20:11:26.3468180Z         key : label
2025-01-22T20:11:26.3468220Z     
2025-01-22T20:11:26.3468270Z         Returns
2025-01-22T20:11:26.3468310Z         -------
2025-01-22T20:11:26.3468820Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3468870Z     
2025-01-22T20:11:26.3468920Z         Examples
2025-01-22T20:11:26.3469020Z         --------
2025-01-22T20:11:26.3469090Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3469150Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3469190Z         1
2025-01-22T20:11:26.3469800Z     
2025-01-22T20:11:26.3469880Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3469950Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3470000Z         slice(1, 3, None)
2025-01-22T20:11:26.3470040Z     
2025-01-22T20:11:26.3470120Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3470190Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3470250Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3470290Z         """
2025-01-22T20:11:26.3474110Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3474220Z         try:
2025-01-22T20:11:26.3474290Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3474300Z 
2025-01-22T20:11:26.3474500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3474590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3474700Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3474750Z     ???
2025-01-22T20:11:26.3474850Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3474900Z     ???
2025-01-22T20:11:26.3475120Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3475170Z     ???
2025-01-22T20:11:26.3475250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3475260Z 
2025-01-22T20:11:26.3475300Z >   ???
2025-01-22T20:11:26.3475350Z E   KeyError: 'cups'
2025-01-22T20:11:26.3475350Z 
2025-01-22T20:11:26.3475460Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3475470Z 
2025-01-22T20:11:26.3475620Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3475620Z 
2025-01-22T20:11:26.3475800Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3476100Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3476770Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3476770Z 
2025-01-22T20:11:26.3476840Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3476890Z     def plasma(
2025-01-22T20:11:26.3476930Z         self,
2025-01-22T20:11:26.3476990Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3477030Z         config,
2025-01-22T20:11:26.3477070Z     ):
2025-01-22T20:11:26.3477160Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3477240Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3477240Z 
2025-01-22T20:11:26.3477330Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3477430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3477510Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3477570Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3477700Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3477770Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3477850Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3477910Z     return BasePlasma(
2025-01-22T20:11:26.3477970Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3478030Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3478100Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3478150Z     self.update(**kwargs)
2025-01-22T20:11:26.3478220Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3478310Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3478400Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3478560Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3478750Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3478880Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3479040Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3479110Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3479210Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3479420Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3479590Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3479760Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3479980Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3480130Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3480290Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3480380Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3480610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3480710Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3480920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3481000Z     return self.apply_standard()
2025-01-22T20:11:26.3481250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3481340Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3481610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3481710Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3481910Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3482060Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3482300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3482360Z     return self._get_value(key)
2025-01-22T20:11:26.3482590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3482670Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3482770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3482780Z 
2025-01-22T20:11:26.3482910Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3483090Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3483140Z        't046000', 't048000'],
2025-01-22T20:11:26.3483200Z       dtype='object')
2025-01-22T20:11:26.3483250Z key = 'cups'
2025-01-22T20:11:26.3483250Z 
2025-01-22T20:11:26.3483310Z     def get_loc(self, key):
2025-01-22T20:11:26.3483350Z         """
2025-01-22T20:11:26.3483480Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3483540Z     
2025-01-22T20:11:26.3483580Z         Parameters
2025-01-22T20:11:26.3483630Z         ----------
2025-01-22T20:11:26.3483670Z         key : label
2025-01-22T20:11:26.3483730Z     
2025-01-22T20:11:26.3483780Z         Returns
2025-01-22T20:11:26.3483820Z         -------
2025-01-22T20:11:26.3483930Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3483980Z     
2025-01-22T20:11:26.3484040Z         Examples
2025-01-22T20:11:26.3484090Z         --------
2025-01-22T20:11:26.3484190Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3484260Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3484440Z         1
2025-01-22T20:11:26.3484500Z     
2025-01-22T20:11:26.3484580Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3484660Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3484740Z         slice(1, 3, None)
2025-01-22T20:11:26.3484780Z     
2025-01-22T20:11:26.3484880Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3484950Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3485020Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3485060Z         """
2025-01-22T20:11:26.3485130Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3485180Z         try:
2025-01-22T20:11:26.3485260Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3485330Z         except KeyError as err:
2025-01-22T20:11:26.3485410Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3485480Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3485580Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3485630Z             ):
2025-01-22T20:11:26.3485690Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3485770Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3485830Z E           KeyError: 'cups'
2025-01-22T20:11:26.3485840Z 
2025-01-22T20:11:26.3486070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3486300Z _ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:26.3486310Z 
2025-01-22T20:11:26.3486430Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3486620Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3486680Z        't046000', 't048000'],
2025-01-22T20:11:26.3486740Z       dtype='object')
2025-01-22T20:11:26.3486790Z key = 'cups'
2025-01-22T20:11:26.3486800Z 
2025-01-22T20:11:26.3486850Z     def get_loc(self, key):
2025-01-22T20:11:26.3486890Z         """
2025-01-22T20:11:26.3487120Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3487190Z     
2025-01-22T20:11:26.3487250Z         Parameters
2025-01-22T20:11:26.3487320Z         ----------
2025-01-22T20:11:26.3487370Z         key : label
2025-01-22T20:11:26.3487430Z     
2025-01-22T20:11:26.3487480Z         Returns
2025-01-22T20:11:26.3487540Z         -------
2025-01-22T20:11:26.3487660Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3487720Z     
2025-01-22T20:11:26.3487770Z         Examples
2025-01-22T20:11:26.3487830Z         --------
2025-01-22T20:11:26.3487910Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3487980Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3488020Z         1
2025-01-22T20:11:26.3488070Z     
2025-01-22T20:11:26.3488170Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3488240Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3488310Z         slice(1, 3, None)
2025-01-22T20:11:26.3488360Z     
2025-01-22T20:11:26.3488450Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3488540Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3488610Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3488680Z         """
2025-01-22T20:11:26.3488760Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3488800Z         try:
2025-01-22T20:11:26.3488890Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3488900Z 
2025-01-22T20:11:26.3489120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3489220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3489320Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3489430Z     ???
2025-01-22T20:11:26.3489540Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3489590Z     ???
2025-01-22T20:11:26.3489800Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3489850Z     ???
2025-01-22T20:11:26.3489930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3489930Z 
2025-01-22T20:11:26.3489970Z >   ???
2025-01-22T20:11:26.3490020Z E   KeyError: 'cups'
2025-01-22T20:11:26.3490020Z 
2025-01-22T20:11:26.3490120Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3490120Z 
2025-01-22T20:11:26.3490250Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3490260Z 
2025-01-22T20:11:26.3490430Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3490690Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3491190Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3491200Z 
2025-01-22T20:11:26.3491260Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3491310Z     def plasma(
2025-01-22T20:11:26.3491360Z         self,
2025-01-22T20:11:26.3491410Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3491450Z         config,
2025-01-22T20:11:26.3491500Z     ):
2025-01-22T20:11:26.3491580Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3491650Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3491660Z 
2025-01-22T20:11:26.3491750Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3491840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3491920Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3491980Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3492380Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3492460Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3492540Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3492600Z     return BasePlasma(
2025-01-22T20:11:26.3492670Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3492730Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3492790Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3492850Z     self.update(**kwargs)
2025-01-22T20:11:26.3492910Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3493000Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3493080Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3493170Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3493400Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3493530Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3493700Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3493780Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3494240Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3494390Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3494530Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3494670Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3494880Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3495020Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3495180Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3495570Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3495780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3495870Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3496070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3496130Z     return self.apply_standard()
2025-01-22T20:11:26.3496350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3496440Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3496680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3496770Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3496940Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3497010Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3497240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3497310Z     return self._get_value(key)
2025-01-22T20:11:26.3497530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3497610Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3497690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3497690Z 
2025-01-22T20:11:26.3497820Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3497990Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3498050Z        't046000', 't048000'],
2025-01-22T20:11:26.3498110Z       dtype='object')
2025-01-22T20:11:26.3498160Z key = 'cups'
2025-01-22T20:11:26.3498170Z 
2025-01-22T20:11:26.3498220Z     def get_loc(self, key):
2025-01-22T20:11:26.3498350Z         """
2025-01-22T20:11:26.3498470Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3498510Z     
2025-01-22T20:11:26.3498560Z         Parameters
2025-01-22T20:11:26.3498610Z         ----------
2025-01-22T20:11:26.3498650Z         key : label
2025-01-22T20:11:26.3498690Z     
2025-01-22T20:11:26.3498740Z         Returns
2025-01-22T20:11:26.3498780Z         -------
2025-01-22T20:11:26.3498880Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3498920Z     
2025-01-22T20:11:26.3498970Z         Examples
2025-01-22T20:11:26.3499010Z         --------
2025-01-22T20:11:26.3499080Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3499140Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3499180Z         1
2025-01-22T20:11:26.3499220Z     
2025-01-22T20:11:26.3499300Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3499360Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3499420Z         slice(1, 3, None)
2025-01-22T20:11:26.3499460Z     
2025-01-22T20:11:26.3499540Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3499610Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3499670Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3499730Z         """
2025-01-22T20:11:26.3499810Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3499850Z         try:
2025-01-22T20:11:26.3499940Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3500010Z         except KeyError as err:
2025-01-22T20:11:26.3500090Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3500160Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3500270Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3500420Z             ):
2025-01-22T20:11:26.3500490Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3500550Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3500610Z E           KeyError: 'cups'
2025-01-22T20:11:26.3500610Z 
2025-01-22T20:11:26.3500840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3501110Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-time_explosion] _
2025-01-22T20:11:26.3501110Z 
2025-01-22T20:11:26.3501260Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3501450Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3501500Z        't046000', 't048000'],
2025-01-22T20:11:26.3501560Z       dtype='object')
2025-01-22T20:11:26.3501600Z key = 'cups'
2025-01-22T20:11:26.3501610Z 
2025-01-22T20:11:26.3501660Z     def get_loc(self, key):
2025-01-22T20:11:26.3501720Z         """
2025-01-22T20:11:26.3501850Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3501900Z     
2025-01-22T20:11:26.3501960Z         Parameters
2025-01-22T20:11:26.3502010Z         ----------
2025-01-22T20:11:26.3502060Z         key : label
2025-01-22T20:11:26.3502100Z     
2025-01-22T20:11:26.3502140Z         Returns
2025-01-22T20:11:26.3502190Z         -------
2025-01-22T20:11:26.3502300Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3502360Z     
2025-01-22T20:11:26.3502410Z         Examples
2025-01-22T20:11:26.3502450Z         --------
2025-01-22T20:11:26.3502520Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3502580Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3502620Z         1
2025-01-22T20:11:26.3502660Z     
2025-01-22T20:11:26.3502750Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3502820Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3502880Z         slice(1, 3, None)
2025-01-22T20:11:26.3503060Z     
2025-01-22T20:11:26.3503160Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3503230Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3503300Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3503350Z         """
2025-01-22T20:11:26.3503420Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3503460Z         try:
2025-01-22T20:11:26.3503530Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3503540Z 
2025-01-22T20:11:26.3503740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3503850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3503970Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3504040Z     ???
2025-01-22T20:11:26.3504150Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3504190Z     ???
2025-01-22T20:11:26.3504440Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3504490Z     ???
2025-01-22T20:11:26.3504570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3504580Z 
2025-01-22T20:11:26.3504630Z >   ???
2025-01-22T20:11:26.3504690Z E   KeyError: 'cups'
2025-01-22T20:11:26.3504690Z 
2025-01-22T20:11:26.3504790Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3504790Z 
2025-01-22T20:11:26.3504950Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3504950Z 
2025-01-22T20:11:26.3505140Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3505420Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3506010Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3506020Z 
2025-01-22T20:11:26.3506080Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3506130Z     def plasma(
2025-01-22T20:11:26.3506180Z         self,
2025-01-22T20:11:26.3506230Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3506280Z         config,
2025-01-22T20:11:26.3506330Z     ):
2025-01-22T20:11:26.3506410Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3506500Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3506510Z 
2025-01-22T20:11:26.3506600Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3506710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3506780Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3506840Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3506970Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3507040Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3507140Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3507190Z     return BasePlasma(
2025-01-22T20:11:26.3507250Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3507310Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3507370Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3507420Z     self.update(**kwargs)
2025-01-22T20:11:26.3507480Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3507590Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3507670Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3507740Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3507940Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3508060Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3508300Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3508370Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3508470Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3508600Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3508730Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3508870Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3511100Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3511290Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3511440Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3511540Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3511750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3511840Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3512040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3512100Z     return self.apply_standard()
2025-01-22T20:11:26.3512330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3512410Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3512660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3512750Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3512920Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3513120Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3513390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3513450Z     return self._get_value(key)
2025-01-22T20:11:26.3513670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3513740Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3513830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3513830Z 
2025-01-22T20:11:26.3513960Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3514130Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3514180Z        't046000', 't048000'],
2025-01-22T20:11:26.3514230Z       dtype='object')
2025-01-22T20:11:26.3514270Z key = 'cups'
2025-01-22T20:11:26.3514280Z 
2025-01-22T20:11:26.3514340Z     def get_loc(self, key):
2025-01-22T20:11:26.3514380Z         """
2025-01-22T20:11:26.3514520Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3514560Z     
2025-01-22T20:11:26.3514610Z         Parameters
2025-01-22T20:11:26.3514650Z         ----------
2025-01-22T20:11:26.3514700Z         key : label
2025-01-22T20:11:26.3514750Z     
2025-01-22T20:11:26.3514790Z         Returns
2025-01-22T20:11:26.3514840Z         -------
2025-01-22T20:11:26.3514940Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3514980Z     
2025-01-22T20:11:26.3515030Z         Examples
2025-01-22T20:11:26.3515080Z         --------
2025-01-22T20:11:26.3515150Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3515210Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3515250Z         1
2025-01-22T20:11:26.3515290Z     
2025-01-22T20:11:26.3515370Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3515440Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3515490Z         slice(1, 3, None)
2025-01-22T20:11:26.3516100Z     
2025-01-22T20:11:26.3516190Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3516250Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3516320Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3516360Z         """
2025-01-22T20:11:26.3516430Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3516480Z         try:
2025-01-22T20:11:26.3516550Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3516600Z         except KeyError as err:
2025-01-22T20:11:26.3516670Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3516750Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3516840Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3516880Z             ):
2025-01-22T20:11:26.3516960Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3517020Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3517080Z E           KeyError: 'cups'
2025-01-22T20:11:26.3517080Z 
2025-01-22T20:11:26.3517290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3517580Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-link_t_rad_t_electron] _
2025-01-22T20:11:26.3517580Z 
2025-01-22T20:11:26.3517710Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3517880Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3517930Z        't046000', 't048000'],
2025-01-22T20:11:26.3517980Z       dtype='object')
2025-01-22T20:11:26.3518020Z key = 'cups'
2025-01-22T20:11:26.3518020Z 
2025-01-22T20:11:26.3518340Z     def get_loc(self, key):
2025-01-22T20:11:26.3518380Z         """
2025-01-22T20:11:26.3518510Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3518560Z     
2025-01-22T20:11:26.3518600Z         Parameters
2025-01-22T20:11:26.3518650Z         ----------
2025-01-22T20:11:26.3518690Z         key : label
2025-01-22T20:11:26.3518730Z     
2025-01-22T20:11:26.3518780Z         Returns
2025-01-22T20:11:26.3518820Z         -------
2025-01-22T20:11:26.3518920Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3518960Z     
2025-01-22T20:11:26.3519010Z         Examples
2025-01-22T20:11:26.3519050Z         --------
2025-01-22T20:11:26.3519130Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3519190Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3519230Z         1
2025-01-22T20:11:26.3519270Z     
2025-01-22T20:11:26.3519350Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3519410Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3519460Z         slice(1, 3, None)
2025-01-22T20:11:26.3519500Z     
2025-01-22T20:11:26.3519590Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3519660Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3519730Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3519770Z         """
2025-01-22T20:11:26.3519840Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3519890Z         try:
2025-01-22T20:11:26.3519960Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3519970Z 
2025-01-22T20:11:26.3520170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3520280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3520410Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3520460Z     ???
2025-01-22T20:11:26.3520590Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3520650Z     ???
2025-01-22T20:11:26.3520890Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3521060Z     ???
2025-01-22T20:11:26.3521150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3521150Z 
2025-01-22T20:11:26.3521190Z >   ???
2025-01-22T20:11:26.3521250Z E   KeyError: 'cups'
2025-01-22T20:11:26.3521260Z 
2025-01-22T20:11:26.3521370Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3521380Z 
2025-01-22T20:11:26.3521510Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3521520Z 
2025-01-22T20:11:26.3521690Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3521960Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3522480Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3522490Z 
2025-01-22T20:11:26.3522550Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3522600Z     def plasma(
2025-01-22T20:11:26.3522640Z         self,
2025-01-22T20:11:26.3522700Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3522740Z         config,
2025-01-22T20:11:26.3522790Z     ):
2025-01-22T20:11:26.3522870Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3522940Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3522950Z 
2025-01-22T20:11:26.3523050Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3523130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3523210Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3523340Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3523480Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3523560Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3523640Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3523690Z     return BasePlasma(
2025-01-22T20:11:26.3523750Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3523810Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3523870Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3523930Z     self.update(**kwargs)
2025-01-22T20:11:26.3524000Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3524110Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3524190Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3524270Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3524480Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3524620Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3524790Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3524870Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3525000Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3525150Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3525310Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3525450Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3525680Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3525840Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3526010Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3526110Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3526340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3526550Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3526780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3526850Z     return self.apply_standard()
2025-01-22T20:11:26.3527090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3527180Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3527470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3531570Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3531790Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3531870Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3532100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3532190Z     return self._get_value(key)
2025-01-22T20:11:26.3532400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3532480Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3532590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3532600Z 
2025-01-22T20:11:26.3532740Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3532930Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3533000Z        't046000', 't048000'],
2025-01-22T20:11:26.3533060Z       dtype='object')
2025-01-22T20:11:26.3533120Z key = 'cups'
2025-01-22T20:11:26.3533120Z 
2025-01-22T20:11:26.3533380Z     def get_loc(self, key):
2025-01-22T20:11:26.3533430Z         """
2025-01-22T20:11:26.3533580Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3533640Z     
2025-01-22T20:11:26.3533700Z         Parameters
2025-01-22T20:11:26.3533740Z         ----------
2025-01-22T20:11:26.3533790Z         key : label
2025-01-22T20:11:26.3533840Z     
2025-01-22T20:11:26.3533890Z         Returns
2025-01-22T20:11:26.3533960Z         -------
2025-01-22T20:11:26.3534080Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3534130Z     
2025-01-22T20:11:26.3534180Z         Examples
2025-01-22T20:11:26.3534240Z         --------
2025-01-22T20:11:26.3534320Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3534390Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3534430Z         1
2025-01-22T20:11:26.3534470Z     
2025-01-22T20:11:26.3534550Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3534620Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3534670Z         slice(1, 3, None)
2025-01-22T20:11:26.3534710Z     
2025-01-22T20:11:26.3534790Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3534850Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3534920Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3534960Z         """
2025-01-22T20:11:26.3535030Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3535080Z         try:
2025-01-22T20:11:26.3535150Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3535200Z         except KeyError as err:
2025-01-22T20:11:26.3535270Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3535340Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3535440Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3535480Z             ):
2025-01-22T20:11:26.3535560Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3535620Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3535680Z E           KeyError: 'cups'
2025-01-22T20:11:26.3535750Z 
2025-01-22T20:11:26.3535980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3536220Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:26.3536220Z 
2025-01-22T20:11:26.3536350Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3536520Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3536580Z        't046000', 't048000'],
2025-01-22T20:11:26.3536630Z       dtype='object')
2025-01-22T20:11:26.3536680Z key = 'cups'
2025-01-22T20:11:26.3536680Z 
2025-01-22T20:11:26.3536730Z     def get_loc(self, key):
2025-01-22T20:11:26.3536780Z         """
2025-01-22T20:11:26.3536910Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3536950Z     
2025-01-22T20:11:26.3537000Z         Parameters
2025-01-22T20:11:26.3537050Z         ----------
2025-01-22T20:11:26.3537100Z         key : label
2025-01-22T20:11:26.3537140Z     
2025-01-22T20:11:26.3537190Z         Returns
2025-01-22T20:11:26.3537230Z         -------
2025-01-22T20:11:26.3537330Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3537380Z     
2025-01-22T20:11:26.3537440Z         Examples
2025-01-22T20:11:26.3537480Z         --------
2025-01-22T20:11:26.3537550Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3537610Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3537650Z         1
2025-01-22T20:11:26.3537690Z     
2025-01-22T20:11:26.3537770Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3537830Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3537970Z         slice(1, 3, None)
2025-01-22T20:11:26.3538030Z     
2025-01-22T20:11:26.3538130Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3538210Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3538280Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3538330Z         """
2025-01-22T20:11:26.3538480Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3538530Z         try:
2025-01-22T20:11:26.3538610Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3538610Z 
2025-01-22T20:11:26.3538800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3538890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3539000Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3539040Z     ???
2025-01-22T20:11:26.3539150Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3539200Z     ???
2025-01-22T20:11:26.3539440Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3539490Z     ???
2025-01-22T20:11:26.3539570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3539580Z 
2025-01-22T20:11:26.3539620Z >   ???
2025-01-22T20:11:26.3539670Z E   KeyError: 'cups'
2025-01-22T20:11:26.3539670Z 
2025-01-22T20:11:26.3539770Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3539770Z 
2025-01-22T20:11:26.3539900Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3539900Z 
2025-01-22T20:11:26.3540080Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3540360Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3540870Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3541090Z 
2025-01-22T20:11:26.3541170Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3541210Z     def plasma(
2025-01-22T20:11:26.3541250Z         self,
2025-01-22T20:11:26.3541310Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3541350Z         config,
2025-01-22T20:11:26.3541390Z     ):
2025-01-22T20:11:26.3541470Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3541550Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3541560Z 
2025-01-22T20:11:26.3541650Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3541730Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3541810Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3541860Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3542000Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3542080Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3542160Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3542210Z     return BasePlasma(
2025-01-22T20:11:26.3542270Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3542340Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3542400Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3542480Z     self.update(**kwargs)
2025-01-22T20:11:26.3542540Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3542640Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3542720Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3542800Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3543000Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3543120Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3543400Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3543480Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3543580Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3543710Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3543840Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3543990Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3544220Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3544360Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3544530Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3544610Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3544840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3544950Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3545150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3545230Z     return self.apply_standard()
2025-01-22T20:11:26.3545470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3545580Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3545830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3545920Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3546090Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3546160Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3546410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3546580Z     return self._get_value(key)
2025-01-22T20:11:26.3546820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3546900Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3547000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3547000Z 
2025-01-22T20:11:26.3547140Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3547320Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3547380Z        't046000', 't048000'],
2025-01-22T20:11:26.3547430Z       dtype='object')
2025-01-22T20:11:26.3547470Z key = 'cups'
2025-01-22T20:11:26.3547480Z 
2025-01-22T20:11:26.3547540Z     def get_loc(self, key):
2025-01-22T20:11:26.3547600Z         """
2025-01-22T20:11:26.3547740Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3547800Z     
2025-01-22T20:11:26.3547860Z         Parameters
2025-01-22T20:11:26.3547910Z         ----------
2025-01-22T20:11:26.3547950Z         key : label
2025-01-22T20:11:26.3548000Z     
2025-01-22T20:11:26.3548040Z         Returns
2025-01-22T20:11:26.3548080Z         -------
2025-01-22T20:11:26.3548200Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3548250Z     
2025-01-22T20:11:26.3548290Z         Examples
2025-01-22T20:11:26.3548330Z         --------
2025-01-22T20:11:26.3548410Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3548480Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3548520Z         1
2025-01-22T20:11:26.3548570Z     
2025-01-22T20:11:26.3548650Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3548730Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3548930Z         slice(1, 3, None)
2025-01-22T20:11:26.3548980Z     
2025-01-22T20:11:26.3549060Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3549130Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3549200Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3549250Z         """
2025-01-22T20:11:26.3549340Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3549380Z         try:
2025-01-22T20:11:26.3549460Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3549520Z         except KeyError as err:
2025-01-22T20:11:26.3549590Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3549660Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3549750Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3549800Z             ):
2025-01-22T20:11:26.3549870Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3549940Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3550010Z E           KeyError: 'cups'
2025-01-22T20:11:26.3550010Z 
2025-01-22T20:11:26.3550250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3550480Z _ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I'], 'coronal_approximation': True}] _
2025-01-22T20:11:26.3550490Z 
2025-01-22T20:11:26.3550620Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3550780Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3552490Z        't046000', 't048000'],
2025-01-22T20:11:26.3552610Z       dtype='object')
2025-01-22T20:11:26.3552660Z key = 'cups'
2025-01-22T20:11:26.3552660Z 
2025-01-22T20:11:26.3552710Z     def get_loc(self, key):
2025-01-22T20:11:26.3552760Z         """
2025-01-22T20:11:26.3552890Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3552940Z     
2025-01-22T20:11:26.3552990Z         Parameters
2025-01-22T20:11:26.3553160Z         ----------
2025-01-22T20:11:26.3553210Z         key : label
2025-01-22T20:11:26.3553250Z     
2025-01-22T20:11:26.3553290Z         Returns
2025-01-22T20:11:26.3553340Z         -------
2025-01-22T20:11:26.3553460Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3553510Z     
2025-01-22T20:11:26.3553580Z         Examples
2025-01-22T20:11:26.3553630Z         --------
2025-01-22T20:11:26.3553700Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3553760Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3553820Z         1
2025-01-22T20:11:26.3553860Z     
2025-01-22T20:11:26.3553940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3554000Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3554060Z         slice(1, 3, None)
2025-01-22T20:11:26.3554120Z     
2025-01-22T20:11:26.3554200Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3554280Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3554360Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3554430Z         """
2025-01-22T20:11:26.3554520Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3554580Z         try:
2025-01-22T20:11:26.3554650Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3554650Z 
2025-01-22T20:11:26.3554850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3554930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3555040Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3555080Z     ???
2025-01-22T20:11:26.3555180Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3555230Z     ???
2025-01-22T20:11:26.3555450Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3555590Z     ???
2025-01-22T20:11:26.3555680Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3555680Z 
2025-01-22T20:11:26.3555730Z >   ???
2025-01-22T20:11:26.3555770Z E   KeyError: 'cups'
2025-01-22T20:11:26.3555780Z 
2025-01-22T20:11:26.3555870Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3555870Z 
2025-01-22T20:11:26.3556000Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3556000Z 
2025-01-22T20:11:26.3556170Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3556430Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3556920Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3556930Z 
2025-01-22T20:11:26.3557000Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3557040Z     def plasma(
2025-01-22T20:11:26.3557090Z         self,
2025-01-22T20:11:26.3557150Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3557200Z         config,
2025-01-22T20:11:26.3557250Z     ):
2025-01-22T20:11:26.3557330Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3557400Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3557410Z 
2025-01-22T20:11:26.3557500Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3557590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3557670Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3557730Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3557860Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3557940Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3558080Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3558140Z     return BasePlasma(
2025-01-22T20:11:26.3558200Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3558260Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3558330Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3558610Z     self.update(**kwargs)
2025-01-22T20:11:26.3558760Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3558870Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3558970Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3559050Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3559270Z tardis/plasma/properties/partition_function.py:284: in _calculate_coronal_approximation
2025-01-22T20:11:26.3559420Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3559620Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3559700Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3559810Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3559950Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3560090Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3560240Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3560450Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3560580Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3560730Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3560800Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3561010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3561270Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3561470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3561530Z     return self.apply_standard()
2025-01-22T20:11:26.3561760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3561860Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3562110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3562200Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3562390Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3562450Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3562680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3562740Z     return self._get_value(key)
2025-01-22T20:11:26.3562970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3563030Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3563130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3563130Z 
2025-01-22T20:11:26.3563270Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3563480Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3563550Z        't046000', 't048000'],
2025-01-22T20:11:26.3563600Z       dtype='object')
2025-01-22T20:11:26.3563650Z key = 'cups'
2025-01-22T20:11:26.3563650Z 
2025-01-22T20:11:26.3563700Z     def get_loc(self, key):
2025-01-22T20:11:26.3563750Z         """
2025-01-22T20:11:26.3563900Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3563960Z     
2025-01-22T20:11:26.3564010Z         Parameters
2025-01-22T20:11:26.3564330Z         ----------
2025-01-22T20:11:26.3564400Z         key : label
2025-01-22T20:11:26.3564460Z     
2025-01-22T20:11:26.3564500Z         Returns
2025-01-22T20:11:26.3564550Z         -------
2025-01-22T20:11:26.3564660Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3564700Z     
2025-01-22T20:11:26.3564750Z         Examples
2025-01-22T20:11:26.3564800Z         --------
2025-01-22T20:11:26.3564870Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3564940Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3564980Z         1
2025-01-22T20:11:26.3565030Z     
2025-01-22T20:11:26.3565110Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3565170Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3565230Z         slice(1, 3, None)
2025-01-22T20:11:26.3565280Z     
2025-01-22T20:11:26.3565370Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3565440Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3565520Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3565560Z         """
2025-01-22T20:11:26.3565640Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3565680Z         try:
2025-01-22T20:11:26.3565760Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3565820Z         except KeyError as err:
2025-01-22T20:11:26.3565890Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3565960Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3566060Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3566100Z             ):
2025-01-22T20:11:26.3566170Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3566230Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3566730Z E           KeyError: 'cups'
2025-01-22T20:11:26.3566740Z 
2025-01-22T20:11:26.3567070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3567350Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_rad] _
2025-01-22T20:11:26.3567360Z 
2025-01-22T20:11:26.3567510Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3567710Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3567770Z        't046000', 't048000'],
2025-01-22T20:11:26.3567820Z       dtype='object')
2025-01-22T20:11:26.3567870Z key = 'cups'
2025-01-22T20:11:26.3567880Z 
2025-01-22T20:11:26.3568000Z     def get_loc(self, key):
2025-01-22T20:11:26.3568060Z         """
2025-01-22T20:11:26.3568220Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3568280Z     
2025-01-22T20:11:26.3568340Z         Parameters
2025-01-22T20:11:26.3568390Z         ----------
2025-01-22T20:11:26.3568460Z         key : label
2025-01-22T20:11:26.3568500Z     
2025-01-22T20:11:26.3568550Z         Returns
2025-01-22T20:11:26.3568600Z         -------
2025-01-22T20:11:26.3568720Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3568780Z     
2025-01-22T20:11:26.3568830Z         Examples
2025-01-22T20:11:26.3568880Z         --------
2025-01-22T20:11:26.3568970Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3569050Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3569100Z         1
2025-01-22T20:11:26.3569150Z     
2025-01-22T20:11:26.3569240Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3569320Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3569370Z         slice(1, 3, None)
2025-01-22T20:11:26.3569410Z     
2025-01-22T20:11:26.3569500Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3569600Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3569680Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3569900Z         """
2025-01-22T20:11:26.3569990Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3570040Z         try:
2025-01-22T20:11:26.3570120Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3570130Z 
2025-01-22T20:11:26.3570350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3570440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3570570Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3570620Z     ???
2025-01-22T20:11:26.3570730Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3570780Z     ???
2025-01-22T20:11:26.3571030Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3571080Z     ???
2025-01-22T20:11:26.3571170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3571180Z 
2025-01-22T20:11:26.3571220Z >   ???
2025-01-22T20:11:26.3571270Z E   KeyError: 'cups'
2025-01-22T20:11:26.3571270Z 
2025-01-22T20:11:26.3571390Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3571390Z 
2025-01-22T20:11:26.3571550Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3571560Z 
2025-01-22T20:11:26.3571730Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3572010Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3572530Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3572640Z 
2025-01-22T20:11:26.3572730Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3572780Z     def plasma(
2025-01-22T20:11:26.3572820Z         self,
2025-01-22T20:11:26.3572890Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3572940Z         config,
2025-01-22T20:11:26.3572980Z     ):
2025-01-22T20:11:26.3573080Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3573160Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3573160Z 
2025-01-22T20:11:26.3573270Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3573360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3573450Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3573520Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3573660Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3573740Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3573830Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3573890Z     return BasePlasma(
2025-01-22T20:11:26.3573950Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3574020Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3574100Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3574160Z     self.update(**kwargs)
2025-01-22T20:11:26.3574240Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3574350Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3574450Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3574540Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3574750Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3574890Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3575090Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3575180Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3575300Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3575560Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3575720Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3575880Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3576120Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3576280Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3576450Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3576540Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3576750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3576850Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3577040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3577110Z     return self.apply_standard()
2025-01-22T20:11:26.3577330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3577420Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3577680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3577760Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3577940Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3577990Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3578210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3578360Z     return self._get_value(key)
2025-01-22T20:11:26.3578590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3578650Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3578740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3578740Z 
2025-01-22T20:11:26.3578870Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3579040Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3579090Z        't046000', 't048000'],
2025-01-22T20:11:26.3579140Z       dtype='object')
2025-01-22T20:11:26.3579190Z key = 'cups'
2025-01-22T20:11:26.3579190Z 
2025-01-22T20:11:26.3579240Z     def get_loc(self, key):
2025-01-22T20:11:26.3579290Z         """
2025-01-22T20:11:26.3579410Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3579450Z     
2025-01-22T20:11:26.3579500Z         Parameters
2025-01-22T20:11:26.3579550Z         ----------
2025-01-22T20:11:26.3579600Z         key : label
2025-01-22T20:11:26.3579640Z     
2025-01-22T20:11:26.3579680Z         Returns
2025-01-22T20:11:26.3579720Z         -------
2025-01-22T20:11:26.3579820Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3579860Z     
2025-01-22T20:11:26.3579910Z         Examples
2025-01-22T20:11:26.3579950Z         --------
2025-01-22T20:11:26.3580040Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3580100Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3580140Z         1
2025-01-22T20:11:26.3580180Z     
2025-01-22T20:11:26.3580260Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3580320Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3580370Z         slice(1, 3, None)
2025-01-22T20:11:26.3580410Z     
2025-01-22T20:11:26.3580490Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3580560Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3580720Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3580770Z         """
2025-01-22T20:11:26.3580870Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3580920Z         try:
2025-01-22T20:11:26.3580990Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3581050Z         except KeyError as err:
2025-01-22T20:11:26.3581110Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3581190Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3581280Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3581330Z             ):
2025-01-22T20:11:26.3581390Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3581450Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3581500Z E           KeyError: 'cups'
2025-01-22T20:11:26.3581510Z 
2025-01-22T20:11:26.3581720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3581840Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:26.3582230Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:26.3582580Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:26.3582710Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:26.3583130Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:26.3583410Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-g_electron] _
2025-01-22T20:11:26.3583420Z 
2025-01-22T20:11:26.3583650Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3583820Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3583880Z        't046000', 't048000'],
2025-01-22T20:11:26.3583930Z       dtype='object')
2025-01-22T20:11:26.3583980Z key = 'cups'
2025-01-22T20:11:26.3583980Z 
2025-01-22T20:11:26.3588640Z     def get_loc(self, key):
2025-01-22T20:11:26.3588780Z         """
2025-01-22T20:11:26.3588920Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3588960Z     
2025-01-22T20:11:26.3589030Z         Parameters
2025-01-22T20:11:26.3589080Z         ----------
2025-01-22T20:11:26.3589140Z         key : label
2025-01-22T20:11:26.3589180Z     
2025-01-22T20:11:26.3589240Z         Returns
2025-01-22T20:11:26.3589290Z         -------
2025-01-22T20:11:26.3589390Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3589450Z     
2025-01-22T20:11:26.3589500Z         Examples
2025-01-22T20:11:26.3589540Z         --------
2025-01-22T20:11:26.3589620Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3589700Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3589760Z         1
2025-01-22T20:11:26.3589810Z     
2025-01-22T20:11:26.3589910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3589980Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3590040Z         slice(1, 3, None)
2025-01-22T20:11:26.3590090Z     
2025-01-22T20:11:26.3590180Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3590280Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3590370Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3590420Z         """
2025-01-22T20:11:26.3590490Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3590540Z         try:
2025-01-22T20:11:26.3590620Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3590620Z 
2025-01-22T20:11:26.3590840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3591390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3591500Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3591550Z     ???
2025-01-22T20:11:26.3591660Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3591710Z     ???
2025-01-22T20:11:26.3591940Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3592010Z     ???
2025-01-22T20:11:26.3592100Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3592110Z 
2025-01-22T20:11:26.3592150Z >   ???
2025-01-22T20:11:26.3592200Z E   KeyError: 'cups'
2025-01-22T20:11:26.3592200Z 
2025-01-22T20:11:26.3592300Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3592300Z 
2025-01-22T20:11:26.3592440Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3592440Z 
2025-01-22T20:11:26.3594290Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3594590Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3595100Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3595110Z 
2025-01-22T20:11:26.3595180Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3595220Z     def plasma(
2025-01-22T20:11:26.3595270Z         self,
2025-01-22T20:11:26.3595320Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3595360Z         config,
2025-01-22T20:11:26.3595750Z     ):
2025-01-22T20:11:26.3595840Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3595910Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3595910Z 
2025-01-22T20:11:26.3596000Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3596090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3596160Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3596220Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3596350Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3596420Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3596500Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3596550Z     return BasePlasma(
2025-01-22T20:11:26.3596610Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3596670Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3596730Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3596790Z     self.update(**kwargs)
2025-01-22T20:11:26.3596850Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3596940Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3597050Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3597140Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3597350Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3597470Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3597650Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3597750Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3597870Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3598010Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3598160Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3598310Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3598510Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3598760Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3598910Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3598990Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3599200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3599290Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3599480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3599540Z     return self.apply_standard()
2025-01-22T20:11:26.3599770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3599860Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3600110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3600200Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3600390Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3600450Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3600660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3600720Z     return self._get_value(key)
2025-01-22T20:11:26.3600920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3600990Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3601080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3601170Z 
2025-01-22T20:11:26.3601310Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3601480Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3601540Z        't046000', 't048000'],
2025-01-22T20:11:26.3601600Z       dtype='object')
2025-01-22T20:11:26.3601650Z key = 'cups'
2025-01-22T20:11:26.3601650Z 
2025-01-22T20:11:26.3601710Z     def get_loc(self, key):
2025-01-22T20:11:26.3601760Z         """
2025-01-22T20:11:26.3601880Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3601930Z     
2025-01-22T20:11:26.3601970Z         Parameters
2025-01-22T20:11:26.3602020Z         ----------
2025-01-22T20:11:26.3602070Z         key : label
2025-01-22T20:11:26.3602110Z     
2025-01-22T20:11:26.3602160Z         Returns
2025-01-22T20:11:26.3602200Z         -------
2025-01-22T20:11:26.3602600Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3602700Z     
2025-01-22T20:11:26.3602750Z         Examples
2025-01-22T20:11:26.3602800Z         --------
2025-01-22T20:11:26.3602880Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3602940Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3602980Z         1
2025-01-22T20:11:26.3603020Z     
2025-01-22T20:11:26.3603100Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3603170Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3603220Z         slice(1, 3, None)
2025-01-22T20:11:26.3603260Z     
2025-01-22T20:11:26.3603350Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3603410Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3603480Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3603520Z         """
2025-01-22T20:11:26.3603590Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3603630Z         try:
2025-01-22T20:11:26.3603710Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3603770Z         except KeyError as err:
2025-01-22T20:11:26.3603840Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3604100Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3604210Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3604270Z             ):
2025-01-22T20:11:26.3604340Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3604400Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3604450Z E           KeyError: 'cups'
2025-01-22T20:11:26.3604460Z 
2025-01-22T20:11:26.3604690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3604940Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-selected_atoms] _
2025-01-22T20:11:26.3604940Z 
2025-01-22T20:11:26.3605070Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3605250Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3605310Z        't046000', 't048000'],
2025-01-22T20:11:26.3605360Z       dtype='object')
2025-01-22T20:11:26.3605410Z key = 'cups'
2025-01-22T20:11:26.3605410Z 
2025-01-22T20:11:26.3605470Z     def get_loc(self, key):
2025-01-22T20:11:26.3605510Z         """
2025-01-22T20:11:26.3605640Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3605680Z     
2025-01-22T20:11:26.3605740Z         Parameters
2025-01-22T20:11:26.3605780Z         ----------
2025-01-22T20:11:26.3605830Z         key : label
2025-01-22T20:11:26.3605870Z     
2025-01-22T20:11:26.3605920Z         Returns
2025-01-22T20:11:26.3605960Z         -------
2025-01-22T20:11:26.3606060Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3606110Z     
2025-01-22T20:11:26.3606250Z         Examples
2025-01-22T20:11:26.3606300Z         --------
2025-01-22T20:11:26.3606370Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3606450Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3606510Z         1
2025-01-22T20:11:26.3606570Z     
2025-01-22T20:11:26.3606650Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3606710Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3606760Z         slice(1, 3, None)
2025-01-22T20:11:26.3606800Z     
2025-01-22T20:11:26.3606880Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3606950Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3607040Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3607090Z         """
2025-01-22T20:11:26.3607190Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3607250Z         try:
2025-01-22T20:11:26.3607330Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3607330Z 
2025-01-22T20:11:26.3607540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3607660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3607770Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3607830Z     ???
2025-01-22T20:11:26.3607950Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3608010Z     ???
2025-01-22T20:11:26.3608240Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3608290Z     ???
2025-01-22T20:11:26.3608380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3608380Z 
2025-01-22T20:11:26.3608430Z >   ???
2025-01-22T20:11:26.3608480Z E   KeyError: 'cups'
2025-01-22T20:11:26.3608490Z 
2025-01-22T20:11:26.3608590Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3608590Z 
2025-01-22T20:11:26.3608730Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3608740Z 
2025-01-22T20:11:26.3609010Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3609280Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3609820Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3609840Z 
2025-01-22T20:11:26.3609920Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3609990Z     def plasma(
2025-01-22T20:11:26.3610030Z         self,
2025-01-22T20:11:26.3610090Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3610130Z         config,
2025-01-22T20:11:26.3610180Z     ):
2025-01-22T20:11:26.3610290Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3610380Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3610390Z 
2025-01-22T20:11:26.3610500Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3610610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3610680Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3610740Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3610890Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3610980Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3611090Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3611160Z     return BasePlasma(
2025-01-22T20:11:26.3611230Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3611310Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3611390Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3611460Z     self.update(**kwargs)
2025-01-22T20:11:26.3611630Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3611730Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3611820Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3611910Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3612130Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3612260Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3612490Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3612560Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3612670Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3612830Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3612990Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3613130Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3613370Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3613540Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3613700Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3613810Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3614040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3614140Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3614360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3614430Z     return self.apply_standard()
2025-01-22T20:11:26.3614670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3614790Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3615070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3615650Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3615840Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3615900Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3616150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3616230Z     return self._get_value(key)
2025-01-22T20:11:26.3616460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3616530Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3616630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3616640Z 
2025-01-22T20:11:26.3616790Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3616990Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3617070Z        't046000', 't048000'],
2025-01-22T20:11:26.3617130Z       dtype='object')
2025-01-22T20:11:26.3617190Z key = 'cups'
2025-01-22T20:11:26.3617200Z 
2025-01-22T20:11:26.3617260Z     def get_loc(self, key):
2025-01-22T20:11:26.3617310Z         """
2025-01-22T20:11:26.3617440Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3617490Z     
2025-01-22T20:11:26.3617540Z         Parameters
2025-01-22T20:11:26.3617590Z         ----------
2025-01-22T20:11:26.3617650Z         key : label
2025-01-22T20:11:26.3617690Z     
2025-01-22T20:11:26.3617750Z         Returns
2025-01-22T20:11:26.3617820Z         -------
2025-01-22T20:11:26.3617950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3618000Z     
2025-01-22T20:11:26.3618440Z         Examples
2025-01-22T20:11:26.3618490Z         --------
2025-01-22T20:11:26.3618560Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3618620Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3618670Z         1
2025-01-22T20:11:26.3618710Z     
2025-01-22T20:11:26.3618790Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3618860Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3618910Z         slice(1, 3, None)
2025-01-22T20:11:26.3618950Z     
2025-01-22T20:11:26.3619030Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3619090Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3619150Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3619200Z         """
2025-01-22T20:11:26.3619270Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3619320Z         try:
2025-01-22T20:11:26.3619390Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3619450Z         except KeyError as err:
2025-01-22T20:11:26.3619520Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3619600Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3619690Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3619730Z             ):
2025-01-22T20:11:26.3619800Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3619870Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3619920Z E           KeyError: 'cups'
2025-01-22T20:11:26.3619920Z 
2025-01-22T20:11:26.3620150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3620400Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-number_density] _
2025-01-22T20:11:26.3620410Z 
2025-01-22T20:11:26.3620540Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3620720Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3620860Z        't046000', 't048000'],
2025-01-22T20:11:26.3620910Z       dtype='object')
2025-01-22T20:11:26.3620950Z key = 'cups'
2025-01-22T20:11:26.3620960Z 
2025-01-22T20:11:26.3621010Z     def get_loc(self, key):
2025-01-22T20:11:26.3621050Z         """
2025-01-22T20:11:26.3621180Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3621220Z     
2025-01-22T20:11:26.3621270Z         Parameters
2025-01-22T20:11:26.3621320Z         ----------
2025-01-22T20:11:26.3621370Z         key : label
2025-01-22T20:11:26.3621430Z     
2025-01-22T20:11:26.3621470Z         Returns
2025-01-22T20:11:26.3621510Z         -------
2025-01-22T20:11:26.3621610Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3621660Z     
2025-01-22T20:11:26.3621700Z         Examples
2025-01-22T20:11:26.3621750Z         --------
2025-01-22T20:11:26.3621830Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3621890Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3621950Z         1
2025-01-22T20:11:26.3622010Z     
2025-01-22T20:11:26.3622100Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3622170Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3622220Z         slice(1, 3, None)
2025-01-22T20:11:26.3622260Z     
2025-01-22T20:11:26.3622340Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3622400Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3622560Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3622610Z         """
2025-01-22T20:11:26.3622680Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3622720Z         try:
2025-01-22T20:11:26.3622800Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3622800Z 
2025-01-22T20:11:26.3623000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3623200Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3623310Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3623370Z     ???
2025-01-22T20:11:26.3623480Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3623530Z     ???
2025-01-22T20:11:26.3623750Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3623790Z     ???
2025-01-22T20:11:26.3623880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3623880Z 
2025-01-22T20:11:26.3623920Z >   ???
2025-01-22T20:11:26.3623970Z E   KeyError: 'cups'
2025-01-22T20:11:26.3623970Z 
2025-01-22T20:11:26.3624080Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3624090Z 
2025-01-22T20:11:26.3624230Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3624230Z 
2025-01-22T20:11:26.3624440Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3624710Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3625220Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3625230Z 
2025-01-22T20:11:26.3625290Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3625340Z     def plasma(
2025-01-22T20:11:26.3625390Z         self,
2025-01-22T20:11:26.3625440Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3625480Z         config,
2025-01-22T20:11:26.3625530Z     ):
2025-01-22T20:11:26.3625610Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3625680Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3625690Z 
2025-01-22T20:11:26.3625780Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3625980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3626070Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3626120Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3626270Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3626350Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3626430Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3626480Z     return BasePlasma(
2025-01-22T20:11:26.3626540Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3626600Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3626660Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3626720Z     self.update(**kwargs)
2025-01-22T20:11:26.3626780Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3626880Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3626960Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3627050Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3627250Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3627370Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3627530Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3627610Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3627710Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3627840Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3627970Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3628120Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3628430Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3628600Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3628760Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3628850Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3629080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3629190Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3629410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3629480Z     return self.apply_standard()
2025-01-22T20:11:26.3629730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3629820Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3630090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3630200Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3630390Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3630450Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3630690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3630780Z     return self._get_value(key)
2025-01-22T20:11:26.3631020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3631090Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3631170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3631180Z 
2025-01-22T20:11:26.3631300Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3631480Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3631640Z        't046000', 't048000'],
2025-01-22T20:11:26.3631690Z       dtype='object')
2025-01-22T20:11:26.3631730Z key = 'cups'
2025-01-22T20:11:26.3631740Z 
2025-01-22T20:11:26.3631790Z     def get_loc(self, key):
2025-01-22T20:11:26.3631830Z         """
2025-01-22T20:11:26.3631960Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3632010Z     
2025-01-22T20:11:26.3632080Z         Parameters
2025-01-22T20:11:26.3632140Z         ----------
2025-01-22T20:11:26.3632180Z         key : label
2025-01-22T20:11:26.3632220Z     
2025-01-22T20:11:26.3632260Z         Returns
2025-01-22T20:11:26.3632320Z         -------
2025-01-22T20:11:26.3632430Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3632470Z     
2025-01-22T20:11:26.3632540Z         Examples
2025-01-22T20:11:26.3632610Z         --------
2025-01-22T20:11:26.3632700Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3632780Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3632830Z         1
2025-01-22T20:11:26.3632880Z     
2025-01-22T20:11:26.3632970Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3633040Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3633090Z         slice(1, 3, None)
2025-01-22T20:11:26.3633130Z     
2025-01-22T20:11:26.3633210Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3633290Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3633360Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3633400Z         """
2025-01-22T20:11:26.3633480Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3633530Z         try:
2025-01-22T20:11:26.3633610Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3633670Z         except KeyError as err:
2025-01-22T20:11:26.3633860Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3633950Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3634060Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3634110Z             ):
2025-01-22T20:11:26.3634180Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3635580Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3635720Z E           KeyError: 'cups'
2025-01-22T20:11:26.3635730Z 
2025-01-22T20:11:26.3635960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3636220Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_electrons] _
2025-01-22T20:11:26.3636230Z 
2025-01-22T20:11:26.3636360Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3636540Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3636610Z        't046000', 't048000'],
2025-01-22T20:11:26.3636660Z       dtype='object')
2025-01-22T20:11:26.3636710Z key = 'cups'
2025-01-22T20:11:26.3636710Z 
2025-01-22T20:11:26.3636760Z     def get_loc(self, key):
2025-01-22T20:11:26.3636810Z         """
2025-01-22T20:11:26.3636930Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3636980Z     
2025-01-22T20:11:26.3637030Z         Parameters
2025-01-22T20:11:26.3637080Z         ----------
2025-01-22T20:11:26.3637120Z         key : label
2025-01-22T20:11:26.3637160Z     
2025-01-22T20:11:26.3637210Z         Returns
2025-01-22T20:11:26.3637260Z         -------
2025-01-22T20:11:26.3637360Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3637400Z     
2025-01-22T20:11:26.3637460Z         Examples
2025-01-22T20:11:26.3637520Z         --------
2025-01-22T20:11:26.3637590Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3637670Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3637730Z         1
2025-01-22T20:11:26.3638200Z     
2025-01-22T20:11:26.3638290Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3638350Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3638400Z         slice(1, 3, None)
2025-01-22T20:11:26.3638460Z     
2025-01-22T20:11:26.3638560Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3638630Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3638720Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3638760Z         """
2025-01-22T20:11:26.3638840Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3638880Z         try:
2025-01-22T20:11:26.3638950Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3638960Z 
2025-01-22T20:11:26.3639160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3639260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3639370Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3639410Z     ???
2025-01-22T20:11:26.3639530Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3639570Z     ???
2025-01-22T20:11:26.3639820Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3639860Z     ???
2025-01-22T20:11:26.3639950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3639950Z 
2025-01-22T20:11:26.3639990Z >   ???
2025-01-22T20:11:26.3640050Z E   KeyError: 'cups'
2025-01-22T20:11:26.3640050Z 
2025-01-22T20:11:26.3640150Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3640150Z 
2025-01-22T20:11:26.3640290Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3640420Z 
2025-01-22T20:11:26.3640600Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3640870Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3641390Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3641400Z 
2025-01-22T20:11:26.3641460Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3641510Z     def plasma(
2025-01-22T20:11:26.3641550Z         self,
2025-01-22T20:11:26.3641610Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3641650Z         config,
2025-01-22T20:11:26.3641700Z     ):
2025-01-22T20:11:26.3641790Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3641860Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3641870Z 
2025-01-22T20:11:26.3641970Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3642060Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3642140Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3642200Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3642330Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3642400Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3642500Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3642540Z     return BasePlasma(
2025-01-22T20:11:26.3642610Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3646770Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3646890Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3646950Z     self.update(**kwargs)
2025-01-22T20:11:26.3647000Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3647100Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3647190Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3647460Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3647650Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3647770Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3647940Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3648010Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3648120Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3648250Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3648390Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3648530Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3648740Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3648880Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3649040Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3649110Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3649320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3649410Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3649600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3649660Z     return self.apply_standard()
2025-01-22T20:11:26.3649890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3649980Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3650230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3650430Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3650600Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3650660Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3650880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3650940Z     return self._get_value(key)
2025-01-22T20:11:26.3651170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3651250Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3651340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3651340Z 
2025-01-22T20:11:26.3651460Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3651640Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3651690Z        't046000', 't048000'],
2025-01-22T20:11:26.3651750Z       dtype='object')
2025-01-22T20:11:26.3651790Z key = 'cups'
2025-01-22T20:11:26.3651790Z 
2025-01-22T20:11:26.3651850Z     def get_loc(self, key):
2025-01-22T20:11:26.3651890Z         """
2025-01-22T20:11:26.3652020Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3652060Z     
2025-01-22T20:11:26.3652110Z         Parameters
2025-01-22T20:11:26.3652160Z         ----------
2025-01-22T20:11:26.3652210Z         key : label
2025-01-22T20:11:26.3652250Z     
2025-01-22T20:11:26.3652300Z         Returns
2025-01-22T20:11:26.3652350Z         -------
2025-01-22T20:11:26.3652450Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3652490Z     
2025-01-22T20:11:26.3652530Z         Examples
2025-01-22T20:11:26.3652580Z         --------
2025-01-22T20:11:26.3652650Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3652720Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3652910Z         1
2025-01-22T20:11:26.3652950Z     
2025-01-22T20:11:26.3653030Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3653100Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3653150Z         slice(1, 3, None)
2025-01-22T20:11:26.3653190Z     
2025-01-22T20:11:26.3653270Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3653340Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3653400Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3653440Z         """
2025-01-22T20:11:26.3653520Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3653560Z         try:
2025-01-22T20:11:26.3653630Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3653680Z         except KeyError as err:
2025-01-22T20:11:26.3653760Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3653830Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3653930Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3653980Z             ):
2025-01-22T20:11:26.3654040Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3654100Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3654150Z E           KeyError: 'cups'
2025-01-22T20:11:26.3654160Z 
2025-01-22T20:11:26.3654370Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3654600Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-w] _
2025-01-22T20:11:26.3654600Z 
2025-01-22T20:11:26.3654730Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3654890Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3655020Z        't046000', 't048000'],
2025-01-22T20:11:26.3655080Z       dtype='object')
2025-01-22T20:11:26.3655140Z key = 'cups'
2025-01-22T20:11:26.3655140Z 
2025-01-22T20:11:26.3655190Z     def get_loc(self, key):
2025-01-22T20:11:26.3655240Z         """
2025-01-22T20:11:26.3655360Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3655400Z     
2025-01-22T20:11:26.3655450Z         Parameters
2025-01-22T20:11:26.3655500Z         ----------
2025-01-22T20:11:26.3655540Z         key : label
2025-01-22T20:11:26.3655580Z     
2025-01-22T20:11:26.3655630Z         Returns
2025-01-22T20:11:26.3655670Z         -------
2025-01-22T20:11:26.3655770Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3655810Z     
2025-01-22T20:11:26.3655860Z         Examples
2025-01-22T20:11:26.3655910Z         --------
2025-01-22T20:11:26.3655980Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3656040Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3656090Z         1
2025-01-22T20:11:26.3656130Z     
2025-01-22T20:11:26.3656210Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3656270Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3656320Z         slice(1, 3, None)
2025-01-22T20:11:26.3656360Z     
2025-01-22T20:11:26.3656440Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3656500Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3656570Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3656610Z         """
2025-01-22T20:11:26.3656680Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3656720Z         try:
2025-01-22T20:11:26.3656790Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3656800Z 
2025-01-22T20:11:26.3656990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3657080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3657190Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3657310Z     ???
2025-01-22T20:11:26.3657410Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3657450Z     ???
2025-01-22T20:11:26.3657670Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3657720Z     ???
2025-01-22T20:11:26.3657800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3657800Z 
2025-01-22T20:11:26.3657850Z >   ???
2025-01-22T20:11:26.3657890Z E   KeyError: 'cups'
2025-01-22T20:11:26.3657900Z 
2025-01-22T20:11:26.3657990Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3657990Z 
2025-01-22T20:11:26.3658120Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3658120Z 
2025-01-22T20:11:26.3658290Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3658550Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3659050Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3659050Z 
2025-01-22T20:11:26.3659110Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3659150Z     def plasma(
2025-01-22T20:11:26.3659200Z         self,
2025-01-22T20:11:26.3659250Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3659290Z         config,
2025-01-22T20:11:26.3659330Z     ):
2025-01-22T20:11:26.3659420Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3659480Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3659490Z 
2025-01-22T20:11:26.3659630Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3659720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3659800Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3659860Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3659980Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3660050Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3660130Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3660190Z     return BasePlasma(
2025-01-22T20:11:26.3660240Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3660300Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3660360Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3660420Z     self.update(**kwargs)
2025-01-22T20:11:26.3660470Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3660570Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3660650Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3660730Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3660910Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3661030Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3661200Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3661270Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3661370Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3661500Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3661630Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3661760Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3661970Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3662110Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3662250Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3662760Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3662970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3663060Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3663250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3663310Z     return self.apply_standard()
2025-01-22T20:11:26.3663530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3663620Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3663860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3663960Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3664130Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3664200Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3664410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3664470Z     return self._get_value(key)
2025-01-22T20:11:26.3664680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3664740Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3664830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3664830Z 
2025-01-22T20:11:26.3664950Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3665120Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3665860Z        't046000', 't048000'],
2025-01-22T20:11:26.3665930Z       dtype='object')
2025-01-22T20:11:26.3665980Z key = 'cups'
2025-01-22T20:11:26.3665980Z 
2025-01-22T20:11:26.3666040Z     def get_loc(self, key):
2025-01-22T20:11:26.3666080Z         """
2025-01-22T20:11:26.3666210Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3666250Z     
2025-01-22T20:11:26.3666290Z         Parameters
2025-01-22T20:11:26.3666340Z         ----------
2025-01-22T20:11:26.3666380Z         key : label
2025-01-22T20:11:26.3666430Z     
2025-01-22T20:11:26.3666480Z         Returns
2025-01-22T20:11:26.3666520Z         -------
2025-01-22T20:11:26.3666620Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3666670Z     
2025-01-22T20:11:26.3666710Z         Examples
2025-01-22T20:11:26.3666750Z         --------
2025-01-22T20:11:26.3666820Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3666890Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3666930Z         1
2025-01-22T20:11:26.3666970Z     
2025-01-22T20:11:26.3667040Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3667110Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3667160Z         slice(1, 3, None)
2025-01-22T20:11:26.3667200Z     
2025-01-22T20:11:26.3667280Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3667340Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3667410Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3667450Z         """
2025-01-22T20:11:26.3667530Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3667570Z         try:
2025-01-22T20:11:26.3667640Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3667700Z         except KeyError as err:
2025-01-22T20:11:26.3667780Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3667860Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3667950Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3668110Z             ):
2025-01-22T20:11:26.3668180Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3668240Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3668290Z E           KeyError: 'cups'
2025-01-22T20:11:26.3668300Z 
2025-01-22T20:11:26.3668520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3668750Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_rad] _
2025-01-22T20:11:26.3668750Z 
2025-01-22T20:11:26.3668880Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3669050Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3669100Z        't046000', 't048000'],
2025-01-22T20:11:26.3669150Z       dtype='object')
2025-01-22T20:11:26.3669200Z key = 'cups'
2025-01-22T20:11:26.3669200Z 
2025-01-22T20:11:26.3669260Z     def get_loc(self, key):
2025-01-22T20:11:26.3669300Z         """
2025-01-22T20:11:26.3669430Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3669470Z     
2025-01-22T20:11:26.3669510Z         Parameters
2025-01-22T20:11:26.3669560Z         ----------
2025-01-22T20:11:26.3669600Z         key : label
2025-01-22T20:11:26.3669640Z     
2025-01-22T20:11:26.3669690Z         Returns
2025-01-22T20:11:26.3669730Z         -------
2025-01-22T20:11:26.3669830Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3669870Z     
2025-01-22T20:11:26.3669920Z         Examples
2025-01-22T20:11:26.3669960Z         --------
2025-01-22T20:11:26.3670030Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3670090Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3670200Z         1
2025-01-22T20:11:26.3670240Z     
2025-01-22T20:11:26.3670320Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3670380Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3670430Z         slice(1, 3, None)
2025-01-22T20:11:26.3670470Z     
2025-01-22T20:11:26.3670550Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3670620Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3670680Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3670720Z         """
2025-01-22T20:11:26.3670800Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3670870Z         try:
2025-01-22T20:11:26.3670950Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3670950Z 
2025-01-22T20:11:26.3671160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3671250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3671370Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3671420Z     ???
2025-01-22T20:11:26.3671530Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3671570Z     ???
2025-01-22T20:11:26.3671790Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3671830Z     ???
2025-01-22T20:11:26.3671920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3671930Z 
2025-01-22T20:11:26.3671970Z >   ???
2025-01-22T20:11:26.3672020Z E   KeyError: 'cups'
2025-01-22T20:11:26.3672020Z 
2025-01-22T20:11:26.3672120Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3672120Z 
2025-01-22T20:11:26.3672250Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3672250Z 
2025-01-22T20:11:26.3672430Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3672700Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3673310Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3673310Z 
2025-01-22T20:11:26.3673380Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3673420Z     def plasma(
2025-01-22T20:11:26.3673470Z         self,
2025-01-22T20:11:26.3673520Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3673560Z         config,
2025-01-22T20:11:26.3673600Z     ):
2025-01-22T20:11:26.3673690Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3673750Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3673750Z 
2025-01-22T20:11:26.3673850Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3673930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3674010Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3674070Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3674200Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3674270Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3674350Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3674400Z     return BasePlasma(
2025-01-22T20:11:26.3674460Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3674520Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3674590Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3674650Z     self.update(**kwargs)
2025-01-22T20:11:26.3674710Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3674800Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3674880Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3675030Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3675220Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3675350Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3675720Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3675800Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3675890Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3676020Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3676160Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3676300Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3676500Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3676640Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3676790Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3676870Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3677070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3677170Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3677360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3677430Z     return self.apply_standard()
2025-01-22T20:11:26.3677650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3677740Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3677980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3678070Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3678230Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3678400Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3678640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3678710Z     return self._get_value(key)
2025-01-22T20:11:26.3678920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3678980Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3679070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3679070Z 
2025-01-22T20:11:26.3679200Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3679370Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3679430Z        't046000', 't048000'],
2025-01-22T20:11:26.3679480Z       dtype='object')
2025-01-22T20:11:26.3679520Z key = 'cups'
2025-01-22T20:11:26.3679530Z 
2025-01-22T20:11:26.3679580Z     def get_loc(self, key):
2025-01-22T20:11:26.3679630Z         """
2025-01-22T20:11:26.3679770Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3679820Z     
2025-01-22T20:11:26.3679860Z         Parameters
2025-01-22T20:11:26.3679920Z         ----------
2025-01-22T20:11:26.3679970Z         key : label
2025-01-22T20:11:26.3680020Z     
2025-01-22T20:11:26.3680060Z         Returns
2025-01-22T20:11:26.3680100Z         -------
2025-01-22T20:11:26.3680200Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3680240Z     
2025-01-22T20:11:26.3680290Z         Examples
2025-01-22T20:11:26.3680330Z         --------
2025-01-22T20:11:26.3680400Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3680460Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3680590Z         1
2025-01-22T20:11:26.3680630Z     
2025-01-22T20:11:26.3680710Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3680780Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3680830Z         slice(1, 3, None)
2025-01-22T20:11:26.3680870Z     
2025-01-22T20:11:26.3680950Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3681020Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3681080Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3681120Z         """
2025-01-22T20:11:26.3681190Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3681240Z         try:
2025-01-22T20:11:26.3681310Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3681360Z         except KeyError as err:
2025-01-22T20:11:26.3681430Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3681510Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3681610Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3681650Z             ):
2025-01-22T20:11:26.3681720Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3681790Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3681850Z E           KeyError: 'cups'
2025-01-22T20:11:26.3681860Z 
2025-01-22T20:11:26.3682070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3682320Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_electron] _
2025-01-22T20:11:26.3682320Z 
2025-01-22T20:11:26.3682450Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3682620Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3682670Z        't046000', 't048000'],
2025-01-22T20:11:26.3682720Z       dtype='object')
2025-01-22T20:11:26.3682770Z key = 'cups'
2025-01-22T20:11:26.3682770Z 
2025-01-22T20:11:26.3682830Z     def get_loc(self, key):
2025-01-22T20:11:26.3683220Z         """
2025-01-22T20:11:26.3683350Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3683390Z     
2025-01-22T20:11:26.3683430Z         Parameters
2025-01-22T20:11:26.3683480Z         ----------
2025-01-22T20:11:26.3683520Z         key : label
2025-01-22T20:11:26.3683560Z     
2025-01-22T20:11:26.3683610Z         Returns
2025-01-22T20:11:26.3683650Z         -------
2025-01-22T20:11:26.3683750Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3683790Z     
2025-01-22T20:11:26.3683830Z         Examples
2025-01-22T20:11:26.3683870Z         --------
2025-01-22T20:11:26.3683940Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3684000Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3684040Z         1
2025-01-22T20:11:26.3684090Z     
2025-01-22T20:11:26.3684170Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3684230Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3684280Z         slice(1, 3, None)
2025-01-22T20:11:26.3684320Z     
2025-01-22T20:11:26.3684410Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3684470Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3684540Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3684580Z         """
2025-01-22T20:11:26.3684650Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3684700Z         try:
2025-01-22T20:11:26.3684770Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3684770Z 
2025-01-22T20:11:26.3684970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3685060Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3685160Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3685380Z     ???
2025-01-22T20:11:26.3685480Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3685530Z     ???
2025-01-22T20:11:26.3685740Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3685790Z     ???
2025-01-22T20:11:26.3685880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3685880Z 
2025-01-22T20:11:26.3685920Z >   ???
2025-01-22T20:11:26.3685980Z E   KeyError: 'cups'
2025-01-22T20:11:26.3685980Z 
2025-01-22T20:11:26.3686080Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3686080Z 
2025-01-22T20:11:26.3686210Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3686220Z 
2025-01-22T20:11:26.3686390Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3686650Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3687150Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3687150Z 
2025-01-22T20:11:26.3687260Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3687310Z     def plasma(
2025-01-22T20:11:26.3687350Z         self,
2025-01-22T20:11:26.3687410Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3687450Z         config,
2025-01-22T20:11:26.3687490Z     ):
2025-01-22T20:11:26.3687580Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3687650Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3687650Z 
2025-01-22T20:11:26.3687730Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3687820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3687900Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3688070Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3688200Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3688280Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3688360Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3688410Z     return BasePlasma(
2025-01-22T20:11:26.3688470Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3688530Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3688600Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3688660Z     self.update(**kwargs)
2025-01-22T20:11:26.3688720Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3688810Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3688900Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3688970Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3689160Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3689280Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3689450Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3689520Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3689630Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3689780Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3689930Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3690070Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3690270Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3690410Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3690650Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3690730Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3690940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3691030Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3691220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3691280Z     return self.apply_standard()
2025-01-22T20:11:26.3691500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3691590Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3691840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3691930Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3692100Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3692160Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3692380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3692430Z     return self._get_value(key)
2025-01-22T20:11:26.3692650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3692720Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3692810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3692810Z 
2025-01-22T20:11:26.3692940Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3693110Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3693160Z        't046000', 't048000'],
2025-01-22T20:11:26.3693210Z       dtype='object')
2025-01-22T20:11:26.3693260Z key = 'cups'
2025-01-22T20:11:26.3693270Z 
2025-01-22T20:11:26.3693320Z     def get_loc(self, key):
2025-01-22T20:11:26.3693440Z         """
2025-01-22T20:11:26.3693560Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3693610Z     
2025-01-22T20:11:26.3693650Z         Parameters
2025-01-22T20:11:26.3693700Z         ----------
2025-01-22T20:11:26.3693740Z         key : label
2025-01-22T20:11:26.3693780Z     
2025-01-22T20:11:26.3693830Z         Returns
2025-01-22T20:11:26.3693870Z         -------
2025-01-22T20:11:26.3693970Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3694010Z     
2025-01-22T20:11:26.3694050Z         Examples
2025-01-22T20:11:26.3694100Z         --------
2025-01-22T20:11:26.3694170Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3694230Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3694270Z         1
2025-01-22T20:11:26.3694310Z     
2025-01-22T20:11:26.3694400Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3694450Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3694510Z         slice(1, 3, None)
2025-01-22T20:11:26.3694550Z     
2025-01-22T20:11:26.3694630Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3699000Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3699160Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3699200Z         """
2025-01-22T20:11:26.3699280Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3699330Z         try:
2025-01-22T20:11:26.3699400Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3699450Z         except KeyError as err:
2025-01-22T20:11:26.3699520Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3699600Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3699690Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3700010Z             ):
2025-01-22T20:11:26.3700080Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3700150Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3700200Z E           KeyError: 'cups'
2025-01-22T20:11:26.3700200Z 
2025-01-22T20:11:26.3700420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3700680Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_boltzmann_factor] _
2025-01-22T20:11:26.3700690Z 
2025-01-22T20:11:26.3700820Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3700990Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3701040Z        't046000', 't048000'],
2025-01-22T20:11:26.3701090Z       dtype='object')
2025-01-22T20:11:26.3701140Z key = 'cups'
2025-01-22T20:11:26.3701140Z 
2025-01-22T20:11:26.3701200Z     def get_loc(self, key):
2025-01-22T20:11:26.3701240Z         """
2025-01-22T20:11:26.3701360Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3701400Z     
2025-01-22T20:11:26.3701450Z         Parameters
2025-01-22T20:11:26.3701490Z         ----------
2025-01-22T20:11:26.3701540Z         key : label
2025-01-22T20:11:26.3701580Z     
2025-01-22T20:11:26.3701620Z         Returns
2025-01-22T20:11:26.3701670Z         -------
2025-01-22T20:11:26.3701760Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3701800Z     
2025-01-22T20:11:26.3701850Z         Examples
2025-01-22T20:11:26.3701890Z         --------
2025-01-22T20:11:26.3701960Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3702020Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3702060Z         1
2025-01-22T20:11:26.3702110Z     
2025-01-22T20:11:26.3702180Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3702250Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3702300Z         slice(1, 3, None)
2025-01-22T20:11:26.3702430Z     
2025-01-22T20:11:26.3702510Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3702580Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3702640Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3702680Z         """
2025-01-22T20:11:26.3702750Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3702790Z         try:
2025-01-22T20:11:26.3702870Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3702870Z 
2025-01-22T20:11:26.3703060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3703150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3703250Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3703300Z     ???
2025-01-22T20:11:26.3703400Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3703440Z     ???
2025-01-22T20:11:26.3703650Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3703700Z     ???
2025-01-22T20:11:26.3703780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3703780Z 
2025-01-22T20:11:26.3703820Z >   ???
2025-01-22T20:11:26.3703870Z E   KeyError: 'cups'
2025-01-22T20:11:26.3703880Z 
2025-01-22T20:11:26.3703970Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3703970Z 
2025-01-22T20:11:26.3704100Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3704100Z 
2025-01-22T20:11:26.3704270Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3704530Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3705130Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3705140Z 
2025-01-22T20:11:26.3705200Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3705250Z     def plasma(
2025-01-22T20:11:26.3705290Z         self,
2025-01-22T20:11:26.3705350Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3705390Z         config,
2025-01-22T20:11:26.3705430Z     ):
2025-01-22T20:11:26.3705510Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3705580Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3705580Z 
2025-01-22T20:11:26.3705670Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3705760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3705830Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3705890Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3706020Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3706080Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3706170Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3706220Z     return BasePlasma(
2025-01-22T20:11:26.3706270Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3706330Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3706400Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3706450Z     self.update(**kwargs)
2025-01-22T20:11:26.3706510Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3706600Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3706680Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3706750Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3706940Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3707070Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3707800Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3707880Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3707970Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3708110Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3708240Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3708380Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3708580Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3708740Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3708890Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3708970Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3709180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3709270Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3709470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3709530Z     return self.apply_standard()
2025-01-22T20:11:26.3709750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3709840Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3710090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3710180Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3710350Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3710690Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3710930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3710990Z     return self._get_value(key)
2025-01-22T20:11:26.3711200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3711260Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3711340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3711350Z 
2025-01-22T20:11:26.3711480Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3711640Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3711700Z        't046000', 't048000'],
2025-01-22T20:11:26.3711750Z       dtype='object')
2025-01-22T20:11:26.3711800Z key = 'cups'
2025-01-22T20:11:26.3711800Z 
2025-01-22T20:11:26.3711850Z     def get_loc(self, key):
2025-01-22T20:11:26.3711900Z         """
2025-01-22T20:11:26.3712020Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3712060Z     
2025-01-22T20:11:26.3712110Z         Parameters
2025-01-22T20:11:26.3712150Z         ----------
2025-01-22T20:11:26.3712200Z         key : label
2025-01-22T20:11:26.3712240Z     
2025-01-22T20:11:26.3712280Z         Returns
2025-01-22T20:11:26.3712330Z         -------
2025-01-22T20:11:26.3712430Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3712470Z     
2025-01-22T20:11:26.3712510Z         Examples
2025-01-22T20:11:26.3712560Z         --------
2025-01-22T20:11:26.3712630Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3712690Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3712730Z         1
2025-01-22T20:11:26.3712770Z     
2025-01-22T20:11:26.3712850Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3712910Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3713040Z         slice(1, 3, None)
2025-01-22T20:11:26.3713080Z     
2025-01-22T20:11:26.3713160Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3713230Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3713290Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3713340Z         """
2025-01-22T20:11:26.3713410Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3713460Z         try:
2025-01-22T20:11:26.3713540Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3713590Z         except KeyError as err:
2025-01-22T20:11:26.3713660Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3713740Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3713830Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3713880Z             ):
2025-01-22T20:11:26.3713950Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3714010Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3714070Z E           KeyError: 'cups'
2025-01-22T20:11:26.3714080Z 
2025-01-22T20:11:26.3714290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3714550Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-partition_function] _
2025-01-22T20:11:26.3714560Z 
2025-01-22T20:11:26.3714680Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3714850Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3714890Z        't046000', 't048000'],
2025-01-22T20:11:26.3714950Z       dtype='object')
2025-01-22T20:11:26.3714990Z key = 'cups'
2025-01-22T20:11:26.3714990Z 
2025-01-22T20:11:26.3715100Z     def get_loc(self, key):
2025-01-22T20:11:26.3715150Z         """
2025-01-22T20:11:26.3715280Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3715330Z     
2025-01-22T20:11:26.3715370Z         Parameters
2025-01-22T20:11:26.3715420Z         ----------
2025-01-22T20:11:26.3715460Z         key : label
2025-01-22T20:11:26.3715510Z     
2025-01-22T20:11:26.3715550Z         Returns
2025-01-22T20:11:26.3715720Z         -------
2025-01-22T20:11:26.3715820Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3715870Z     
2025-01-22T20:11:26.3715910Z         Examples
2025-01-22T20:11:26.3715950Z         --------
2025-01-22T20:11:26.3716020Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3716080Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3716120Z         1
2025-01-22T20:11:26.3716170Z     
2025-01-22T20:11:26.3716240Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3716310Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3716360Z         slice(1, 3, None)
2025-01-22T20:11:26.3716410Z     
2025-01-22T20:11:26.3716490Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3716550Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3716610Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3716650Z         """
2025-01-22T20:11:26.3716730Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3716770Z         try:
2025-01-22T20:11:26.3716840Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3716840Z 
2025-01-22T20:11:26.3717030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3717120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3717220Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3717260Z     ???
2025-01-22T20:11:26.3717360Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3717410Z     ???
2025-01-22T20:11:26.3717730Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3717770Z     ???
2025-01-22T20:11:26.3717890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3717900Z 
2025-01-22T20:11:26.3717940Z >   ???
2025-01-22T20:11:26.3717990Z E   KeyError: 'cups'
2025-01-22T20:11:26.3717990Z 
2025-01-22T20:11:26.3718090Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3718090Z 
2025-01-22T20:11:26.3718220Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3718220Z 
2025-01-22T20:11:26.3718390Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3718650Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3719150Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3719160Z 
2025-01-22T20:11:26.3719220Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3719270Z     def plasma(
2025-01-22T20:11:26.3719310Z         self,
2025-01-22T20:11:26.3719360Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3719400Z         config,
2025-01-22T20:11:26.3719450Z     ):
2025-01-22T20:11:26.3719530Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3719600Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3719600Z 
2025-01-22T20:11:26.3719690Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3719770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3719960Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3720010Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3720140Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3720220Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3720300Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3720360Z     return BasePlasma(
2025-01-22T20:11:26.3720420Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3720480Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3720540Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3720590Z     self.update(**kwargs)
2025-01-22T20:11:26.3720650Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3720740Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3720830Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3720900Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3721080Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3721210Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3721370Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3721450Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3721540Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3721670Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3721800Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3721940Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3722150Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3722280Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3722420Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3722500Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3722700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3722890Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3723090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3723160Z     return self.apply_standard()
2025-01-22T20:11:26.3723390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3723480Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3723740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3723850Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3724020Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3724090Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3724300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3724360Z     return self._get_value(key)
2025-01-22T20:11:26.3724560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3724630Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3724720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3724720Z 
2025-01-22T20:11:26.3724850Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3725020Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3725070Z        't046000', 't048000'],
2025-01-22T20:11:26.3725130Z       dtype='object')
2025-01-22T20:11:26.3725180Z key = 'cups'
2025-01-22T20:11:26.3725260Z 
2025-01-22T20:11:26.3725330Z     def get_loc(self, key):
2025-01-22T20:11:26.3725380Z         """
2025-01-22T20:11:26.3725500Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3725540Z     
2025-01-22T20:11:26.3725600Z         Parameters
2025-01-22T20:11:26.3725640Z         ----------
2025-01-22T20:11:26.3725690Z         key : label
2025-01-22T20:11:26.3725730Z     
2025-01-22T20:11:26.3725770Z         Returns
2025-01-22T20:11:26.3725810Z         -------
2025-01-22T20:11:26.3725920Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3725960Z     
2025-01-22T20:11:26.3726010Z         Examples
2025-01-22T20:11:26.3726050Z         --------
2025-01-22T20:11:26.3726120Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3726180Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3726230Z         1
2025-01-22T20:11:26.3726270Z     
2025-01-22T20:11:26.3726350Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3726410Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3726460Z         slice(1, 3, None)
2025-01-22T20:11:26.3726510Z     
2025-01-22T20:11:26.3726590Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3726660Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3726720Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3726760Z         """
2025-01-22T20:11:26.3726830Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3726880Z         try:
2025-01-22T20:11:26.3726950Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3727000Z         except KeyError as err:
2025-01-22T20:11:26.3727070Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3727150Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3727240Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3727280Z             ):
2025-01-22T20:11:26.3727350Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3727410Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3727760Z E           KeyError: 'cups'
2025-01-22T20:11:26.3727760Z 
2025-01-22T20:11:26.3728000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3728260Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-excitation_energy] _
2025-01-22T20:11:26.3728260Z 
2025-01-22T20:11:26.3728390Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3728560Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3728600Z        't046000', 't048000'],
2025-01-22T20:11:26.3728650Z       dtype='object')
2025-01-22T20:11:26.3728700Z key = 'cups'
2025-01-22T20:11:26.3728700Z 
2025-01-22T20:11:26.3728750Z     def get_loc(self, key):
2025-01-22T20:11:26.3728800Z         """
2025-01-22T20:11:26.3728920Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3728980Z     
2025-01-22T20:11:26.3729020Z         Parameters
2025-01-22T20:11:26.3729070Z         ----------
2025-01-22T20:11:26.3729120Z         key : label
2025-01-22T20:11:26.3729170Z     
2025-01-22T20:11:26.3729210Z         Returns
2025-01-22T20:11:26.3729260Z         -------
2025-01-22T20:11:26.3729360Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3729410Z     
2025-01-22T20:11:26.3729460Z         Examples
2025-01-22T20:11:26.3729500Z         --------
2025-01-22T20:11:26.3729570Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3729630Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3729680Z         1
2025-01-22T20:11:26.3729720Z     
2025-01-22T20:11:26.3729800Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3729860Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3730220Z         slice(1, 3, None)
2025-01-22T20:11:26.3730260Z     
2025-01-22T20:11:26.3730350Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3730410Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3730480Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3730530Z         """
2025-01-22T20:11:26.3730600Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3730640Z         try:
2025-01-22T20:11:26.3730710Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3730720Z 
2025-01-22T20:11:26.3730910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3731000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3731100Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3731140Z     ???
2025-01-22T20:11:26.3731240Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3731290Z     ???
2025-01-22T20:11:26.3731500Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3731550Z     ???
2025-01-22T20:11:26.3731640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3731640Z 
2025-01-22T20:11:26.3731680Z >   ???
2025-01-22T20:11:26.3731730Z E   KeyError: 'cups'
2025-01-22T20:11:26.3731730Z 
2025-01-22T20:11:26.3731830Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3731830Z 
2025-01-22T20:11:26.3731960Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3731970Z 
2025-01-22T20:11:26.3732140Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3732400Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3732900Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3733000Z 
2025-01-22T20:11:26.3733070Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3733120Z     def plasma(
2025-01-22T20:11:26.3733160Z         self,
2025-01-22T20:11:26.3733210Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3733260Z         config,
2025-01-22T20:11:26.3733300Z     ):
2025-01-22T20:11:26.3733380Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3733450Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3733450Z 
2025-01-22T20:11:26.3733540Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3733620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3733700Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3733760Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3733890Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3733960Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3734040Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3734090Z     return BasePlasma(
2025-01-22T20:11:26.3734150Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3734210Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3734270Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3734320Z     self.update(**kwargs)
2025-01-22T20:11:26.3734380Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3734480Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3734560Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3734640Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3734820Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3735010Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3735180Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3735250Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3735350Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3735480Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3735610Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3735750Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3735960Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3736090Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3736230Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3736300Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3736510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3736610Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3736800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3736860Z     return self.apply_standard()
2025-01-22T20:11:26.3737080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3737170Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3737420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3737500Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3737670Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3737730Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3737940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3738080Z     return self._get_value(key)
2025-01-22T20:11:26.3738290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3738350Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3738430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3738440Z 
2025-01-22T20:11:26.3738560Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3738740Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3738780Z        't046000', 't048000'],
2025-01-22T20:11:26.3738830Z       dtype='object')
2025-01-22T20:11:26.3738880Z key = 'cups'
2025-01-22T20:11:26.3738880Z 
2025-01-22T20:11:26.3738930Z     def get_loc(self, key):
2025-01-22T20:11:26.3738980Z         """
2025-01-22T20:11:26.3739100Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3739150Z     
2025-01-22T20:11:26.3739200Z         Parameters
2025-01-22T20:11:26.3739240Z         ----------
2025-01-22T20:11:26.3739290Z         key : label
2025-01-22T20:11:26.3739330Z     
2025-01-22T20:11:26.3739370Z         Returns
2025-01-22T20:11:26.3739410Z         -------
2025-01-22T20:11:26.3739520Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3739560Z     
2025-01-22T20:11:26.3739600Z         Examples
2025-01-22T20:11:26.3739650Z         --------
2025-01-22T20:11:26.3739720Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3739780Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3739820Z         1
2025-01-22T20:11:26.3739860Z     
2025-01-22T20:11:26.3739940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3740010Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3740120Z         slice(1, 3, None)
2025-01-22T20:11:26.3740160Z     
2025-01-22T20:11:26.3740240Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3740310Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3740370Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3740420Z         """
2025-01-22T20:11:26.3740490Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3740530Z         try:
2025-01-22T20:11:26.3740600Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3740660Z         except KeyError as err:
2025-01-22T20:11:26.3740730Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3740800Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3740900Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3740940Z             ):
2025-01-22T20:11:26.3741010Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3741070Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3741130Z E           KeyError: 'cups'
2025-01-22T20:11:26.3741130Z 
2025-01-22T20:11:26.3741340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3741580Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] _
2025-01-22T20:11:26.3741580Z 
2025-01-22T20:11:26.3741710Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3741870Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3741920Z        't046000', 't048000'],
2025-01-22T20:11:26.3741970Z       dtype='object')
2025-01-22T20:11:26.3742010Z key = 'cups'
2025-01-22T20:11:26.3742010Z 
2025-01-22T20:11:26.3742070Z     def get_loc(self, key):
2025-01-22T20:11:26.3742110Z         """
2025-01-22T20:11:26.3742230Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3742280Z     
2025-01-22T20:11:26.3742380Z         Parameters
2025-01-22T20:11:26.3742430Z         ----------
2025-01-22T20:11:26.3742470Z         key : label
2025-01-22T20:11:26.3742510Z     
2025-01-22T20:11:26.3742560Z         Returns
2025-01-22T20:11:26.3742600Z         -------
2025-01-22T20:11:26.3742710Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3742750Z     
2025-01-22T20:11:26.3742800Z         Examples
2025-01-22T20:11:26.3742840Z         --------
2025-01-22T20:11:26.3742910Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3742970Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3743010Z         1
2025-01-22T20:11:26.3743050Z     
2025-01-22T20:11:26.3743130Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3743190Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3743240Z         slice(1, 3, None)
2025-01-22T20:11:26.3743290Z     
2025-01-22T20:11:26.3743370Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3743440Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3743510Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3743550Z         """
2025-01-22T20:11:26.3743620Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3743660Z         try:
2025-01-22T20:11:26.3743730Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3743730Z 
2025-01-22T20:11:26.3743930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3744010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3744120Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3744170Z     ???
2025-01-22T20:11:26.3744280Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3744380Z     ???
2025-01-22T20:11:26.3744600Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3744640Z     ???
2025-01-22T20:11:26.3744730Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3744730Z 
2025-01-22T20:11:26.3744770Z >   ???
2025-01-22T20:11:26.3744830Z E   KeyError: 'cups'
2025-01-22T20:11:26.3744830Z 
2025-01-22T20:11:26.3744930Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3744930Z 
2025-01-22T20:11:26.3749350Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3749400Z 
2025-01-22T20:11:26.3749620Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3749890Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3750380Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3750410Z 
2025-01-22T20:11:26.3750480Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3750520Z     def plasma(
2025-01-22T20:11:26.3750560Z         self,
2025-01-22T20:11:26.3750620Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3750660Z         config,
2025-01-22T20:11:26.3750700Z     ):
2025-01-22T20:11:26.3750780Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3750850Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3750850Z 
2025-01-22T20:11:26.3750940Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3751030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3751100Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3751160Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3751300Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3751370Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3751970Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3752030Z     return BasePlasma(
2025-01-22T20:11:26.3752080Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3752140Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3752200Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3752260Z     self.update(**kwargs)
2025-01-22T20:11:26.3752320Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3752420Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3752500Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3752570Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3752750Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3752870Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3753040Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3753110Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3753210Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3753340Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3753480Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3753610Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3753830Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3753970Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3754110Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3754180Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3754380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3754860Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3755060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3755130Z     return self.apply_standard()
2025-01-22T20:11:26.3755350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3755440Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3755890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3755990Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3756160Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3756220Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3756430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3756490Z     return self._get_value(key)
2025-01-22T20:11:26.3756720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3756770Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3756860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3756860Z 
2025-01-22T20:11:26.3756980Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3757160Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3757210Z        't046000', 't048000'],
2025-01-22T20:11:26.3757260Z       dtype='object')
2025-01-22T20:11:26.3757300Z key = 'cups'
2025-01-22T20:11:26.3757300Z 
2025-01-22T20:11:26.3757360Z     def get_loc(self, key):
2025-01-22T20:11:26.3757400Z         """
2025-01-22T20:11:26.3757520Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3757570Z     
2025-01-22T20:11:26.3757700Z         Parameters
2025-01-22T20:11:26.3757760Z         ----------
2025-01-22T20:11:26.3757800Z         key : label
2025-01-22T20:11:26.3757840Z     
2025-01-22T20:11:26.3757880Z         Returns
2025-01-22T20:11:26.3757930Z         -------
2025-01-22T20:11:26.3758030Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3758070Z     
2025-01-22T20:11:26.3758110Z         Examples
2025-01-22T20:11:26.3758160Z         --------
2025-01-22T20:11:26.3758230Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3758290Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3758330Z         1
2025-01-22T20:11:26.3758370Z     
2025-01-22T20:11:26.3758440Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3758510Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3758560Z         slice(1, 3, None)
2025-01-22T20:11:26.3758600Z     
2025-01-22T20:11:26.3758680Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3758750Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3758820Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3758870Z         """
2025-01-22T20:11:26.3758960Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3759000Z         try:
2025-01-22T20:11:26.3759070Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3759130Z         except KeyError as err:
2025-01-22T20:11:26.3759210Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3759280Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3759380Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3759420Z             ):
2025-01-22T20:11:26.3759490Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3759540Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3759690Z E           KeyError: 'cups'
2025-01-22T20:11:26.3759700Z 
2025-01-22T20:11:26.3759910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3760190Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] _
2025-01-22T20:11:26.3760190Z 
2025-01-22T20:11:26.3760320Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3760490Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3760540Z        't046000', 't048000'],
2025-01-22T20:11:26.3760590Z       dtype='object')
2025-01-22T20:11:26.3760630Z key = 'cups'
2025-01-22T20:11:26.3760630Z 
2025-01-22T20:11:26.3760690Z     def get_loc(self, key):
2025-01-22T20:11:26.3760730Z         """
2025-01-22T20:11:26.3760850Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3760890Z     
2025-01-22T20:11:26.3760950Z         Parameters
2025-01-22T20:11:26.3761000Z         ----------
2025-01-22T20:11:26.3761040Z         key : label
2025-01-22T20:11:26.3761080Z     
2025-01-22T20:11:26.3761120Z         Returns
2025-01-22T20:11:26.3761170Z         -------
2025-01-22T20:11:26.3761270Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3761300Z     
2025-01-22T20:11:26.3761350Z         Examples
2025-01-22T20:11:26.3761390Z         --------
2025-01-22T20:11:26.3761460Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3761520Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3761560Z         1
2025-01-22T20:11:26.3761600Z     
2025-01-22T20:11:26.3761670Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3761730Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3761790Z         slice(1, 3, None)
2025-01-22T20:11:26.3761830Z     
2025-01-22T20:11:26.3761910Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3761980Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3762100Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3762150Z         """
2025-01-22T20:11:26.3762220Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3762260Z         try:
2025-01-22T20:11:26.3762330Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3762340Z 
2025-01-22T20:11:26.3762530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3762610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3762720Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3762760Z     ???
2025-01-22T20:11:26.3762860Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3762910Z     ???
2025-01-22T20:11:26.3763120Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3763170Z     ???
2025-01-22T20:11:26.3763260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3763260Z 
2025-01-22T20:11:26.3763300Z >   ???
2025-01-22T20:11:26.3763350Z E   KeyError: 'cups'
2025-01-22T20:11:26.3763350Z 
2025-01-22T20:11:26.3763440Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3763450Z 
2025-01-22T20:11:26.3763570Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3763580Z 
2025-01-22T20:11:26.3763750Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3764000Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3764490Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3764550Z 
2025-01-22T20:11:26.3764620Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3764660Z     def plasma(
2025-01-22T20:11:26.3764720Z         self,
2025-01-22T20:11:26.3764770Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3764820Z         config,
2025-01-22T20:11:26.3764860Z     ):
2025-01-22T20:11:26.3764950Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3765020Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3765020Z 
2025-01-22T20:11:26.3765110Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3765200Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3765280Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3765340Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3765460Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3765540Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3765620Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3765670Z     return BasePlasma(
2025-01-22T20:11:26.3765730Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3765790Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3765850Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3765900Z     self.update(**kwargs)
2025-01-22T20:11:26.3765960Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3766060Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3766140Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3766210Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3766400Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3766510Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3766690Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3766760Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3766920Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3767060Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3767200Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3767330Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3767540Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3767680Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3767830Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3767900Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3768100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3768210Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3768410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3768480Z     return self.apply_standard()
2025-01-22T20:11:26.3768700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3768790Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3769030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3769120Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3769290Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3769350Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3769560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3769670Z     return self._get_value(key)
2025-01-22T20:11:26.3769880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3769940Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3770030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3770030Z 
2025-01-22T20:11:26.3770150Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3770380Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3770460Z        't046000', 't048000'],
2025-01-22T20:11:26.3770510Z       dtype='object')
2025-01-22T20:11:26.3770550Z key = 'cups'
2025-01-22T20:11:26.3770560Z 
2025-01-22T20:11:26.3770610Z     def get_loc(self, key):
2025-01-22T20:11:26.3770650Z         """
2025-01-22T20:11:26.3770780Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3770840Z     
2025-01-22T20:11:26.3770880Z         Parameters
2025-01-22T20:11:26.3770930Z         ----------
2025-01-22T20:11:26.3770980Z         key : label
2025-01-22T20:11:26.3771020Z     
2025-01-22T20:11:26.3771060Z         Returns
2025-01-22T20:11:26.3771110Z         -------
2025-01-22T20:11:26.3771210Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3771250Z     
2025-01-22T20:11:26.3771300Z         Examples
2025-01-22T20:11:26.3771340Z         --------
2025-01-22T20:11:26.3771410Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3771470Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3771510Z         1
2025-01-22T20:11:26.3771550Z     
2025-01-22T20:11:26.3771630Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3771690Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3771740Z         slice(1, 3, None)
2025-01-22T20:11:26.3771780Z     
2025-01-22T20:11:26.3771860Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3771920Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3772380Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3772430Z         """
2025-01-22T20:11:26.3772500Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3772540Z         try:
2025-01-22T20:11:26.3772620Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3772670Z         except KeyError as err:
2025-01-22T20:11:26.3772740Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3772820Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3772910Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3772950Z             ):
2025-01-22T20:11:26.3773020Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3773080Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3773140Z E           KeyError: 'cups'
2025-01-22T20:11:26.3773140Z 
2025-01-22T20:11:26.3773360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3773640Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] _
2025-01-22T20:11:26.3773650Z 
2025-01-22T20:11:26.3773780Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3773950Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3774000Z        't046000', 't048000'],
2025-01-22T20:11:26.3774040Z       dtype='object')
2025-01-22T20:11:26.3774090Z key = 'cups'
2025-01-22T20:11:26.3774090Z 
2025-01-22T20:11:26.3774140Z     def get_loc(self, key):
2025-01-22T20:11:26.3774180Z         """
2025-01-22T20:11:26.3774310Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3774780Z     
2025-01-22T20:11:26.3774840Z         Parameters
2025-01-22T20:11:26.3774890Z         ----------
2025-01-22T20:11:26.3774940Z         key : label
2025-01-22T20:11:26.3774980Z     
2025-01-22T20:11:26.3775020Z         Returns
2025-01-22T20:11:26.3775060Z         -------
2025-01-22T20:11:26.3775160Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3775200Z     
2025-01-22T20:11:26.3775250Z         Examples
2025-01-22T20:11:26.3775290Z         --------
2025-01-22T20:11:26.3775360Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3775430Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3775470Z         1
2025-01-22T20:11:26.3775520Z     
2025-01-22T20:11:26.3775590Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3775650Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3775700Z         slice(1, 3, None)
2025-01-22T20:11:26.3775750Z     
2025-01-22T20:11:26.3775820Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3775890Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3775950Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3776000Z         """
2025-01-22T20:11:26.3776070Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3776110Z         try:
2025-01-22T20:11:26.3776180Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3776190Z 
2025-01-22T20:11:26.3776380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3776470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3776570Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3776610Z     ???
2025-01-22T20:11:26.3776710Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3776750Z     ???
2025-01-22T20:11:26.3776980Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3777030Z     ???
2025-01-22T20:11:26.3777110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3777210Z 
2025-01-22T20:11:26.3777260Z >   ???
2025-01-22T20:11:26.3777310Z E   KeyError: 'cups'
2025-01-22T20:11:26.3777310Z 
2025-01-22T20:11:26.3777410Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3777410Z 
2025-01-22T20:11:26.3777540Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3777540Z 
2025-01-22T20:11:26.3777710Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3777980Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3778460Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3778470Z 
2025-01-22T20:11:26.3778540Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3778590Z     def plasma(
2025-01-22T20:11:26.3778630Z         self,
2025-01-22T20:11:26.3778680Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3778730Z         config,
2025-01-22T20:11:26.3778770Z     ):
2025-01-22T20:11:26.3778850Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3778920Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3778920Z 
2025-01-22T20:11:26.3779010Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3779100Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3779170Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3779230Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3779360Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3779490Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3779580Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3779630Z     return BasePlasma(
2025-01-22T20:11:26.3779690Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3779750Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3779810Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3779860Z     self.update(**kwargs)
2025-01-22T20:11:26.3779920Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3780010Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3780090Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3780160Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3780360Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3780480Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3780650Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3780720Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3780830Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3780960Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3781110Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3781250Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3781470Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3781610Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3781750Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3781820Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3782020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3782110Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3782310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3782460Z     return self.apply_standard()
2025-01-22T20:11:26.3782690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3782790Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3783040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3783130Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3783300Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3783360Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3783570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3783630Z     return self._get_value(key)
2025-01-22T20:11:26.3783850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3783910Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3784000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3784010Z 
2025-01-22T20:11:26.3784130Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3784300Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3784350Z        't046000', 't048000'],
2025-01-22T20:11:26.3784410Z       dtype='object')
2025-01-22T20:11:26.3784450Z key = 'cups'
2025-01-22T20:11:26.3784460Z 
2025-01-22T20:11:26.3784510Z     def get_loc(self, key):
2025-01-22T20:11:26.3784550Z         """
2025-01-22T20:11:26.3784670Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3784780Z     
2025-01-22T20:11:26.3784830Z         Parameters
2025-01-22T20:11:26.3784880Z         ----------
2025-01-22T20:11:26.3784940Z         key : label
2025-01-22T20:11:26.3784990Z     
2025-01-22T20:11:26.3785040Z         Returns
2025-01-22T20:11:26.3785090Z         -------
2025-01-22T20:11:26.3785190Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3785230Z     
2025-01-22T20:11:26.3785270Z         Examples
2025-01-22T20:11:26.3785310Z         --------
2025-01-22T20:11:26.3785390Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3785440Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3785490Z         1
2025-01-22T20:11:26.3785530Z     
2025-01-22T20:11:26.3785610Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3785670Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3785720Z         slice(1, 3, None)
2025-01-22T20:11:26.3785750Z     
2025-01-22T20:11:26.3785840Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3785900Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3785970Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3786020Z         """
2025-01-22T20:11:26.3786110Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3786150Z         try:
2025-01-22T20:11:26.3786220Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3786280Z         except KeyError as err:
2025-01-22T20:11:26.3786340Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3786420Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3786510Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3786570Z             ):
2025-01-22T20:11:26.3786630Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3786700Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3786750Z E           KeyError: 'cups'
2025-01-22T20:11:26.3786760Z 
2025-01-22T20:11:26.3786980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3787350Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-atomic_mass] _
2025-01-22T20:11:26.3787350Z 
2025-01-22T20:11:26.3787490Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3787660Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3787710Z        't046000', 't048000'],
2025-01-22T20:11:26.3787760Z       dtype='object')
2025-01-22T20:11:26.3787800Z key = 'cups'
2025-01-22T20:11:26.3787800Z 
2025-01-22T20:11:26.3787860Z     def get_loc(self, key):
2025-01-22T20:11:26.3787900Z         """
2025-01-22T20:11:26.3788030Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3788070Z     
2025-01-22T20:11:26.3788120Z         Parameters
2025-01-22T20:11:26.3788160Z         ----------
2025-01-22T20:11:26.3788210Z         key : label
2025-01-22T20:11:26.3788250Z     
2025-01-22T20:11:26.3788300Z         Returns
2025-01-22T20:11:26.3788340Z         -------
2025-01-22T20:11:26.3788440Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3788480Z     
2025-01-22T20:11:26.3788520Z         Examples
2025-01-22T20:11:26.3788570Z         --------
2025-01-22T20:11:26.3788640Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3788700Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3788740Z         1
2025-01-22T20:11:26.3788780Z     
2025-01-22T20:11:26.3788850Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3788920Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3788970Z         slice(1, 3, None)
2025-01-22T20:11:26.3789010Z     
2025-01-22T20:11:26.3789090Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3789230Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3789300Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3789350Z         """
2025-01-22T20:11:26.3789420Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3789460Z         try:
2025-01-22T20:11:26.3789530Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3789540Z 
2025-01-22T20:11:26.3789730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3789830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3789930Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3789980Z     ???
2025-01-22T20:11:26.3790080Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3790130Z     ???
2025-01-22T20:11:26.3790350Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3790400Z     ???
2025-01-22T20:11:26.3790480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3790490Z 
2025-01-22T20:11:26.3790530Z >   ???
2025-01-22T20:11:26.3790580Z E   KeyError: 'cups'
2025-01-22T20:11:26.3790590Z 
2025-01-22T20:11:26.3790680Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3790680Z 
2025-01-22T20:11:26.3790810Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3790820Z 
2025-01-22T20:11:26.3790980Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3791240Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3791750Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3791770Z 
2025-01-22T20:11:26.3791830Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3792430Z     def plasma(
2025-01-22T20:11:26.3792470Z         self,
2025-01-22T20:11:26.3792530Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3792570Z         config,
2025-01-22T20:11:26.3792610Z     ):
2025-01-22T20:11:26.3792700Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3792770Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3792770Z 
2025-01-22T20:11:26.3792860Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3792940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3793010Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3793070Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3793200Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3793270Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3793350Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3793400Z     return BasePlasma(
2025-01-22T20:11:26.3793460Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3793520Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3793580Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3793630Z     self.update(**kwargs)
2025-01-22T20:11:26.3793690Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3793780Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3793870Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3793940Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3794120Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3794240Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3794400Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3794810Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3794910Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3795050Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3795180Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3795320Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3795520Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3795660Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3795920Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3796000Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3796200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3796300Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3796490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3796560Z     return self.apply_standard()
2025-01-22T20:11:26.3796790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3796880Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3797130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3797220Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3797390Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3797450Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3797660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3797720Z     return self._get_value(key)
2025-01-22T20:11:26.3797930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3798110Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3798200Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3798200Z 
2025-01-22T20:11:26.3798320Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3798490Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3798540Z        't046000', 't048000'],
2025-01-22T20:11:26.3798590Z       dtype='object')
2025-01-22T20:11:26.3798630Z key = 'cups'
2025-01-22T20:11:26.3798640Z 
2025-01-22T20:11:26.3798690Z     def get_loc(self, key):
2025-01-22T20:11:26.3798740Z         """
2025-01-22T20:11:26.3802710Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3802800Z     
2025-01-22T20:11:26.3802880Z         Parameters
2025-01-22T20:11:26.3802930Z         ----------
2025-01-22T20:11:26.3802970Z         key : label
2025-01-22T20:11:26.3803020Z     
2025-01-22T20:11:26.3803070Z         Returns
2025-01-22T20:11:26.3803110Z         -------
2025-01-22T20:11:26.3803220Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3803260Z     
2025-01-22T20:11:26.3803310Z         Examples
2025-01-22T20:11:26.3803350Z         --------
2025-01-22T20:11:26.3803420Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3803480Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3803520Z         1
2025-01-22T20:11:26.3803560Z     
2025-01-22T20:11:26.3803630Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3803700Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3803760Z         slice(1, 3, None)
2025-01-22T20:11:26.3803800Z     
2025-01-22T20:11:26.3803880Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3804170Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3804240Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3804300Z         """
2025-01-22T20:11:26.3804370Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3804420Z         try:
2025-01-22T20:11:26.3804490Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3804550Z         except KeyError as err:
2025-01-22T20:11:26.3804620Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3804690Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3804780Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3804830Z             ):
2025-01-22T20:11:26.3804900Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3804960Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3805010Z E           KeyError: 'cups'
2025-01-22T20:11:26.3805020Z 
2025-01-22T20:11:26.3805230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3805490Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ionization_data] _
2025-01-22T20:11:26.3805500Z 
2025-01-22T20:11:26.3805630Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3805800Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3805850Z        't046000', 't048000'],
2025-01-22T20:11:26.3805900Z       dtype='object')
2025-01-22T20:11:26.3805950Z key = 'cups'
2025-01-22T20:11:26.3805950Z 
2025-01-22T20:11:26.3806000Z     def get_loc(self, key):
2025-01-22T20:11:26.3806050Z         """
2025-01-22T20:11:26.3806170Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3806210Z     
2025-01-22T20:11:26.3806260Z         Parameters
2025-01-22T20:11:26.3806310Z         ----------
2025-01-22T20:11:26.3806350Z         key : label
2025-01-22T20:11:26.3806390Z     
2025-01-22T20:11:26.3806440Z         Returns
2025-01-22T20:11:26.3806580Z         -------
2025-01-22T20:11:26.3806680Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3806730Z     
2025-01-22T20:11:26.3806770Z         Examples
2025-01-22T20:11:26.3806810Z         --------
2025-01-22T20:11:26.3806880Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3806940Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3806990Z         1
2025-01-22T20:11:26.3807030Z     
2025-01-22T20:11:26.3807100Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3807160Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3807210Z         slice(1, 3, None)
2025-01-22T20:11:26.3807250Z     
2025-01-22T20:11:26.3807330Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3807390Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3807460Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3807500Z         """
2025-01-22T20:11:26.3807580Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3807620Z         try:
2025-01-22T20:11:26.3807690Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3807690Z 
2025-01-22T20:11:26.3807890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3807980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3808080Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3808130Z     ???
2025-01-22T20:11:26.3808230Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3808280Z     ???
2025-01-22T20:11:26.3808490Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3808540Z     ???
2025-01-22T20:11:26.3808700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3808700Z 
2025-01-22T20:11:26.3808750Z >   ???
2025-01-22T20:11:26.3808800Z E   KeyError: 'cups'
2025-01-22T20:11:26.3808810Z 
2025-01-22T20:11:26.3808900Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3808900Z 
2025-01-22T20:11:26.3809060Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3809070Z 
2025-01-22T20:11:26.3809270Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3809550Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3810080Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3810090Z 
2025-01-22T20:11:26.3810160Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3810200Z     def plasma(
2025-01-22T20:11:26.3810250Z         self,
2025-01-22T20:11:26.3810310Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3810350Z         config,
2025-01-22T20:11:26.3810400Z     ):
2025-01-22T20:11:26.3810490Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3810560Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3810560Z 
2025-01-22T20:11:26.3810650Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3810750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3810830Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3810890Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3811020Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3811090Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3811170Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3811220Z     return BasePlasma(
2025-01-22T20:11:26.3811290Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3811460Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3811530Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3811580Z     self.update(**kwargs)
2025-01-22T20:11:26.3811640Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3811730Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3811810Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3811890Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3812070Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3812190Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3812350Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3812420Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3812520Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3812660Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3812790Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3812930Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3813130Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3813270Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3813410Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3813480Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3813680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3813770Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3814030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3814090Z     return self.apply_standard()
2025-01-22T20:11:26.3814330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3814410Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3814660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3814750Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3814920Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3814990Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3815190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3815250Z     return self._get_value(key)
2025-01-22T20:11:26.3815460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3815530Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3815620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3815620Z 
2025-01-22T20:11:26.3815750Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3815920Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3815970Z        't046000', 't048000'],
2025-01-22T20:11:26.3816020Z       dtype='object')
2025-01-22T20:11:26.3816060Z key = 'cups'
2025-01-22T20:11:26.3816060Z 
2025-01-22T20:11:26.3816120Z     def get_loc(self, key):
2025-01-22T20:11:26.3816160Z         """
2025-01-22T20:11:26.3816280Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3816320Z     
2025-01-22T20:11:26.3816370Z         Parameters
2025-01-22T20:11:26.3816410Z         ----------
2025-01-22T20:11:26.3816460Z         key : label
2025-01-22T20:11:26.3816500Z     
2025-01-22T20:11:26.3816670Z         Returns
2025-01-22T20:11:26.3816710Z         -------
2025-01-22T20:11:26.3816810Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3816860Z     
2025-01-22T20:11:26.3816900Z         Examples
2025-01-22T20:11:26.3816940Z         --------
2025-01-22T20:11:26.3817020Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3817080Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3817120Z         1
2025-01-22T20:11:26.3817160Z     
2025-01-22T20:11:26.3817240Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3817300Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3817350Z         slice(1, 3, None)
2025-01-22T20:11:26.3817390Z     
2025-01-22T20:11:26.3817470Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3817530Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3817600Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3817650Z         """
2025-01-22T20:11:26.3817720Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3817770Z         try:
2025-01-22T20:11:26.3817840Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3817890Z         except KeyError as err:
2025-01-22T20:11:26.3817960Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3818030Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3818130Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3818170Z             ):
2025-01-22T20:11:26.3818230Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3818290Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3818340Z E           KeyError: 'cups'
2025-01-22T20:11:26.3818350Z 
2025-01-22T20:11:26.3818560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3819140Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] _
2025-01-22T20:11:26.3819160Z 
2025-01-22T20:11:26.3819280Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3819460Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3819510Z        't046000', 't048000'],
2025-01-22T20:11:26.3819550Z       dtype='object')
2025-01-22T20:11:26.3819600Z key = 'cups'
2025-01-22T20:11:26.3819600Z 
2025-01-22T20:11:26.3819650Z     def get_loc(self, key):
2025-01-22T20:11:26.3819700Z         """
2025-01-22T20:11:26.3819820Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3819860Z     
2025-01-22T20:11:26.3819910Z         Parameters
2025-01-22T20:11:26.3819950Z         ----------
2025-01-22T20:11:26.3820000Z         key : label
2025-01-22T20:11:26.3820040Z     
2025-01-22T20:11:26.3820080Z         Returns
2025-01-22T20:11:26.3820120Z         -------
2025-01-22T20:11:26.3820230Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3820270Z     
2025-01-22T20:11:26.3820310Z         Examples
2025-01-22T20:11:26.3820360Z         --------
2025-01-22T20:11:26.3820430Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3820480Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3820530Z         1
2025-01-22T20:11:26.3820570Z     
2025-01-22T20:11:26.3820640Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3820700Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3820750Z         slice(1, 3, None)
2025-01-22T20:11:26.3820790Z     
2025-01-22T20:11:26.3820870Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3820940Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3821000Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3821050Z         """
2025-01-22T20:11:26.3821130Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3821260Z         try:
2025-01-22T20:11:26.3821340Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3821340Z 
2025-01-22T20:11:26.3821540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3821630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3821740Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3821780Z     ???
2025-01-22T20:11:26.3821880Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3821920Z     ???
2025-01-22T20:11:26.3822130Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3822170Z     ???
2025-01-22T20:11:26.3822260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3822270Z 
2025-01-22T20:11:26.3822310Z >   ???
2025-01-22T20:11:26.3822370Z E   KeyError: 'cups'
2025-01-22T20:11:26.3822370Z 
2025-01-22T20:11:26.3822470Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3822470Z 
2025-01-22T20:11:26.3822600Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3822600Z 
2025-01-22T20:11:26.3822770Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3823030Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3823540Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3823540Z 
2025-01-22T20:11:26.3823600Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3823710Z     def plasma(
2025-01-22T20:11:26.3823760Z         self,
2025-01-22T20:11:26.3823820Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3823870Z         config,
2025-01-22T20:11:26.3823910Z     ):
2025-01-22T20:11:26.3823990Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3824060Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3824060Z 
2025-01-22T20:11:26.3824160Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3824240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3824320Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3824370Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3824500Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3824570Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3824660Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3824720Z     return BasePlasma(
2025-01-22T20:11:26.3824780Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3824850Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3824910Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3824970Z     self.update(**kwargs)
2025-01-22T20:11:26.3825030Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3825130Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3825210Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3825280Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3825470Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3825580Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3825750Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3825820Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3825920Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3826050Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3826250Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3826390Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3826600Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3826740Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3826890Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3826960Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3827170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3827260Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3827450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3827510Z     return self.apply_standard()
2025-01-22T20:11:26.3827740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3827830Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3828070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3828160Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3828340Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3828410Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3828620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3828680Z     return self._get_value(key)
2025-01-22T20:11:26.3828890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3829010Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3829100Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3829110Z 
2025-01-22T20:11:26.3829230Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3829400Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3829450Z        't046000', 't048000'],
2025-01-22T20:11:26.3829500Z       dtype='object')
2025-01-22T20:11:26.3829540Z key = 'cups'
2025-01-22T20:11:26.3829540Z 
2025-01-22T20:11:26.3829600Z     def get_loc(self, key):
2025-01-22T20:11:26.3829640Z         """
2025-01-22T20:11:26.3829760Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3829800Z     
2025-01-22T20:11:26.3829850Z         Parameters
2025-01-22T20:11:26.3829900Z         ----------
2025-01-22T20:11:26.3829940Z         key : label
2025-01-22T20:11:26.3829980Z     
2025-01-22T20:11:26.3830030Z         Returns
2025-01-22T20:11:26.3830070Z         -------
2025-01-22T20:11:26.3830180Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3830220Z     
2025-01-22T20:11:26.3830270Z         Examples
2025-01-22T20:11:26.3830310Z         --------
2025-01-22T20:11:26.3830380Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3830440Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3830480Z         1
2025-01-22T20:11:26.3830520Z     
2025-01-22T20:11:26.3830600Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3830660Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3830710Z         slice(1, 3, None)
2025-01-22T20:11:26.3830760Z     
2025-01-22T20:11:26.3830830Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3830900Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3830970Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3831010Z         """
2025-01-22T20:11:26.3831090Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3831190Z         try:
2025-01-22T20:11:26.3831260Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3831320Z         except KeyError as err:
2025-01-22T20:11:26.3831390Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3831460Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3831560Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3831600Z             ):
2025-01-22T20:11:26.3831670Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3831730Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3831780Z E           KeyError: 'cups'
2025-01-22T20:11:26.3831780Z 
2025-01-22T20:11:26.3831990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3832250Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] _
2025-01-22T20:11:26.3832260Z 
2025-01-22T20:11:26.3832390Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3832550Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3832600Z        't046000', 't048000'],
2025-01-22T20:11:26.3832650Z       dtype='object')
2025-01-22T20:11:26.3832690Z key = 'cups'
2025-01-22T20:11:26.3832700Z 
2025-01-22T20:11:26.3832750Z     def get_loc(self, key):
2025-01-22T20:11:26.3832790Z         """
2025-01-22T20:11:26.3832910Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3832950Z     
2025-01-22T20:11:26.3833000Z         Parameters
2025-01-22T20:11:26.3833050Z         ----------
2025-01-22T20:11:26.3833090Z         key : label
2025-01-22T20:11:26.3833130Z     
2025-01-22T20:11:26.3833220Z         Returns
2025-01-22T20:11:26.3833270Z         -------
2025-01-22T20:11:26.3833370Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3833420Z     
2025-01-22T20:11:26.3833460Z         Examples
2025-01-22T20:11:26.3833500Z         --------
2025-01-22T20:11:26.3833580Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3833630Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3833680Z         1
2025-01-22T20:11:26.3833720Z     
2025-01-22T20:11:26.3833800Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3833860Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3833910Z         slice(1, 3, None)
2025-01-22T20:11:26.3833950Z     
2025-01-22T20:11:26.3834030Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3834090Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3834160Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3834200Z         """
2025-01-22T20:11:26.3834280Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3834320Z         try:
2025-01-22T20:11:26.3834390Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3834400Z 
2025-01-22T20:11:26.3834590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3834670Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3834780Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3834820Z     ???
2025-01-22T20:11:26.3834920Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3834960Z     ???
2025-01-22T20:11:26.3835170Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3835210Z     ???
2025-01-22T20:11:26.3835300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3835310Z 
2025-01-22T20:11:26.3835350Z >   ???
2025-01-22T20:11:26.3835400Z E   KeyError: 'cups'
2025-01-22T20:11:26.3835400Z 
2025-01-22T20:11:26.3836060Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3836060Z 
2025-01-22T20:11:26.3836200Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3836200Z 
2025-01-22T20:11:26.3836370Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3836620Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3837110Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3837110Z 
2025-01-22T20:11:26.3837170Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3837230Z     def plasma(
2025-01-22T20:11:26.3837270Z         self,
2025-01-22T20:11:26.3837330Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3837390Z         config,
2025-01-22T20:11:26.3837440Z     ):
2025-01-22T20:11:26.3837520Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3837590Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3837590Z 
2025-01-22T20:11:26.3837680Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3837770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3837860Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3837920Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3838060Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3838130Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3838210Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3838270Z     return BasePlasma(
2025-01-22T20:11:26.3838810Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3838880Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3838950Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3839020Z     self.update(**kwargs)
2025-01-22T20:11:26.3839080Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3839170Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3839250Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3839330Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3839510Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3839630Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3839800Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3839870Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3839970Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3840110Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3840250Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3840400Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3840610Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3840740Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3840890Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3840960Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3841170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3841260Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3841450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3841520Z     return self.apply_standard()
2025-01-22T20:11:26.3841750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3841950Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3842200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3842290Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3842460Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3842520Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3842730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3842790Z     return self._get_value(key)
2025-01-22T20:11:26.3843000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3843070Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3843160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3843160Z 
2025-01-22T20:11:26.3843280Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3843450Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3843500Z        't046000', 't048000'],
2025-01-22T20:11:26.3843560Z       dtype='object')
2025-01-22T20:11:26.3843600Z key = 'cups'
2025-01-22T20:11:26.3843610Z 
2025-01-22T20:11:26.3843660Z     def get_loc(self, key):
2025-01-22T20:11:26.3843700Z         """
2025-01-22T20:11:26.3843830Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3843880Z     
2025-01-22T20:11:26.3843930Z         Parameters
2025-01-22T20:11:26.3843980Z         ----------
2025-01-22T20:11:26.3844030Z         key : label
2025-01-22T20:11:26.3844140Z     
2025-01-22T20:11:26.3844190Z         Returns
2025-01-22T20:11:26.3844230Z         -------
2025-01-22T20:11:26.3844330Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3844380Z     
2025-01-22T20:11:26.3844420Z         Examples
2025-01-22T20:11:26.3844470Z         --------
2025-01-22T20:11:26.3844540Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3844600Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3844640Z         1
2025-01-22T20:11:26.3844680Z     
2025-01-22T20:11:26.3844760Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3844830Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3844880Z         slice(1, 3, None)
2025-01-22T20:11:26.3844920Z     
2025-01-22T20:11:26.3845000Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3845070Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3845130Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3845180Z         """
2025-01-22T20:11:26.3845260Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3845300Z         try:
2025-01-22T20:11:26.3845380Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3845430Z         except KeyError as err:
2025-01-22T20:11:26.3845500Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3845580Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3845670Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3845710Z             ):
2025-01-22T20:11:26.3845780Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3845830Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3845890Z E           KeyError: 'cups'
2025-01-22T20:11:26.3845890Z 
2025-01-22T20:11:26.3846110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3846340Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] _
2025-01-22T20:11:26.3846340Z 
2025-01-22T20:11:26.3846470Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3846690Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3846750Z        't046000', 't048000'],
2025-01-22T20:11:26.3846790Z       dtype='object')
2025-01-22T20:11:26.3846840Z key = 'cups'
2025-01-22T20:11:26.3846840Z 
2025-01-22T20:11:26.3846890Z     def get_loc(self, key):
2025-01-22T20:11:26.3846930Z         """
2025-01-22T20:11:26.3847060Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3847110Z     
2025-01-22T20:11:26.3847150Z         Parameters
2025-01-22T20:11:26.3847200Z         ----------
2025-01-22T20:11:26.3847250Z         key : label
2025-01-22T20:11:26.3847290Z     
2025-01-22T20:11:26.3847330Z         Returns
2025-01-22T20:11:26.3847380Z         -------
2025-01-22T20:11:26.3847490Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3847530Z     
2025-01-22T20:11:26.3847580Z         Examples
2025-01-22T20:11:26.3847620Z         --------
2025-01-22T20:11:26.3847690Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3847750Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3847800Z         1
2025-01-22T20:11:26.3847840Z     
2025-01-22T20:11:26.3847910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3847970Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3851750Z         slice(1, 3, None)
2025-01-22T20:11:26.3851860Z     
2025-01-22T20:11:26.3851960Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3852020Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3852080Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3852130Z         """
2025-01-22T20:11:26.3852200Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3852480Z         try:
2025-01-22T20:11:26.3852560Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3852560Z 
2025-01-22T20:11:26.3852760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3852850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3852960Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3853000Z     ???
2025-01-22T20:11:26.3853100Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3853140Z     ???
2025-01-22T20:11:26.3853350Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3853400Z     ???
2025-01-22T20:11:26.3853490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3853500Z 
2025-01-22T20:11:26.3853540Z >   ???
2025-01-22T20:11:26.3853590Z E   KeyError: 'cups'
2025-01-22T20:11:26.3853590Z 
2025-01-22T20:11:26.3853690Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3853700Z 
2025-01-22T20:11:26.3853830Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3853830Z 
2025-01-22T20:11:26.3854000Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3854260Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3854750Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3854750Z 
2025-01-22T20:11:26.3854820Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3854870Z     def plasma(
2025-01-22T20:11:26.3854910Z         self,
2025-01-22T20:11:26.3854970Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3855010Z         config,
2025-01-22T20:11:26.3855050Z     ):
2025-01-22T20:11:26.3855220Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3855290Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3855290Z 
2025-01-22T20:11:26.3855380Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3855470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3855540Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3855600Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3855730Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3855800Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3855870Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3855920Z     return BasePlasma(
2025-01-22T20:11:26.3855980Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3856040Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3856100Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3856170Z     self.update(**kwargs)
2025-01-22T20:11:26.3856220Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3856320Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3856410Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3856480Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3856670Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3856790Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3856960Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3857030Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3857120Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3857250Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3857440Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3857580Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3857790Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3857940Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3858080Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3858150Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3858360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3858460Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3858650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3858710Z     return self.apply_standard()
2025-01-22T20:11:26.3858930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3859030Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3859280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3859370Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3859540Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3859600Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3859810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3859870Z     return self._get_value(key)
2025-01-22T20:11:26.3860090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3860150Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3860240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3860240Z 
2025-01-22T20:11:26.3860670Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3860840Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3860900Z        't046000', 't048000'],
2025-01-22T20:11:26.3860950Z       dtype='object')
2025-01-22T20:11:26.3860990Z key = 'cups'
2025-01-22T20:11:26.3861000Z 
2025-01-22T20:11:26.3861050Z     def get_loc(self, key):
2025-01-22T20:11:26.3861090Z         """
2025-01-22T20:11:26.3861220Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3861260Z     
2025-01-22T20:11:26.3861310Z         Parameters
2025-01-22T20:11:26.3861360Z         ----------
2025-01-22T20:11:26.3861400Z         key : label
2025-01-22T20:11:26.3861450Z     
2025-01-22T20:11:26.3861490Z         Returns
2025-01-22T20:11:26.3861540Z         -------
2025-01-22T20:11:26.3861650Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3861690Z     
2025-01-22T20:11:26.3861740Z         Examples
2025-01-22T20:11:26.3861780Z         --------
2025-01-22T20:11:26.3861860Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3861920Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3861960Z         1
2025-01-22T20:11:26.3862000Z     
2025-01-22T20:11:26.3862080Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3862140Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3862190Z         slice(1, 3, None)
2025-01-22T20:11:26.3862230Z     
2025-01-22T20:11:26.3862320Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3862380Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3862440Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3862490Z         """
2025-01-22T20:11:26.3862560Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3863000Z         try:
2025-01-22T20:11:26.3863080Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3863140Z         except KeyError as err:
2025-01-22T20:11:26.3863210Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3863280Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3863370Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3863420Z             ):
2025-01-22T20:11:26.3863480Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3863540Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3863590Z E           KeyError: 'cups'
2025-01-22T20:11:26.3863590Z 
2025-01-22T20:11:26.3863810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3864060Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-metastability] _
2025-01-22T20:11:26.3864070Z 
2025-01-22T20:11:26.3864210Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3864380Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3864430Z        't046000', 't048000'],
2025-01-22T20:11:26.3864480Z       dtype='object')
2025-01-22T20:11:26.3864520Z key = 'cups'
2025-01-22T20:11:26.3864530Z 
2025-01-22T20:11:26.3864580Z     def get_loc(self, key):
2025-01-22T20:11:26.3864620Z         """
2025-01-22T20:11:26.3864740Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3864780Z     
2025-01-22T20:11:26.3864830Z         Parameters
2025-01-22T20:11:26.3864870Z         ----------
2025-01-22T20:11:26.3864920Z         key : label
2025-01-22T20:11:26.3864960Z     
2025-01-22T20:11:26.3865000Z         Returns
2025-01-22T20:11:26.3865040Z         -------
2025-01-22T20:11:26.3865140Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3865190Z     
2025-01-22T20:11:26.3865230Z         Examples
2025-01-22T20:11:26.3865360Z         --------
2025-01-22T20:11:26.3865430Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3865490Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3865530Z         1
2025-01-22T20:11:26.3865570Z     
2025-01-22T20:11:26.3865650Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3865710Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3865760Z         slice(1, 3, None)
2025-01-22T20:11:26.3865800Z     
2025-01-22T20:11:26.3865880Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3865950Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3866010Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3866060Z         """
2025-01-22T20:11:26.3866130Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3866180Z         try:
2025-01-22T20:11:26.3866250Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3866250Z 
2025-01-22T20:11:26.3866450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3866540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3866640Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3866690Z     ???
2025-01-22T20:11:26.3866780Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3866830Z     ???
2025-01-22T20:11:26.3867040Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3867080Z     ???
2025-01-22T20:11:26.3867160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3867160Z 
2025-01-22T20:11:26.3867210Z >   ???
2025-01-22T20:11:26.3867250Z E   KeyError: 'cups'
2025-01-22T20:11:26.3867300Z 
2025-01-22T20:11:26.3867410Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3867410Z 
2025-01-22T20:11:26.3867550Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3867550Z 
2025-01-22T20:11:26.3867710Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3867970Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3868450Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3868460Z 
2025-01-22T20:11:26.3868520Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3868570Z     def plasma(
2025-01-22T20:11:26.3868610Z         self,
2025-01-22T20:11:26.3868660Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3868710Z         config,
2025-01-22T20:11:26.3868750Z     ):
2025-01-22T20:11:26.3868840Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3868910Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3868910Z 
2025-01-22T20:11:26.3869000Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3869080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3869150Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3869210Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3869340Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3869420Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3869500Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3869550Z     return BasePlasma(
2025-01-22T20:11:26.3869610Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3869660Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3869730Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3869780Z     self.update(**kwargs)
2025-01-22T20:11:26.3869910Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3870000Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3870080Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3870150Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3870340Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3870460Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3870630Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3870700Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3870800Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3870930Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3871070Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3871210Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3871410Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3871550Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3871690Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3871760Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3871970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3872060Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3872250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3872320Z     return self.apply_standard()
2025-01-22T20:11:26.3872540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3872690Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3872940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3873020Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3873190Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3873250Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3873470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3873520Z     return self._get_value(key)
2025-01-22T20:11:26.3873730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3873780Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3873870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3873880Z 
2025-01-22T20:11:26.3874000Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3874170Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3874230Z        't046000', 't048000'],
2025-01-22T20:11:26.3874270Z       dtype='object')
2025-01-22T20:11:26.3874320Z key = 'cups'
2025-01-22T20:11:26.3874320Z 
2025-01-22T20:11:26.3874370Z     def get_loc(self, key):
2025-01-22T20:11:26.3874410Z         """
2025-01-22T20:11:26.3874540Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3874580Z     
2025-01-22T20:11:26.3874620Z         Parameters
2025-01-22T20:11:26.3874670Z         ----------
2025-01-22T20:11:26.3874710Z         key : label
2025-01-22T20:11:26.3874750Z     
2025-01-22T20:11:26.3874800Z         Returns
2025-01-22T20:11:26.3874840Z         -------
2025-01-22T20:11:26.3874950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3874990Z     
2025-01-22T20:11:26.3875030Z         Examples
2025-01-22T20:11:26.3875130Z         --------
2025-01-22T20:11:26.3875210Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3875260Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3875310Z         1
2025-01-22T20:11:26.3875350Z     
2025-01-22T20:11:26.3875420Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3875490Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3875540Z         slice(1, 3, None)
2025-01-22T20:11:26.3875590Z     
2025-01-22T20:11:26.3875670Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3875730Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3875800Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3875840Z         """
2025-01-22T20:11:26.3875910Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3875960Z         try:
2025-01-22T20:11:26.3876190Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3876250Z         except KeyError as err:
2025-01-22T20:11:26.3876330Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3876410Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3876500Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3876550Z             ):
2025-01-22T20:11:26.3876610Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3876670Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3876720Z E           KeyError: 'cups'
2025-01-22T20:11:26.3876730Z 
2025-01-22T20:11:26.3876940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3877180Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-delta] _
2025-01-22T20:11:26.3877190Z 
2025-01-22T20:11:26.3877390Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3877560Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3877610Z        't046000', 't048000'],
2025-01-22T20:11:26.3877660Z       dtype='object')
2025-01-22T20:11:26.3877710Z key = 'cups'
2025-01-22T20:11:26.3877710Z 
2025-01-22T20:11:26.3877770Z     def get_loc(self, key):
2025-01-22T20:11:26.3877820Z         """
2025-01-22T20:11:26.3877950Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3877990Z     
2025-01-22T20:11:26.3878040Z         Parameters
2025-01-22T20:11:26.3878090Z         ----------
2025-01-22T20:11:26.3878130Z         key : label
2025-01-22T20:11:26.3878170Z     
2025-01-22T20:11:26.3878210Z         Returns
2025-01-22T20:11:26.3878260Z         -------
2025-01-22T20:11:26.3878360Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3878400Z     
2025-01-22T20:11:26.3878450Z         Examples
2025-01-22T20:11:26.3878500Z         --------
2025-01-22T20:11:26.3878570Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3878630Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3878670Z         1
2025-01-22T20:11:26.3878720Z     
2025-01-22T20:11:26.3878790Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3878850Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3878910Z         slice(1, 3, None)
2025-01-22T20:11:26.3878950Z     
2025-01-22T20:11:26.3879030Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3879100Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3879160Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3879210Z         """
2025-01-22T20:11:26.3879280Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3879320Z         try:
2025-01-22T20:11:26.3879390Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3879400Z 
2025-01-22T20:11:26.3879590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3880240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3880350Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3880390Z     ???
2025-01-22T20:11:26.3880490Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3880530Z     ???
2025-01-22T20:11:26.3880740Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3880790Z     ???
2025-01-22T20:11:26.3880870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3880870Z 
2025-01-22T20:11:26.3880920Z >   ???
2025-01-22T20:11:26.3880960Z E   KeyError: 'cups'
2025-01-22T20:11:26.3880970Z 
2025-01-22T20:11:26.3881060Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3881070Z 
2025-01-22T20:11:26.3881200Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3881210Z 
2025-01-22T20:11:26.3881380Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3881650Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3882140Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3882150Z 
2025-01-22T20:11:26.3882210Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3882260Z     def plasma(
2025-01-22T20:11:26.3882300Z         self,
2025-01-22T20:11:26.3882360Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3882400Z         config,
2025-01-22T20:11:26.3882710Z     ):
2025-01-22T20:11:26.3882790Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3882860Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3882870Z 
2025-01-22T20:11:26.3882960Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3883050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3883120Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3883180Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3883310Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3883380Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3883460Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3883510Z     return BasePlasma(
2025-01-22T20:11:26.3883570Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3883630Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3883690Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3883750Z     self.update(**kwargs)
2025-01-22T20:11:26.3883820Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3883910Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3884000Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3884070Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3884260Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3884370Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3884540Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3884610Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3884700Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3884830Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3884960Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3885110Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3885310Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3885540Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3885680Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3885760Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3885960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3886050Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3886240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3886300Z     return self.apply_standard()
2025-01-22T20:11:26.3886530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3886620Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3886870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3886960Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3887130Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3887240Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3887460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3887520Z     return self._get_value(key)
2025-01-22T20:11:26.3887730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3887790Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3887870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3887960Z 
2025-01-22T20:11:26.3888100Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3888270Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3888320Z        't046000', 't048000'],
2025-01-22T20:11:26.3888370Z       dtype='object')
2025-01-22T20:11:26.3888420Z key = 'cups'
2025-01-22T20:11:26.3888420Z 
2025-01-22T20:11:26.3888470Z     def get_loc(self, key):
2025-01-22T20:11:26.3888520Z         """
2025-01-22T20:11:26.3888640Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3888680Z     
2025-01-22T20:11:26.3888730Z         Parameters
2025-01-22T20:11:26.3888770Z         ----------
2025-01-22T20:11:26.3888820Z         key : label
2025-01-22T20:11:26.3888860Z     
2025-01-22T20:11:26.3888910Z         Returns
2025-01-22T20:11:26.3888950Z         -------
2025-01-22T20:11:26.3889050Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3889090Z     
2025-01-22T20:11:26.3889140Z         Examples
2025-01-22T20:11:26.3889180Z         --------
2025-01-22T20:11:26.3889260Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3889310Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3889350Z         1
2025-01-22T20:11:26.3889390Z     
2025-01-22T20:11:26.3889470Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3889530Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3889580Z         slice(1, 3, None)
2025-01-22T20:11:26.3889620Z     
2025-01-22T20:11:26.3889700Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3889760Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3889830Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3889870Z         """
2025-01-22T20:11:26.3889940Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3889980Z         try:
2025-01-22T20:11:26.3890050Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3890120Z         except KeyError as err:
2025-01-22T20:11:26.3890180Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3890330Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3890420Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3890470Z             ):
2025-01-22T20:11:26.3890530Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3890590Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3890640Z E           KeyError: 'cups'
2025-01-22T20:11:26.3890650Z 
2025-01-22T20:11:26.3890860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3891160Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_electron_densities] _
2025-01-22T20:11:26.3891160Z 
2025-01-22T20:11:26.3891290Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3891470Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3891520Z        't046000', 't048000'],
2025-01-22T20:11:26.3891570Z       dtype='object')
2025-01-22T20:11:26.3891620Z key = 'cups'
2025-01-22T20:11:26.3891620Z 
2025-01-22T20:11:26.3891670Z     def get_loc(self, key):
2025-01-22T20:11:26.3891710Z         """
2025-01-22T20:11:26.3891840Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3891880Z     
2025-01-22T20:11:26.3891920Z         Parameters
2025-01-22T20:11:26.3891970Z         ----------
2025-01-22T20:11:26.3892010Z         key : label
2025-01-22T20:11:26.3892050Z     
2025-01-22T20:11:26.3892100Z         Returns
2025-01-22T20:11:26.3892140Z         -------
2025-01-22T20:11:26.3892240Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3892280Z     
2025-01-22T20:11:26.3892390Z         Examples
2025-01-22T20:11:26.3892440Z         --------
2025-01-22T20:11:26.3892510Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3892570Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3892620Z         1
2025-01-22T20:11:26.3892660Z     
2025-01-22T20:11:26.3892740Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3892800Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3892850Z         slice(1, 3, None)
2025-01-22T20:11:26.3892890Z     
2025-01-22T20:11:26.3892970Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3893040Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3893100Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3893150Z         """
2025-01-22T20:11:26.3893220Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3893260Z         try:
2025-01-22T20:11:26.3893340Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3893350Z 
2025-01-22T20:11:26.3893550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3893650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3893750Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3893790Z     ???
2025-01-22T20:11:26.3893890Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3893940Z     ???
2025-01-22T20:11:26.3894160Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3894200Z     ???
2025-01-22T20:11:26.3894290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3894290Z 
2025-01-22T20:11:26.3894330Z >   ???
2025-01-22T20:11:26.3894380Z E   KeyError: 'cups'
2025-01-22T20:11:26.3894380Z 
2025-01-22T20:11:26.3894480Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3894480Z 
2025-01-22T20:11:26.3894610Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3894670Z 
2025-01-22T20:11:26.3894840Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3895100Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3895590Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3895590Z 
2025-01-22T20:11:26.3895650Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3895710Z     def plasma(
2025-01-22T20:11:26.3895750Z         self,
2025-01-22T20:11:26.3895810Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3895850Z         config,
2025-01-22T20:11:26.3895890Z     ):
2025-01-22T20:11:26.3895980Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3896050Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3896050Z 
2025-01-22T20:11:26.3896140Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3896230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3896300Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3896360Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3896480Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3896550Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3896630Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3896690Z     return BasePlasma(
2025-01-22T20:11:26.3896750Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3896810Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3896870Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3896930Z     self.update(**kwargs)
2025-01-22T20:11:26.3897050Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3897140Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3897230Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3897300Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3897490Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3897610Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3897780Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3897850Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3897950Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3898080Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3898220Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3898360Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3898570Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3898710Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3898850Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3898930Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3899130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3902980Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3903280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3903340Z     return self.apply_standard()
2025-01-22T20:11:26.3903560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3903670Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3903910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3904400Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3904570Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3904630Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3904840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3904900Z     return self._get_value(key)
2025-01-22T20:11:26.3905110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3905170Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3905250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3905260Z 
2025-01-22T20:11:26.3905380Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3905550Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3905610Z        't046000', 't048000'],
2025-01-22T20:11:26.3905660Z       dtype='object')
2025-01-22T20:11:26.3905700Z key = 'cups'
2025-01-22T20:11:26.3905710Z 
2025-01-22T20:11:26.3905760Z     def get_loc(self, key):
2025-01-22T20:11:26.3905800Z         """
2025-01-22T20:11:26.3905930Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3905970Z     
2025-01-22T20:11:26.3906020Z         Parameters
2025-01-22T20:11:26.3906060Z         ----------
2025-01-22T20:11:26.3906110Z         key : label
2025-01-22T20:11:26.3906140Z     
2025-01-22T20:11:26.3906190Z         Returns
2025-01-22T20:11:26.3906230Z         -------
2025-01-22T20:11:26.3906330Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3906780Z     
2025-01-22T20:11:26.3906830Z         Examples
2025-01-22T20:11:26.3906880Z         --------
2025-01-22T20:11:26.3906950Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3907020Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3907060Z         1
2025-01-22T20:11:26.3907110Z     
2025-01-22T20:11:26.3907180Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3907250Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3907300Z         slice(1, 3, None)
2025-01-22T20:11:26.3907340Z     
2025-01-22T20:11:26.3907410Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3907490Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3907550Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3907590Z         """
2025-01-22T20:11:26.3907660Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3907710Z         try:
2025-01-22T20:11:26.3907770Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3907830Z         except KeyError as err:
2025-01-22T20:11:26.3907900Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3907980Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3908080Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3908120Z             ):
2025-01-22T20:11:26.3908200Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3908260Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3908310Z E           KeyError: 'cups'
2025-01-22T20:11:26.3908310Z 
2025-01-22T20:11:26.3908530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3908760Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-phi] _
2025-01-22T20:11:26.3908760Z 
2025-01-22T20:11:26.3908890Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3909060Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3909190Z        't046000', 't048000'],
2025-01-22T20:11:26.3909240Z       dtype='object')
2025-01-22T20:11:26.3909290Z key = 'cups'
2025-01-22T20:11:26.3909290Z 
2025-01-22T20:11:26.3909340Z     def get_loc(self, key):
2025-01-22T20:11:26.3909380Z         """
2025-01-22T20:11:26.3909510Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3909550Z     
2025-01-22T20:11:26.3909600Z         Parameters
2025-01-22T20:11:26.3909640Z         ----------
2025-01-22T20:11:26.3909690Z         key : label
2025-01-22T20:11:26.3909740Z     
2025-01-22T20:11:26.3909780Z         Returns
2025-01-22T20:11:26.3909830Z         -------
2025-01-22T20:11:26.3909930Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3909970Z     
2025-01-22T20:11:26.3910020Z         Examples
2025-01-22T20:11:26.3910060Z         --------
2025-01-22T20:11:26.3910140Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3910190Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3910240Z         1
2025-01-22T20:11:26.3910290Z     
2025-01-22T20:11:26.3910360Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3910420Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3910470Z         slice(1, 3, None)
2025-01-22T20:11:26.3910510Z     
2025-01-22T20:11:26.3910590Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3910650Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3910720Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3910760Z         """
2025-01-22T20:11:26.3910830Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3910880Z         try:
2025-01-22T20:11:26.3910950Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3910950Z 
2025-01-22T20:11:26.3911140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3911310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3911430Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3911470Z     ???
2025-01-22T20:11:26.3911570Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3911610Z     ???
2025-01-22T20:11:26.3911830Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3911870Z     ???
2025-01-22T20:11:26.3911960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3911970Z 
2025-01-22T20:11:26.3912010Z >   ???
2025-01-22T20:11:26.3912060Z E   KeyError: 'cups'
2025-01-22T20:11:26.3912060Z 
2025-01-22T20:11:26.3912150Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3912160Z 
2025-01-22T20:11:26.3912280Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3912290Z 
2025-01-22T20:11:26.3912460Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3912720Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3913220Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3913220Z 
2025-01-22T20:11:26.3913280Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3913330Z     def plasma(
2025-01-22T20:11:26.3913370Z         self,
2025-01-22T20:11:26.3913420Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3913470Z         config,
2025-01-22T20:11:26.3913510Z     ):
2025-01-22T20:11:26.3913590Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3913660Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3913670Z 
2025-01-22T20:11:26.3913760Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3913910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3913990Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3914050Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3914190Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3914260Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3914340Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3914390Z     return BasePlasma(
2025-01-22T20:11:26.3914460Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3914520Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3914580Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3914640Z     self.update(**kwargs)
2025-01-22T20:11:26.3914700Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3914800Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3914880Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3914960Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3915140Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3915280Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3915440Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3915510Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3915610Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3915740Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3915880Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3916020Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3916440Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3916590Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3916730Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3916800Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3917010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3917100Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3917290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3917350Z     return self.apply_standard()
2025-01-22T20:11:26.3917570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3917660Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3917920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3918020Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3918190Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3918250Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3918470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3918530Z     return self._get_value(key)
2025-01-22T20:11:26.3918730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3918790Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3918880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3918880Z 
2025-01-22T20:11:26.3919000Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3919180Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3919320Z        't046000', 't048000'],
2025-01-22T20:11:26.3919370Z       dtype='object')
2025-01-22T20:11:26.3919420Z key = 'cups'
2025-01-22T20:11:26.3919420Z 
2025-01-22T20:11:26.3919470Z     def get_loc(self, key):
2025-01-22T20:11:26.3919510Z         """
2025-01-22T20:11:26.3919640Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3919680Z     
2025-01-22T20:11:26.3919730Z         Parameters
2025-01-22T20:11:26.3919770Z         ----------
2025-01-22T20:11:26.3919820Z         key : label
2025-01-22T20:11:26.3919860Z     
2025-01-22T20:11:26.3919900Z         Returns
2025-01-22T20:11:26.3919940Z         -------
2025-01-22T20:11:26.3920040Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3920090Z     
2025-01-22T20:11:26.3920140Z         Examples
2025-01-22T20:11:26.3920190Z         --------
2025-01-22T20:11:26.3920250Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3920320Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3920360Z         1
2025-01-22T20:11:26.3920400Z     
2025-01-22T20:11:26.3920480Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3920550Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3920600Z         slice(1, 3, None)
2025-01-22T20:11:26.3920640Z     
2025-01-22T20:11:26.3920720Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3920780Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3920840Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3920890Z         """
2025-01-22T20:11:26.3920960Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3921000Z         try:
2025-01-22T20:11:26.3921070Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3921130Z         except KeyError as err:
2025-01-22T20:11:26.3921250Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3921320Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3921420Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3921460Z             ):
2025-01-22T20:11:26.3921530Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3921590Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3921640Z E           KeyError: 'cups'
2025-01-22T20:11:26.3921640Z 
2025-01-22T20:11:26.3921850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3922120Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ion_number_density] _
2025-01-22T20:11:26.3922120Z 
2025-01-22T20:11:26.3922250Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3922410Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3922470Z        't046000', 't048000'],
2025-01-22T20:11:26.3922520Z       dtype='object')
2025-01-22T20:11:26.3922560Z key = 'cups'
2025-01-22T20:11:26.3922560Z 
2025-01-22T20:11:26.3922620Z     def get_loc(self, key):
2025-01-22T20:11:26.3922660Z         """
2025-01-22T20:11:26.3922780Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3922820Z     
2025-01-22T20:11:26.3922870Z         Parameters
2025-01-22T20:11:26.3922920Z         ----------
2025-01-22T20:11:26.3922960Z         key : label
2025-01-22T20:11:26.3923000Z     
2025-01-22T20:11:26.3923040Z         Returns
2025-01-22T20:11:26.3923090Z         -------
2025-01-22T20:11:26.3923190Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3923230Z     
2025-01-22T20:11:26.3923270Z         Examples
2025-01-22T20:11:26.3923310Z         --------
2025-01-22T20:11:26.3923380Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3923440Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3923910Z         1
2025-01-22T20:11:26.3923960Z     
2025-01-22T20:11:26.3924040Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3924100Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3924150Z         slice(1, 3, None)
2025-01-22T20:11:26.3924190Z     
2025-01-22T20:11:26.3924270Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3924330Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3924390Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3924430Z         """
2025-01-22T20:11:26.3924510Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3924550Z         try:
2025-01-22T20:11:26.3924620Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3924630Z 
2025-01-22T20:11:26.3924820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3924910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3925020Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3925060Z     ???
2025-01-22T20:11:26.3925160Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3925200Z     ???
2025-01-22T20:11:26.3925420Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3925460Z     ???
2025-01-22T20:11:26.3925550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3925550Z 
2025-01-22T20:11:26.3925590Z >   ???
2025-01-22T20:11:26.3925640Z E   KeyError: 'cups'
2025-01-22T20:11:26.3925640Z 
2025-01-22T20:11:26.3925740Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3925740Z 
2025-01-22T20:11:26.3925860Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3926370Z 
2025-01-22T20:11:26.3926580Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3926850Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3927330Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3927340Z 
2025-01-22T20:11:26.3927400Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3927440Z     def plasma(
2025-01-22T20:11:26.3927490Z         self,
2025-01-22T20:11:26.3927540Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3927580Z         config,
2025-01-22T20:11:26.3927620Z     ):
2025-01-22T20:11:26.3927710Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3927770Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3927780Z 
2025-01-22T20:11:26.3927870Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3927950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3928030Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3928080Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3928220Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3928280Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3928360Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3928420Z     return BasePlasma(
2025-01-22T20:11:26.3928470Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3928530Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3928590Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3928640Z     self.update(**kwargs)
2025-01-22T20:11:26.3928700Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3928800Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3928880Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3929060Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3929250Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3929370Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3929530Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3929600Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3929700Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3929830Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3929970Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3930100Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3930310Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3930450Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3930600Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3930670Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3930870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3930970Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3931170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3931230Z     return self.apply_standard()
2025-01-22T20:11:26.3931460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3931550Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3931800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3931960Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3932130Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3932190Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3932410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3932470Z     return self._get_value(key)
2025-01-22T20:11:26.3932670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3932740Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3932830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3932830Z 
2025-01-22T20:11:26.3932950Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3933130Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3933190Z        't046000', 't048000'],
2025-01-22T20:11:26.3933240Z       dtype='object')
2025-01-22T20:11:26.3933290Z key = 'cups'
2025-01-22T20:11:26.3933290Z 
2025-01-22T20:11:26.3933350Z     def get_loc(self, key):
2025-01-22T20:11:26.3933390Z         """
2025-01-22T20:11:26.3933520Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3933560Z     
2025-01-22T20:11:26.3933610Z         Parameters
2025-01-22T20:11:26.3933650Z         ----------
2025-01-22T20:11:26.3933700Z         key : label
2025-01-22T20:11:26.3933740Z     
2025-01-22T20:11:26.3933780Z         Returns
2025-01-22T20:11:26.3933830Z         -------
2025-01-22T20:11:26.3933930Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3933970Z     
2025-01-22T20:11:26.3934010Z         Examples
2025-01-22T20:11:26.3934060Z         --------
2025-01-22T20:11:26.3934130Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3934200Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3934300Z         1
2025-01-22T20:11:26.3934340Z     
2025-01-22T20:11:26.3934420Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3934480Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3934530Z         slice(1, 3, None)
2025-01-22T20:11:26.3934580Z     
2025-01-22T20:11:26.3934660Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3934720Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3934790Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3934830Z         """
2025-01-22T20:11:26.3934910Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3934950Z         try:
2025-01-22T20:11:26.3935030Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3935080Z         except KeyError as err:
2025-01-22T20:11:26.3935150Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3935230Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3935330Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3935370Z             ):
2025-01-22T20:11:26.3935440Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3935500Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3935550Z E           KeyError: 'cups'
2025-01-22T20:11:26.3935550Z 
2025-01-22T20:11:26.3935760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3936030Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-electron_densities] _
2025-01-22T20:11:26.3936030Z 
2025-01-22T20:11:26.3936160Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3936330Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3936440Z        't046000', 't048000'],
2025-01-22T20:11:26.3936490Z       dtype='object')
2025-01-22T20:11:26.3936550Z key = 'cups'
2025-01-22T20:11:26.3936550Z 
2025-01-22T20:11:26.3936600Z     def get_loc(self, key):
2025-01-22T20:11:26.3936640Z         """
2025-01-22T20:11:26.3936760Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3936800Z     
2025-01-22T20:11:26.3936850Z         Parameters
2025-01-22T20:11:26.3936890Z         ----------
2025-01-22T20:11:26.3936940Z         key : label
2025-01-22T20:11:26.3936980Z     
2025-01-22T20:11:26.3937020Z         Returns
2025-01-22T20:11:26.3937060Z         -------
2025-01-22T20:11:26.3937170Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3937210Z     
2025-01-22T20:11:26.3937260Z         Examples
2025-01-22T20:11:26.3937300Z         --------
2025-01-22T20:11:26.3937370Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3937430Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3937480Z         1
2025-01-22T20:11:26.3937520Z     
2025-01-22T20:11:26.3937600Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3937660Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3937720Z         slice(1, 3, None)
2025-01-22T20:11:26.3937760Z     
2025-01-22T20:11:26.3937840Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3937900Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3937960Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3938010Z         """
2025-01-22T20:11:26.3938080Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3938120Z         try:
2025-01-22T20:11:26.3938190Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3938200Z 
2025-01-22T20:11:26.3938390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3938480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3938580Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3938680Z     ???
2025-01-22T20:11:26.3938780Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3938820Z     ???
2025-01-22T20:11:26.3939040Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3939080Z     ???
2025-01-22T20:11:26.3939170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3939170Z 
2025-01-22T20:11:26.3939210Z >   ???
2025-01-22T20:11:26.3939260Z E   KeyError: 'cups'
2025-01-22T20:11:26.3939260Z 
2025-01-22T20:11:26.3939360Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3939370Z 
2025-01-22T20:11:26.3939490Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3939500Z 
2025-01-22T20:11:26.3939680Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3939930Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3940420Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3940430Z 
2025-01-22T20:11:26.3940490Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3940530Z     def plasma(
2025-01-22T20:11:26.3940580Z         self,
2025-01-22T20:11:26.3940630Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3940670Z         config,
2025-01-22T20:11:26.3940710Z     ):
2025-01-22T20:11:26.3940790Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3940860Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3940900Z 
2025-01-22T20:11:26.3941000Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3941080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3941170Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3941230Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3941350Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3941420Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3941500Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3941550Z     return BasePlasma(
2025-01-22T20:11:26.3941610Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3941670Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3941730Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3941780Z     self.update(**kwargs)
2025-01-22T20:11:26.3941840Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3941930Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3942020Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3942090Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3942280Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3942400Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3942570Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3942630Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3942730Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3942860Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3943000Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3943130Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3943340Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3943480Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3944140Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3944220Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3944420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3944510Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3944700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3944770Z     return self.apply_standard()
2025-01-22T20:11:26.3944990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3945080Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3945320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3945420Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3945590Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3945650Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3945860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3945920Z     return self._get_value(key)
2025-01-22T20:11:26.3946130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3946190Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3946280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3946290Z 
2025-01-22T20:11:26.3946410Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3946590Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3946940Z        't046000', 't048000'],
2025-01-22T20:11:26.3947000Z       dtype='object')
2025-01-22T20:11:26.3947040Z key = 'cups'
2025-01-22T20:11:26.3947050Z 
2025-01-22T20:11:26.3947100Z     def get_loc(self, key):
2025-01-22T20:11:26.3947140Z         """
2025-01-22T20:11:26.3947260Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3947310Z     
2025-01-22T20:11:26.3947350Z         Parameters
2025-01-22T20:11:26.3947400Z         ----------
2025-01-22T20:11:26.3947440Z         key : label
2025-01-22T20:11:26.3947480Z     
2025-01-22T20:11:26.3947520Z         Returns
2025-01-22T20:11:26.3947570Z         -------
2025-01-22T20:11:26.3947670Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3947710Z     
2025-01-22T20:11:26.3947750Z         Examples
2025-01-22T20:11:26.3947800Z         --------
2025-01-22T20:11:26.3947870Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3947930Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3947970Z         1
2025-01-22T20:11:26.3948010Z     
2025-01-22T20:11:26.3948090Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3948150Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3948200Z         slice(1, 3, None)
2025-01-22T20:11:26.3948240Z     
2025-01-22T20:11:26.3948320Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3948390Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3948460Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3948510Z         """
2025-01-22T20:11:26.3948580Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3948630Z         try:
2025-01-22T20:11:26.3948710Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3948770Z         except KeyError as err:
2025-01-22T20:11:26.3948840Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3948910Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3949010Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3949150Z             ):
2025-01-22T20:11:26.3949210Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3949270Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3949320Z E           KeyError: 'cups'
2025-01-22T20:11:26.3949330Z 
2025-01-22T20:11:26.3949550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3949810Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_number_density] _
2025-01-22T20:11:26.3949820Z 
2025-01-22T20:11:26.3949940Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3950110Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3950170Z        't046000', 't048000'],
2025-01-22T20:11:26.3950220Z       dtype='object')
2025-01-22T20:11:26.3954150Z key = 'cups'
2025-01-22T20:11:26.3954200Z 
2025-01-22T20:11:26.3954310Z     def get_loc(self, key):
2025-01-22T20:11:26.3954360Z         """
2025-01-22T20:11:26.3954480Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3954520Z     
2025-01-22T20:11:26.3954570Z         Parameters
2025-01-22T20:11:26.3954620Z         ----------
2025-01-22T20:11:26.3954660Z         key : label
2025-01-22T20:11:26.3954700Z     
2025-01-22T20:11:26.3954750Z         Returns
2025-01-22T20:11:26.3954790Z         -------
2025-01-22T20:11:26.3954890Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3954930Z     
2025-01-22T20:11:26.3954970Z         Examples
2025-01-22T20:11:26.3955020Z         --------
2025-01-22T20:11:26.3955090Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3955150Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3955420Z         1
2025-01-22T20:11:26.3955470Z     
2025-01-22T20:11:26.3955540Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3955620Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3955670Z         slice(1, 3, None)
2025-01-22T20:11:26.3955720Z     
2025-01-22T20:11:26.3955800Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3955870Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3955930Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3955980Z         """
2025-01-22T20:11:26.3956060Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3956100Z         try:
2025-01-22T20:11:26.3956320Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3956320Z 
2025-01-22T20:11:26.3956520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3956610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3956710Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3956760Z     ???
2025-01-22T20:11:26.3956860Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3956900Z     ???
2025-01-22T20:11:26.3957120Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3957160Z     ???
2025-01-22T20:11:26.3957250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3957250Z 
2025-01-22T20:11:26.3957290Z >   ???
2025-01-22T20:11:26.3957340Z E   KeyError: 'cups'
2025-01-22T20:11:26.3957340Z 
2025-01-22T20:11:26.3957440Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3957440Z 
2025-01-22T20:11:26.3957570Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3957570Z 
2025-01-22T20:11:26.3957740Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3958010Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3958590Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3958600Z 
2025-01-22T20:11:26.3958660Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3958700Z     def plasma(
2025-01-22T20:11:26.3958750Z         self,
2025-01-22T20:11:26.3958800Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3958850Z         config,
2025-01-22T20:11:26.3958890Z     ):
2025-01-22T20:11:26.3958970Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3959040Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3959050Z 
2025-01-22T20:11:26.3959130Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3959220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3959300Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3959360Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3959490Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3959550Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3959630Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3959680Z     return BasePlasma(
2025-01-22T20:11:26.3959740Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3959800Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3959860Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3959910Z     self.update(**kwargs)
2025-01-22T20:11:26.3959980Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3960070Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3960150Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3960290Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3960480Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3960600Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3960770Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3960830Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3960930Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3961070Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3961200Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3961340Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3961540Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3961690Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3961830Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3961910Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3962110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3962200Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3962390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3962450Z     return self.apply_standard()
2025-01-22T20:11:26.3962680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3962770Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3963020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3963110Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3963280Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3963410Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3963620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3963670Z     return self._get_value(key)
2025-01-22T20:11:26.3963890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3963940Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3964030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3964040Z 
2025-01-22T20:11:26.3964160Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3964330Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3964390Z        't046000', 't048000'],
2025-01-22T20:11:26.3964440Z       dtype='object')
2025-01-22T20:11:26.3964490Z key = 'cups'
2025-01-22T20:11:26.3964490Z 
2025-01-22T20:11:26.3964540Z     def get_loc(self, key):
2025-01-22T20:11:26.3964580Z         """
2025-01-22T20:11:26.3964710Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3964750Z     
2025-01-22T20:11:26.3964790Z         Parameters
2025-01-22T20:11:26.3964840Z         ----------
2025-01-22T20:11:26.3964880Z         key : label
2025-01-22T20:11:26.3964920Z     
2025-01-22T20:11:26.3964970Z         Returns
2025-01-22T20:11:26.3965010Z         -------
2025-01-22T20:11:26.3965120Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3965160Z     
2025-01-22T20:11:26.3965210Z         Examples
2025-01-22T20:11:26.3965250Z         --------
2025-01-22T20:11:26.3965320Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3965430Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3965480Z         1
2025-01-22T20:11:26.3965520Z     
2025-01-22T20:11:26.3965600Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3965660Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3965720Z         slice(1, 3, None)
2025-01-22T20:11:26.3965760Z     
2025-01-22T20:11:26.3965840Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3965900Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3965960Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3966000Z         """
2025-01-22T20:11:26.3966070Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3966120Z         try:
2025-01-22T20:11:26.3966190Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3966250Z         except KeyError as err:
2025-01-22T20:11:26.3966320Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3966390Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3966480Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3966540Z             ):
2025-01-22T20:11:26.3966600Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3966670Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3966720Z E           KeyError: 'cups'
2025-01-22T20:11:26.3966730Z 
2025-01-22T20:11:26.3966950Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3967230Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] _
2025-01-22T20:11:26.3967240Z 
2025-01-22T20:11:26.3967360Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3967530Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3967580Z        't046000', 't048000'],
2025-01-22T20:11:26.3967640Z       dtype='object')
2025-01-22T20:11:26.3967680Z key = 'cups'
2025-01-22T20:11:26.3967690Z 
2025-01-22T20:11:26.3968320Z     def get_loc(self, key):
2025-01-22T20:11:26.3968370Z         """
2025-01-22T20:11:26.3968490Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3968530Z     
2025-01-22T20:11:26.3968580Z         Parameters
2025-01-22T20:11:26.3968620Z         ----------
2025-01-22T20:11:26.3968670Z         key : label
2025-01-22T20:11:26.3968710Z     
2025-01-22T20:11:26.3968750Z         Returns
2025-01-22T20:11:26.3968800Z         -------
2025-01-22T20:11:26.3968900Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3968940Z     
2025-01-22T20:11:26.3968980Z         Examples
2025-01-22T20:11:26.3969030Z         --------
2025-01-22T20:11:26.3969100Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3969160Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3969200Z         1
2025-01-22T20:11:26.3969250Z     
2025-01-22T20:11:26.3969330Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3969400Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3969450Z         slice(1, 3, None)
2025-01-22T20:11:26.3969500Z     
2025-01-22T20:11:26.3969580Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3969640Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3969700Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3969740Z         """
2025-01-22T20:11:26.3969820Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3969860Z         try:
2025-01-22T20:11:26.3969930Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3969940Z 
2025-01-22T20:11:26.3970130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3970220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3970750Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3970800Z     ???
2025-01-22T20:11:26.3970900Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3970950Z     ???
2025-01-22T20:11:26.3971170Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3971210Z     ???
2025-01-22T20:11:26.3971300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3971310Z 
2025-01-22T20:11:26.3971350Z >   ???
2025-01-22T20:11:26.3971400Z E   KeyError: 'cups'
2025-01-22T20:11:26.3971400Z 
2025-01-22T20:11:26.3971500Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3971500Z 
2025-01-22T20:11:26.3971630Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3971630Z 
2025-01-22T20:11:26.3971790Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3972060Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3972540Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3972550Z 
2025-01-22T20:11:26.3972610Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3972660Z     def plasma(
2025-01-22T20:11:26.3972700Z         self,
2025-01-22T20:11:26.3972750Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3972790Z         config,
2025-01-22T20:11:26.3972830Z     ):
2025-01-22T20:11:26.3972920Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3972980Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3972990Z 
2025-01-22T20:11:26.3973080Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3973170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3973340Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3973400Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3973530Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3973600Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3973690Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3973740Z     return BasePlasma(
2025-01-22T20:11:26.3973800Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3973850Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3973910Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3973970Z     self.update(**kwargs)
2025-01-22T20:11:26.3974030Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3974120Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3974210Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3974280Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3974460Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3974590Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3974770Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3974850Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3974950Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3975080Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3975210Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3975360Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3975560Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3975710Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3975930Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3976010Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3976220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3976300Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3976500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3976560Z     return self.apply_standard()
2025-01-22T20:11:26.3976780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3976870Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3977120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3977210Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3977380Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3977440Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3977650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3977710Z     return self._get_value(key)
2025-01-22T20:11:26.3977920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3977980Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3978060Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3978070Z 
2025-01-22T20:11:26.3978190Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3978360Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3978410Z        't046000', 't048000'],
2025-01-22T20:11:26.3978460Z       dtype='object')
2025-01-22T20:11:26.3978510Z key = 'cups'
2025-01-22T20:11:26.3978580Z 
2025-01-22T20:11:26.3978640Z     def get_loc(self, key):
2025-01-22T20:11:26.3978680Z         """
2025-01-22T20:11:26.3978800Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3978850Z     
2025-01-22T20:11:26.3978890Z         Parameters
2025-01-22T20:11:26.3978940Z         ----------
2025-01-22T20:11:26.3978980Z         key : label
2025-01-22T20:11:26.3979020Z     
2025-01-22T20:11:26.3979060Z         Returns
2025-01-22T20:11:26.3979110Z         -------
2025-01-22T20:11:26.3979210Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3979250Z     
2025-01-22T20:11:26.3979290Z         Examples
2025-01-22T20:11:26.3979340Z         --------
2025-01-22T20:11:26.3979400Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3979460Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3979510Z         1
2025-01-22T20:11:26.3979550Z     
2025-01-22T20:11:26.3979630Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3979690Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3979750Z         slice(1, 3, None)
2025-01-22T20:11:26.3979790Z     
2025-01-22T20:11:26.3979870Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3979940Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3980000Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3980040Z         """
2025-01-22T20:11:26.3980110Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3980160Z         try:
2025-01-22T20:11:26.3980230Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3980290Z         except KeyError as err:
2025-01-22T20:11:26.3980350Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3980430Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3980570Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3980620Z             ):
2025-01-22T20:11:26.3980680Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3980750Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3980800Z E           KeyError: 'cups'
2025-01-22T20:11:26.3980800Z 
2025-01-22T20:11:26.3981020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3981290Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] _
2025-01-22T20:11:26.3981290Z 
2025-01-22T20:11:26.3981410Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3981590Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3981640Z        't046000', 't048000'],
2025-01-22T20:11:26.3981690Z       dtype='object')
2025-01-22T20:11:26.3981730Z key = 'cups'
2025-01-22T20:11:26.3981740Z 
2025-01-22T20:11:26.3981790Z     def get_loc(self, key):
2025-01-22T20:11:26.3981830Z         """
2025-01-22T20:11:26.3981960Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3982010Z     
2025-01-22T20:11:26.3982050Z         Parameters
2025-01-22T20:11:26.3982100Z         ----------
2025-01-22T20:11:26.3982140Z         key : label
2025-01-22T20:11:26.3982180Z     
2025-01-22T20:11:26.3982230Z         Returns
2025-01-22T20:11:26.3982270Z         -------
2025-01-22T20:11:26.3982370Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3982410Z     
2025-01-22T20:11:26.3982450Z         Examples
2025-01-22T20:11:26.3982500Z         --------
2025-01-22T20:11:26.3982560Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3982620Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3982660Z         1
2025-01-22T20:11:26.3982710Z     
2025-01-22T20:11:26.3982780Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3982840Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3982940Z         slice(1, 3, None)
2025-01-22T20:11:26.3982990Z     
2025-01-22T20:11:26.3983070Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3983130Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3983200Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3983240Z         """
2025-01-22T20:11:26.3983320Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3983360Z         try:
2025-01-22T20:11:26.3983430Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3983430Z 
2025-01-22T20:11:26.3983620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3983710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3983820Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3983860Z     ???
2025-01-22T20:11:26.3983960Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3984000Z     ???
2025-01-22T20:11:26.3984220Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.3984260Z     ???
2025-01-22T20:11:26.3984350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3984350Z 
2025-01-22T20:11:26.3984390Z >   ???
2025-01-22T20:11:26.3984440Z E   KeyError: 'cups'
2025-01-22T20:11:26.3984440Z 
2025-01-22T20:11:26.3984530Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.3984530Z 
2025-01-22T20:11:26.3984660Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.3984670Z 
2025-01-22T20:11:26.3984830Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.3985140Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.3985650Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.3985650Z 
2025-01-22T20:11:26.3985710Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.3985760Z     def plasma(
2025-01-22T20:11:26.3985810Z         self,
2025-01-22T20:11:26.3985860Z         chianti_he_db_fpath,
2025-01-22T20:11:26.3985900Z         config,
2025-01-22T20:11:26.3985950Z     ):
2025-01-22T20:11:26.3986030Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.3986100Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.3986110Z 
2025-01-22T20:11:26.3986190Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.3986280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3986360Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.3986420Z     plasma = assemble_plasma(
2025-01-22T20:11:26.3986550Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.3986630Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.3986710Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.3986760Z     return BasePlasma(
2025-01-22T20:11:26.3986820Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.3986870Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.3986930Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.3986980Z     self.update(**kwargs)
2025-01-22T20:11:26.3987050Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.3987140Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.3987270Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.3987340Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.3987540Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.3988050Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.3988220Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.3988290Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.3988380Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.3988520Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.3988650Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.3988800Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.3989000Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.3989140Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.3989290Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.3989360Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.3989560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.3989670Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.3989860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.3991810Z     return self.apply_standard()
2025-01-22T20:11:26.3992040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.3992130Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.3992380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.3992470Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.3993090Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.3993150Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.3993390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.3993450Z     return self._get_value(key)
2025-01-22T20:11:26.3993660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.3993720Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.3993810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3993810Z 
2025-01-22T20:11:26.3993930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3994100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3994150Z        't046000', 't048000'],
2025-01-22T20:11:26.3994210Z       dtype='object')
2025-01-22T20:11:26.3994250Z key = 'cups'
2025-01-22T20:11:26.3994260Z 
2025-01-22T20:11:26.3994310Z     def get_loc(self, key):
2025-01-22T20:11:26.3994350Z         """
2025-01-22T20:11:26.3994480Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3994520Z     
2025-01-22T20:11:26.3994570Z         Parameters
2025-01-22T20:11:26.3994610Z         ----------
2025-01-22T20:11:26.3994660Z         key : label
2025-01-22T20:11:26.3994700Z     
2025-01-22T20:11:26.3994750Z         Returns
2025-01-22T20:11:26.3994790Z         -------
2025-01-22T20:11:26.3994890Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3994930Z     
2025-01-22T20:11:26.3994970Z         Examples
2025-01-22T20:11:26.3995020Z         --------
2025-01-22T20:11:26.3995090Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3995150Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3995190Z         1
2025-01-22T20:11:26.3995230Z     
2025-01-22T20:11:26.3995310Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3995370Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3995520Z         slice(1, 3, None)
2025-01-22T20:11:26.3995570Z     
2025-01-22T20:11:26.3995640Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3995710Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3995770Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3995820Z         """
2025-01-22T20:11:26.3995890Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3995930Z         try:
2025-01-22T20:11:26.3996000Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3996060Z         except KeyError as err:
2025-01-22T20:11:26.3996130Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.3996210Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.3996450Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.3996500Z             ):
2025-01-22T20:11:26.3996570Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.3996630Z >           raise KeyError(key) from err
2025-01-22T20:11:26.3996680Z E           KeyError: 'cups'
2025-01-22T20:11:26.3996680Z 
2025-01-22T20:11:26.3996890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.3997140Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] _
2025-01-22T20:11:26.3997150Z 
2025-01-22T20:11:26.3997270Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.3997440Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.3997490Z        't046000', 't048000'],
2025-01-22T20:11:26.3997540Z       dtype='object')
2025-01-22T20:11:26.3997670Z key = 'cups'
2025-01-22T20:11:26.3997670Z 
2025-01-22T20:11:26.3997720Z     def get_loc(self, key):
2025-01-22T20:11:26.3997760Z         """
2025-01-22T20:11:26.3997890Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.3997930Z     
2025-01-22T20:11:26.3997980Z         Parameters
2025-01-22T20:11:26.3998020Z         ----------
2025-01-22T20:11:26.3998070Z         key : label
2025-01-22T20:11:26.3998110Z     
2025-01-22T20:11:26.3998150Z         Returns
2025-01-22T20:11:26.3998190Z         -------
2025-01-22T20:11:26.3998310Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.3998360Z     
2025-01-22T20:11:26.3998400Z         Examples
2025-01-22T20:11:26.3998450Z         --------
2025-01-22T20:11:26.3998520Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.3998570Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.3998620Z         1
2025-01-22T20:11:26.3998660Z     
2025-01-22T20:11:26.3998730Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.3998800Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.3998850Z         slice(1, 3, None)
2025-01-22T20:11:26.3998890Z     
2025-01-22T20:11:26.3998980Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.3999040Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.3999100Z         array([False,  True, False,  True])
2025-01-22T20:11:26.3999140Z         """
2025-01-22T20:11:26.3999220Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.3999260Z         try:
2025-01-22T20:11:26.3999340Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.3999340Z 
2025-01-22T20:11:26.3999540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.3999630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.3999730Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.3999770Z     ???
2025-01-22T20:11:26.3999880Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4000000Z     ???
2025-01-22T20:11:26.4000220Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4000260Z     ???
2025-01-22T20:11:26.4000350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4000350Z 
2025-01-22T20:11:26.4000390Z >   ???
2025-01-22T20:11:26.4000440Z E   KeyError: 'cups'
2025-01-22T20:11:26.4000440Z 
2025-01-22T20:11:26.4000540Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4000540Z 
2025-01-22T20:11:26.4000670Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4000670Z 
2025-01-22T20:11:26.4000840Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4001090Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4001590Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4001600Z 
2025-01-22T20:11:26.4001660Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4001710Z     def plasma(
2025-01-22T20:11:26.4001760Z         self,
2025-01-22T20:11:26.4001820Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4001860Z         config,
2025-01-22T20:11:26.4001910Z     ):
2025-01-22T20:11:26.4006090Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4006230Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4006230Z 
2025-01-22T20:11:26.4006320Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4006410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4006700Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4006760Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4006890Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4006960Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4007040Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4007090Z     return BasePlasma(
2025-01-22T20:11:26.4007150Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4007210Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4007270Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4007330Z     self.update(**kwargs)
2025-01-22T20:11:26.4007390Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4007480Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4007560Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4007640Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4007820Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4007940Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4008110Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4008190Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4008290Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4008420Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4008560Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4008690Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4008910Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4009050Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4009190Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4009270Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4009570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4009660Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4009860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4009920Z     return self.apply_standard()
2025-01-22T20:11:26.4010140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4010230Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4010470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4010560Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4010730Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4010790Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4011000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4011070Z     return self._get_value(key)
2025-01-22T20:11:26.4011270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4011330Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4011430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4011440Z 
2025-01-22T20:11:26.4011560Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4011740Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4011790Z        't046000', 't048000'],
2025-01-22T20:11:26.4011840Z       dtype='object')
2025-01-22T20:11:26.4011920Z key = 'cups'
2025-01-22T20:11:26.4011930Z 
2025-01-22T20:11:26.4011990Z     def get_loc(self, key):
2025-01-22T20:11:26.4012030Z         """
2025-01-22T20:11:26.4012160Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4012200Z     
2025-01-22T20:11:26.4012250Z         Parameters
2025-01-22T20:11:26.4012300Z         ----------
2025-01-22T20:11:26.4012340Z         key : label
2025-01-22T20:11:26.4012390Z     
2025-01-22T20:11:26.4012430Z         Returns
2025-01-22T20:11:26.4012480Z         -------
2025-01-22T20:11:26.4012570Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4012620Z     
2025-01-22T20:11:26.4012660Z         Examples
2025-01-22T20:11:26.4012710Z         --------
2025-01-22T20:11:26.4012780Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4012830Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4012870Z         1
2025-01-22T20:11:26.4012910Z     
2025-01-22T20:11:26.4012990Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4013060Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4013110Z         slice(1, 3, None)
2025-01-22T20:11:26.4013150Z     
2025-01-22T20:11:26.4013230Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4013300Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4013360Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4013400Z         """
2025-01-22T20:11:26.4013480Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4013520Z         try:
2025-01-22T20:11:26.4013590Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4013640Z         except KeyError as err:
2025-01-22T20:11:26.4013720Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4013790Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4013880Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4013930Z             ):
2025-01-22T20:11:26.4014000Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4014060Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4014500Z E           KeyError: 'cups'
2025-01-22T20:11:26.4014500Z 
2025-01-22T20:11:26.4014710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4014960Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] _
2025-01-22T20:11:26.4014960Z 
2025-01-22T20:11:26.4015090Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4015250Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4015300Z        't046000', 't048000'],
2025-01-22T20:11:26.4015350Z       dtype='object')
2025-01-22T20:11:26.4015400Z key = 'cups'
2025-01-22T20:11:26.4015400Z 
2025-01-22T20:11:26.4015450Z     def get_loc(self, key):
2025-01-22T20:11:26.4015500Z         """
2025-01-22T20:11:26.4015620Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4015670Z     
2025-01-22T20:11:26.4015710Z         Parameters
2025-01-22T20:11:26.4015760Z         ----------
2025-01-22T20:11:26.4015810Z         key : label
2025-01-22T20:11:26.4015850Z     
2025-01-22T20:11:26.4015890Z         Returns
2025-01-22T20:11:26.4015930Z         -------
2025-01-22T20:11:26.4016030Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4016070Z     
2025-01-22T20:11:26.4016110Z         Examples
2025-01-22T20:11:26.4016160Z         --------
2025-01-22T20:11:26.4016220Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4016280Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4016320Z         1
2025-01-22T20:11:26.4016360Z     
2025-01-22T20:11:26.4016440Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4017040Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4017090Z         slice(1, 3, None)
2025-01-22T20:11:26.4017130Z     
2025-01-22T20:11:26.4017210Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4017280Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4017340Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4017380Z         """
2025-01-22T20:11:26.4017450Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4017500Z         try:
2025-01-22T20:11:26.4017570Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4017570Z 
2025-01-22T20:11:26.4017770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4017860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4017960Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4018000Z     ???
2025-01-22T20:11:26.4018100Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4018140Z     ???
2025-01-22T20:11:26.4018360Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4018400Z     ???
2025-01-22T20:11:26.4018490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4018490Z 
2025-01-22T20:11:26.4018530Z >   ???
2025-01-22T20:11:26.4018580Z E   KeyError: 'cups'
2025-01-22T20:11:26.4018580Z 
2025-01-22T20:11:26.4018680Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4018680Z 
2025-01-22T20:11:26.4018810Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4018810Z 
2025-01-22T20:11:26.4018980Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4019240Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4019740Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4019820Z 
2025-01-22T20:11:26.4019890Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4019930Z     def plasma(
2025-01-22T20:11:26.4019980Z         self,
2025-01-22T20:11:26.4020030Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4020070Z         config,
2025-01-22T20:11:26.4020130Z     ):
2025-01-22T20:11:26.4020230Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4020290Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4020290Z 
2025-01-22T20:11:26.4020390Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4020470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4020550Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4020610Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4020740Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4020820Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4020900Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4020950Z     return BasePlasma(
2025-01-22T20:11:26.4021000Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4021070Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4021130Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4021180Z     self.update(**kwargs)
2025-01-22T20:11:26.4021240Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4021330Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4021410Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4021490Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4021670Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4021880Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4022060Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4022130Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4022220Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4022360Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4022500Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4022630Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4022840Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4022970Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4023120Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4023200Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4023410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4023510Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4023700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4023760Z     return self.apply_standard()
2025-01-22T20:11:26.4023990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4024080Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4024320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4024410Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4024590Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4024650Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4024870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4024990Z     return self._get_value(key)
2025-01-22T20:11:26.4025200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4025260Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4025350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4025360Z 
2025-01-22T20:11:26.4025480Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4025670Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4025730Z        't046000', 't048000'],
2025-01-22T20:11:26.4025780Z       dtype='object')
2025-01-22T20:11:26.4025830Z key = 'cups'
2025-01-22T20:11:26.4025840Z 
2025-01-22T20:11:26.4025890Z     def get_loc(self, key):
2025-01-22T20:11:26.4025950Z         """
2025-01-22T20:11:26.4026080Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4026130Z     
2025-01-22T20:11:26.4026180Z         Parameters
2025-01-22T20:11:26.4026220Z         ----------
2025-01-22T20:11:26.4026270Z         key : label
2025-01-22T20:11:26.4026310Z     
2025-01-22T20:11:26.4026350Z         Returns
2025-01-22T20:11:26.4026390Z         -------
2025-01-22T20:11:26.4026490Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4026540Z     
2025-01-22T20:11:26.4026580Z         Examples
2025-01-22T20:11:26.4026630Z         --------
2025-01-22T20:11:26.4026700Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4026760Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4026800Z         1
2025-01-22T20:11:26.4026840Z     
2025-01-22T20:11:26.4026920Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4027070Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4027130Z         slice(1, 3, None)
2025-01-22T20:11:26.4027170Z     
2025-01-22T20:11:26.4027260Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4027320Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4027390Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4027430Z         """
2025-01-22T20:11:26.4027510Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4027550Z         try:
2025-01-22T20:11:26.4027620Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4027680Z         except KeyError as err:
2025-01-22T20:11:26.4027750Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4027820Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4027910Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4027950Z             ):
2025-01-22T20:11:26.4028020Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4028090Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4028140Z E           KeyError: 'cups'
2025-01-22T20:11:26.4028150Z 
2025-01-22T20:11:26.4028360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4028630Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-transition_probabilities] _
2025-01-22T20:11:26.4028640Z 
2025-01-22T20:11:26.4028760Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4028920Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4028970Z        't046000', 't048000'],
2025-01-22T20:11:26.4029020Z       dtype='object')
2025-01-22T20:11:26.4029060Z key = 'cups'
2025-01-22T20:11:26.4029070Z 
2025-01-22T20:11:26.4029120Z     def get_loc(self, key):
2025-01-22T20:11:26.4029160Z         """
2025-01-22T20:11:26.4029290Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4029400Z     
2025-01-22T20:11:26.4029440Z         Parameters
2025-01-22T20:11:26.4029490Z         ----------
2025-01-22T20:11:26.4029540Z         key : label
2025-01-22T20:11:26.4029580Z     
2025-01-22T20:11:26.4029630Z         Returns
2025-01-22T20:11:26.4029670Z         -------
2025-01-22T20:11:26.4029780Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4029820Z     
2025-01-22T20:11:26.4029870Z         Examples
2025-01-22T20:11:26.4029910Z         --------
2025-01-22T20:11:26.4029980Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4030040Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4030090Z         1
2025-01-22T20:11:26.4030130Z     
2025-01-22T20:11:26.4030210Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4030270Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4030320Z         slice(1, 3, None)
2025-01-22T20:11:26.4030360Z     
2025-01-22T20:11:26.4030440Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4030510Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4030570Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4030620Z         """
2025-01-22T20:11:26.4030690Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4030740Z         try:
2025-01-22T20:11:26.4030810Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4030810Z 
2025-01-22T20:11:26.4031000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4031090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4031200Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4031240Z     ???
2025-01-22T20:11:26.4031340Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4031430Z     ???
2025-01-22T20:11:26.4031640Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4031690Z     ???
2025-01-22T20:11:26.4031780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4031780Z 
2025-01-22T20:11:26.4031820Z >   ???
2025-01-22T20:11:26.4031870Z E   KeyError: 'cups'
2025-01-22T20:11:26.4031870Z 
2025-01-22T20:11:26.4031970Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4031970Z 
2025-01-22T20:11:26.4032100Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4032100Z 
2025-01-22T20:11:26.4032270Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4032520Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4033010Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4033020Z 
2025-01-22T20:11:26.4033080Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4033130Z     def plasma(
2025-01-22T20:11:26.4033170Z         self,
2025-01-22T20:11:26.4033220Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4033260Z         config,
2025-01-22T20:11:26.4033300Z     ):
2025-01-22T20:11:26.4033390Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4033450Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4033450Z 
2025-01-22T20:11:26.4033550Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4033630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4033700Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4033770Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4033890Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4034370Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4034450Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4034500Z     return BasePlasma(
2025-01-22T20:11:26.4034560Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4034620Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4034680Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4034730Z     self.update(**kwargs)
2025-01-22T20:11:26.4034790Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4034880Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4034960Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4035040Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4035220Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4035340Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4035510Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4035580Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4035680Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4035810Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4035950Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4036080Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4036290Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4036560Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4036700Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4036780Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4037350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4037460Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4037640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4037710Z     return self.apply_standard()
2025-01-22T20:11:26.4037930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4038020Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4038270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4038360Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4038530Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4038600Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4038830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4038890Z     return self._get_value(key)
2025-01-22T20:11:26.4039100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4039160Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4039250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4039250Z 
2025-01-22T20:11:26.4039370Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4039540Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4039590Z        't046000', 't048000'],
2025-01-22T20:11:26.4039630Z       dtype='object')
2025-01-22T20:11:26.4039680Z key = 'cups'
2025-01-22T20:11:26.4039680Z 
2025-01-22T20:11:26.4039730Z     def get_loc(self, key):
2025-01-22T20:11:26.4039780Z         """
2025-01-22T20:11:26.4039900Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4040040Z     
2025-01-22T20:11:26.4040090Z         Parameters
2025-01-22T20:11:26.4040140Z         ----------
2025-01-22T20:11:26.4040180Z         key : label
2025-01-22T20:11:26.4040230Z     
2025-01-22T20:11:26.4040280Z         Returns
2025-01-22T20:11:26.4040320Z         -------
2025-01-22T20:11:26.4040420Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4040470Z     
2025-01-22T20:11:26.4040510Z         Examples
2025-01-22T20:11:26.4040550Z         --------
2025-01-22T20:11:26.4040620Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4040680Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4040730Z         1
2025-01-22T20:11:26.4040770Z     
2025-01-22T20:11:26.4040840Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4040900Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4040960Z         slice(1, 3, None)
2025-01-22T20:11:26.4041000Z     
2025-01-22T20:11:26.4041080Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4041150Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4041210Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4041250Z         """
2025-01-22T20:11:26.4041320Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4041370Z         try:
2025-01-22T20:11:26.4041440Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4041490Z         except KeyError as err:
2025-01-22T20:11:26.4041560Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4041630Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4041720Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4041770Z             ):
2025-01-22T20:11:26.4041840Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4041960Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4042020Z E           KeyError: 'cups'
2025-01-22T20:11:26.4042020Z 
2025-01-22T20:11:26.4042250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4042510Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] _
2025-01-22T20:11:26.4042510Z 
2025-01-22T20:11:26.4042650Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4042820Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4042870Z        't046000', 't048000'],
2025-01-22T20:11:26.4042920Z       dtype='object')
2025-01-22T20:11:26.4042960Z key = 'cups'
2025-01-22T20:11:26.4042970Z 
2025-01-22T20:11:26.4043020Z     def get_loc(self, key):
2025-01-22T20:11:26.4043070Z         """
2025-01-22T20:11:26.4043200Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4043240Z     
2025-01-22T20:11:26.4043290Z         Parameters
2025-01-22T20:11:26.4043330Z         ----------
2025-01-22T20:11:26.4043380Z         key : label
2025-01-22T20:11:26.4043420Z     
2025-01-22T20:11:26.4043460Z         Returns
2025-01-22T20:11:26.4043500Z         -------
2025-01-22T20:11:26.4043600Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4043640Z     
2025-01-22T20:11:26.4043690Z         Examples
2025-01-22T20:11:26.4043730Z         --------
2025-01-22T20:11:26.4043800Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4043860Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4043900Z         1
2025-01-22T20:11:26.4043950Z     
2025-01-22T20:11:26.4044020Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4044080Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4044130Z         slice(1, 3, None)
2025-01-22T20:11:26.4044170Z     
2025-01-22T20:11:26.4044250Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4044410Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4044480Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4044520Z         """
2025-01-22T20:11:26.4044590Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4044640Z         try:
2025-01-22T20:11:26.4044710Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4044710Z 
2025-01-22T20:11:26.4044920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4045010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4045110Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4045150Z     ???
2025-01-22T20:11:26.4045250Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4045300Z     ???
2025-01-22T20:11:26.4045510Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4045560Z     ???
2025-01-22T20:11:26.4045640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4045650Z 
2025-01-22T20:11:26.4045690Z >   ???
2025-01-22T20:11:26.4045740Z E   KeyError: 'cups'
2025-01-22T20:11:26.4045740Z 
2025-01-22T20:11:26.4045840Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4045840Z 
2025-01-22T20:11:26.4045970Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4045980Z 
2025-01-22T20:11:26.4046150Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4046410Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4046900Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4046970Z 
2025-01-22T20:11:26.4047050Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4047090Z     def plasma(
2025-01-22T20:11:26.4047140Z         self,
2025-01-22T20:11:26.4047190Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4047240Z         config,
2025-01-22T20:11:26.4047290Z     ):
2025-01-22T20:11:26.4047380Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4047470Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4047470Z 
2025-01-22T20:11:26.4047560Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4047640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4047730Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4047790Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4047930Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4048000Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4048080Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4048140Z     return BasePlasma(
2025-01-22T20:11:26.4048190Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4048250Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4048320Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4048370Z     self.update(**kwargs)
2025-01-22T20:11:26.4048430Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4048530Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4048610Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4048690Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4048880Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4049000Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4049170Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4049330Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4049430Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4049560Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4049700Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4049840Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4050040Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4050180Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4050320Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4050400Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4050600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4050700Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4050900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4050960Z     return self.apply_standard()
2025-01-22T20:11:26.4051180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4051270Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4051510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4051600Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4051770Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4051830Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4052040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4052150Z     return self._get_value(key)
2025-01-22T20:11:26.4052360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4052420Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4052510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4052510Z 
2025-01-22T20:11:26.4052640Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4052800Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4052860Z        't046000', 't048000'],
2025-01-22T20:11:26.4052900Z       dtype='object')
2025-01-22T20:11:26.4052950Z key = 'cups'
2025-01-22T20:11:26.4052950Z 
2025-01-22T20:11:26.4053000Z     def get_loc(self, key):
2025-01-22T20:11:26.4053050Z         """
2025-01-22T20:11:26.4053170Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4053220Z     
2025-01-22T20:11:26.4053260Z         Parameters
2025-01-22T20:11:26.4053310Z         ----------
2025-01-22T20:11:26.4053350Z         key : label
2025-01-22T20:11:26.4053400Z     
2025-01-22T20:11:26.4053440Z         Returns
2025-01-22T20:11:26.4053480Z         -------
2025-01-22T20:11:26.4053580Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4053630Z     
2025-01-22T20:11:26.4057600Z         Examples
2025-01-22T20:11:26.4057720Z         --------
2025-01-22T20:11:26.4057800Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4057850Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4057900Z         1
2025-01-22T20:11:26.4057940Z     
2025-01-22T20:11:26.4058020Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4058080Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4058150Z         slice(1, 3, None)
2025-01-22T20:11:26.4058180Z     
2025-01-22T20:11:26.4058260Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4058880Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4058950Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4059000Z         """
2025-01-22T20:11:26.4059080Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4059120Z         try:
2025-01-22T20:11:26.4059200Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4059260Z         except KeyError as err:
2025-01-22T20:11:26.4059330Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4059400Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4059490Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4059540Z             ):
2025-01-22T20:11:26.4059600Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4059660Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4059710Z E           KeyError: 'cups'
2025-01-22T20:11:26.4059720Z 
2025-01-22T20:11:26.4059940Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4060200Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues_norm_factor] _
2025-01-22T20:11:26.4060210Z 
2025-01-22T20:11:26.4060340Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4060510Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4060550Z        't046000', 't048000'],
2025-01-22T20:11:26.4060610Z       dtype='object')
2025-01-22T20:11:26.4060650Z key = 'cups'
2025-01-22T20:11:26.4060650Z 
2025-01-22T20:11:26.4060710Z     def get_loc(self, key):
2025-01-22T20:11:26.4060750Z         """
2025-01-22T20:11:26.4060880Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4061100Z     
2025-01-22T20:11:26.4061160Z         Parameters
2025-01-22T20:11:26.4061210Z         ----------
2025-01-22T20:11:26.4061260Z         key : label
2025-01-22T20:11:26.4061300Z     
2025-01-22T20:11:26.4061340Z         Returns
2025-01-22T20:11:26.4061390Z         -------
2025-01-22T20:11:26.4061500Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4061540Z     
2025-01-22T20:11:26.4061580Z         Examples
2025-01-22T20:11:26.4061630Z         --------
2025-01-22T20:11:26.4061690Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4061750Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4061790Z         1
2025-01-22T20:11:26.4061840Z     
2025-01-22T20:11:26.4061910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4061980Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4062030Z         slice(1, 3, None)
2025-01-22T20:11:26.4062080Z     
2025-01-22T20:11:26.4062160Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4062230Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4062300Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4062340Z         """
2025-01-22T20:11:26.4062410Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4062450Z         try:
2025-01-22T20:11:26.4062530Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4062530Z 
2025-01-22T20:11:26.4062730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4062820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4062920Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4062970Z     ???
2025-01-22T20:11:26.4063060Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4063110Z     ???
2025-01-22T20:11:26.4063320Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4063370Z     ???
2025-01-22T20:11:26.4063530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4063530Z 
2025-01-22T20:11:26.4063580Z >   ???
2025-01-22T20:11:26.4063620Z E   KeyError: 'cups'
2025-01-22T20:11:26.4063630Z 
2025-01-22T20:11:26.4063720Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4063720Z 
2025-01-22T20:11:26.4063850Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4063850Z 
2025-01-22T20:11:26.4064020Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4064280Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4064770Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4064780Z 
2025-01-22T20:11:26.4064840Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4064890Z     def plasma(
2025-01-22T20:11:26.4064940Z         self,
2025-01-22T20:11:26.4064990Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4065040Z         config,
2025-01-22T20:11:26.4065080Z     ):
2025-01-22T20:11:26.4065170Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4065250Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4065250Z 
2025-01-22T20:11:26.4065340Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4065430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4065500Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4065570Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4065700Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4065840Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4065920Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4065970Z     return BasePlasma(
2025-01-22T20:11:26.4066040Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4066100Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4066160Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4066210Z     self.update(**kwargs)
2025-01-22T20:11:26.4066270Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4066360Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4066450Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4066520Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4066710Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4066830Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4067000Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4067070Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4067160Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4067300Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4067430Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4067570Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4067770Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4067910Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4068050Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4068120Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4068340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4068440Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4068700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4068760Z     return self.apply_standard()
2025-01-22T20:11:26.4068980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4069080Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4069320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4069410Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4069580Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4069640Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4069850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4069910Z     return self._get_value(key)
2025-01-22T20:11:26.4070120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4070190Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4070280Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4070280Z 
2025-01-22T20:11:26.4070410Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4070580Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4070640Z        't046000', 't048000'],
2025-01-22T20:11:26.4070680Z       dtype='object')
2025-01-22T20:11:26.4070730Z key = 'cups'
2025-01-22T20:11:26.4070730Z 
2025-01-22T20:11:26.4070780Z     def get_loc(self, key):
2025-01-22T20:11:26.4070820Z         """
2025-01-22T20:11:26.4070950Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4071040Z     
2025-01-22T20:11:26.4071090Z         Parameters
2025-01-22T20:11:26.4071130Z         ----------
2025-01-22T20:11:26.4071180Z         key : label
2025-01-22T20:11:26.4071220Z     
2025-01-22T20:11:26.4071270Z         Returns
2025-01-22T20:11:26.4071310Z         -------
2025-01-22T20:11:26.4071410Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4071450Z     
2025-01-22T20:11:26.4071490Z         Examples
2025-01-22T20:11:26.4071530Z         --------
2025-01-22T20:11:26.4071600Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4071660Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4071710Z         1
2025-01-22T20:11:26.4071750Z     
2025-01-22T20:11:26.4071820Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4071890Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4071940Z         slice(1, 3, None)
2025-01-22T20:11:26.4071980Z     
2025-01-22T20:11:26.4072060Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4072130Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4072200Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4072240Z         """
2025-01-22T20:11:26.4072310Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4072360Z         try:
2025-01-22T20:11:26.4072420Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4072480Z         except KeyError as err:
2025-01-22T20:11:26.4072550Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4072630Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4072720Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4072760Z             ):
2025-01-22T20:11:26.4072820Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4072880Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4072940Z E           KeyError: 'cups'
2025-01-22T20:11:26.4072940Z 
2025-01-22T20:11:26.4073150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4073460Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blue_estimator] _
2025-01-22T20:11:26.4073460Z 
2025-01-22T20:11:26.4073590Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4073760Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4073810Z        't046000', 't048000'],
2025-01-22T20:11:26.4073860Z       dtype='object')
2025-01-22T20:11:26.4073900Z key = 'cups'
2025-01-22T20:11:26.4073910Z 
2025-01-22T20:11:26.4073960Z     def get_loc(self, key):
2025-01-22T20:11:26.4074000Z         """
2025-01-22T20:11:26.4074120Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4074170Z     
2025-01-22T20:11:26.4074220Z         Parameters
2025-01-22T20:11:26.4074270Z         ----------
2025-01-22T20:11:26.4074310Z         key : label
2025-01-22T20:11:26.4074360Z     
2025-01-22T20:11:26.4074400Z         Returns
2025-01-22T20:11:26.4074440Z         -------
2025-01-22T20:11:26.4074540Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4074580Z     
2025-01-22T20:11:26.4074660Z         Examples
2025-01-22T20:11:26.4074740Z         --------
2025-01-22T20:11:26.4074810Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4074870Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4074910Z         1
2025-01-22T20:11:26.4074960Z     
2025-01-22T20:11:26.4075030Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4075090Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4075140Z         slice(1, 3, None)
2025-01-22T20:11:26.4075180Z     
2025-01-22T20:11:26.4075260Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4075420Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4075490Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4075530Z         """
2025-01-22T20:11:26.4075610Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4075650Z         try:
2025-01-22T20:11:26.4075730Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4075730Z 
2025-01-22T20:11:26.4075920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4076010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4076110Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4076160Z     ???
2025-01-22T20:11:26.4076260Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4076300Z     ???
2025-01-22T20:11:26.4076650Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4076700Z     ???
2025-01-22T20:11:26.4076790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4076800Z 
2025-01-22T20:11:26.4076840Z >   ???
2025-01-22T20:11:26.4076890Z E   KeyError: 'cups'
2025-01-22T20:11:26.4076890Z 
2025-01-22T20:11:26.4076980Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4076980Z 
2025-01-22T20:11:26.4077120Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4077120Z 
2025-01-22T20:11:26.4077290Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4077540Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4078050Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4078060Z 
2025-01-22T20:11:26.4078470Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4078520Z     def plasma(
2025-01-22T20:11:26.4078560Z         self,
2025-01-22T20:11:26.4078620Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4078660Z         config,
2025-01-22T20:11:26.4078700Z     ):
2025-01-22T20:11:26.4078790Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4078860Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4078860Z 
2025-01-22T20:11:26.4078950Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4079030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4079110Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4079170Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4079310Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4079380Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4079470Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4079520Z     return BasePlasma(
2025-01-22T20:11:26.4079590Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4079650Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4079710Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4079760Z     self.update(**kwargs)
2025-01-22T20:11:26.4079830Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4079920Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4080000Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4080080Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4080260Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4080390Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4080550Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4080870Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4080970Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4081110Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4081240Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4081390Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4081600Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4081740Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4081890Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4081960Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4082170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4082260Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4082460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4082520Z     return self.apply_standard()
2025-01-22T20:11:26.4082750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4082840Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4083100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4083200Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4083370Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4083430Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4083640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4083700Z     return self._get_value(key)
2025-01-22T20:11:26.4083920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4084090Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4084180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4084180Z 
2025-01-22T20:11:26.4084310Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4084480Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4084530Z        't046000', 't048000'],
2025-01-22T20:11:26.4084580Z       dtype='object')
2025-01-22T20:11:26.4084620Z key = 'cups'
2025-01-22T20:11:26.4084630Z 
2025-01-22T20:11:26.4084680Z     def get_loc(self, key):
2025-01-22T20:11:26.4084720Z         """
2025-01-22T20:11:26.4084850Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4084890Z     
2025-01-22T20:11:26.4084940Z         Parameters
2025-01-22T20:11:26.4084980Z         ----------
2025-01-22T20:11:26.4085030Z         key : label
2025-01-22T20:11:26.4085070Z     
2025-01-22T20:11:26.4085120Z         Returns
2025-01-22T20:11:26.4085160Z         -------
2025-01-22T20:11:26.4085270Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4085320Z     
2025-01-22T20:11:26.4085360Z         Examples
2025-01-22T20:11:26.4085400Z         --------
2025-01-22T20:11:26.4085480Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4085540Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4085580Z         1
2025-01-22T20:11:26.4085620Z     
2025-01-22T20:11:26.4085700Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4085770Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4085820Z         slice(1, 3, None)
2025-01-22T20:11:26.4085860Z     
2025-01-22T20:11:26.4085940Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4086070Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4086140Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4086180Z         """
2025-01-22T20:11:26.4086250Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4086290Z         try:
2025-01-22T20:11:26.4086370Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4086420Z         except KeyError as err:
2025-01-22T20:11:26.4086490Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4086560Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4086650Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4086690Z             ):
2025-01-22T20:11:26.4086760Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4086820Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4086870Z E           KeyError: 'cups'
2025-01-22T20:11:26.4086880Z 
2025-01-22T20:11:26.4087090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4087380Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-volume] _
2025-01-22T20:11:26.4087380Z 
2025-01-22T20:11:26.4087510Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4087680Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4087730Z        't046000', 't048000'],
2025-01-22T20:11:26.4087770Z       dtype='object')
2025-01-22T20:11:26.4087820Z key = 'cups'
2025-01-22T20:11:26.4087830Z 
2025-01-22T20:11:26.4087880Z     def get_loc(self, key):
2025-01-22T20:11:26.4087920Z         """
2025-01-22T20:11:26.4088050Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4088090Z     
2025-01-22T20:11:26.4088130Z         Parameters
2025-01-22T20:11:26.4088180Z         ----------
2025-01-22T20:11:26.4088220Z         key : label
2025-01-22T20:11:26.4088270Z     
2025-01-22T20:11:26.4088390Z         Returns
2025-01-22T20:11:26.4088430Z         -------
2025-01-22T20:11:26.4088530Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4088580Z     
2025-01-22T20:11:26.4088620Z         Examples
2025-01-22T20:11:26.4088660Z         --------
2025-01-22T20:11:26.4088730Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4088790Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4088840Z         1
2025-01-22T20:11:26.4088870Z     
2025-01-22T20:11:26.4088950Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4089010Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4089060Z         slice(1, 3, None)
2025-01-22T20:11:26.4089100Z     
2025-01-22T20:11:26.4089180Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4089250Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4089320Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4089370Z         """
2025-01-22T20:11:26.4089440Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4089490Z         try:
2025-01-22T20:11:26.4089560Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4089560Z 
2025-01-22T20:11:26.4089750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4089840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4089950Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4089990Z     ???
2025-01-22T20:11:26.4090090Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4090130Z     ???
2025-01-22T20:11:26.4090350Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4090440Z     ???
2025-01-22T20:11:26.4090540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4090540Z 
2025-01-22T20:11:26.4090580Z >   ???
2025-01-22T20:11:26.4090630Z E   KeyError: 'cups'
2025-01-22T20:11:26.4090640Z 
2025-01-22T20:11:26.4090730Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4090740Z 
2025-01-22T20:11:26.4090860Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4090870Z 
2025-01-22T20:11:26.4091040Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4091290Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4091790Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4091790Z 
2025-01-22T20:11:26.4091850Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4091910Z     def plasma(
2025-01-22T20:11:26.4091950Z         self,
2025-01-22T20:11:26.4092030Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4092100Z         config,
2025-01-22T20:11:26.4092140Z     ):
2025-01-22T20:11:26.4092230Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4092290Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4092300Z 
2025-01-22T20:11:26.4092390Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4092470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4092550Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4092600Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4092730Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4092800Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4092890Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4092930Z     return BasePlasma(
2025-01-22T20:11:26.4093110Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4093170Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4093230Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4093280Z     self.update(**kwargs)
2025-01-22T20:11:26.4093340Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4093430Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4093510Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4093590Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4093770Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4093890Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4094050Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4094120Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4094220Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4094350Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4094480Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4094620Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4094830Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4094960Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4095100Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4095180Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4095380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4095470Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4095710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4095780Z     return self.apply_standard()
2025-01-22T20:11:26.4096000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4096100Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4096340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4096430Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4096590Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4096660Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4096870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4096920Z     return self._get_value(key)
2025-01-22T20:11:26.4097130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4097200Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4097290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4097300Z 
2025-01-22T20:11:26.4097420Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4097600Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4097650Z        't046000', 't048000'],
2025-01-22T20:11:26.4097710Z       dtype='object')
2025-01-22T20:11:26.4097750Z key = 'cups'
2025-01-22T20:11:26.4097750Z 
2025-01-22T20:11:26.4097810Z     def get_loc(self, key):
2025-01-22T20:11:26.4097850Z         """
2025-01-22T20:11:26.4097980Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4098020Z     
2025-01-22T20:11:26.4098080Z         Parameters
2025-01-22T20:11:26.4098120Z         ----------
2025-01-22T20:11:26.4098160Z         key : label
2025-01-22T20:11:26.4098510Z     
2025-01-22T20:11:26.4098560Z         Returns
2025-01-22T20:11:26.4098610Z         -------
2025-01-22T20:11:26.4098710Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4098760Z     
2025-01-22T20:11:26.4098800Z         Examples
2025-01-22T20:11:26.4098850Z         --------
2025-01-22T20:11:26.4098910Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4098970Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4099010Z         1
2025-01-22T20:11:26.4099060Z     
2025-01-22T20:11:26.4099130Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4099200Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4099250Z         slice(1, 3, None)
2025-01-22T20:11:26.4099290Z     
2025-01-22T20:11:26.4099370Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4099450Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4099520Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4099570Z         """
2025-01-22T20:11:26.4099640Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4099690Z         try:
2025-01-22T20:11:26.4099760Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4099810Z         except KeyError as err:
2025-01-22T20:11:26.4099880Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4099950Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4100040Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4100090Z             ):
2025-01-22T20:11:26.4100150Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4100210Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4100260Z E           KeyError: 'cups'
2025-01-22T20:11:26.4100270Z 
2025-01-22T20:11:26.4100480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4101190Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-r_inner] _
2025-01-22T20:11:26.4101200Z 
2025-01-22T20:11:26.4101330Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4101490Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4101550Z        't046000', 't048000'],
2025-01-22T20:11:26.4101590Z       dtype='object')
2025-01-22T20:11:26.4101640Z key = 'cups'
2025-01-22T20:11:26.4101640Z 
2025-01-22T20:11:26.4101690Z     def get_loc(self, key):
2025-01-22T20:11:26.4101740Z         """
2025-01-22T20:11:26.4101860Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4101900Z     
2025-01-22T20:11:26.4101950Z         Parameters
2025-01-22T20:11:26.4101990Z         ----------
2025-01-22T20:11:26.4102040Z         key : label
2025-01-22T20:11:26.4102080Z     
2025-01-22T20:11:26.4102130Z         Returns
2025-01-22T20:11:26.4102170Z         -------
2025-01-22T20:11:26.4102280Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4102320Z     
2025-01-22T20:11:26.4102370Z         Examples
2025-01-22T20:11:26.4102420Z         --------
2025-01-22T20:11:26.4102490Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4102550Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4102590Z         1
2025-01-22T20:11:26.4102630Z     
2025-01-22T20:11:26.4102710Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4102770Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4102820Z         slice(1, 3, None)
2025-01-22T20:11:26.4102860Z     
2025-01-22T20:11:26.4102940Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4103000Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4103070Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4103110Z         """
2025-01-22T20:11:26.4103180Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4103320Z         try:
2025-01-22T20:11:26.4103390Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4103390Z 
2025-01-22T20:11:26.4103590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4107520Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4107710Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4107750Z     ???
2025-01-22T20:11:26.4107850Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4107890Z     ???
2025-01-22T20:11:26.4108120Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4108160Z     ???
2025-01-22T20:11:26.4108240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4108250Z 
2025-01-22T20:11:26.4108300Z >   ???
2025-01-22T20:11:26.4108350Z E   KeyError: 'cups'
2025-01-22T20:11:26.4108360Z 
2025-01-22T20:11:26.4108450Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4108450Z 
2025-01-22T20:11:26.4108580Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4108580Z 
2025-01-22T20:11:26.4108750Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4109010Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4109500Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4109730Z 
2025-01-22T20:11:26.4109800Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4109840Z     def plasma(
2025-01-22T20:11:26.4109890Z         self,
2025-01-22T20:11:26.4109950Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4110000Z         config,
2025-01-22T20:11:26.4110040Z     ):
2025-01-22T20:11:26.4110120Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4110190Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4110190Z 
2025-01-22T20:11:26.4110280Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4110360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4110440Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4110500Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4110620Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4110700Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4110770Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4110830Z     return BasePlasma(
2025-01-22T20:11:26.4110890Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4110950Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4111010Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4111060Z     self.update(**kwargs)
2025-01-22T20:11:26.4111120Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4111210Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4111290Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4111370Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4111550Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4111680Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4111850Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4111910Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4112020Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4112150Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4112370Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4112510Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4112710Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4112850Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4113000Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4113070Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4113270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4113360Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4113550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4113620Z     return self.apply_standard()
2025-01-22T20:11:26.4113850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4113940Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4114200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4114290Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4114460Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4114530Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4114740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4114800Z     return self._get_value(key)
2025-01-22T20:11:26.4115010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4115130Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4115230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4115230Z 
2025-01-22T20:11:26.4115350Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4115530Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4115570Z        't046000', 't048000'],
2025-01-22T20:11:26.4115630Z       dtype='object')
2025-01-22T20:11:26.4115670Z key = 'cups'
2025-01-22T20:11:26.4115680Z 
2025-01-22T20:11:26.4115730Z     def get_loc(self, key):
2025-01-22T20:11:26.4115770Z         """
2025-01-22T20:11:26.4115900Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4115940Z     
2025-01-22T20:11:26.4115980Z         Parameters
2025-01-22T20:11:26.4116030Z         ----------
2025-01-22T20:11:26.4116080Z         key : label
2025-01-22T20:11:26.4116130Z     
2025-01-22T20:11:26.4116170Z         Returns
2025-01-22T20:11:26.4116220Z         -------
2025-01-22T20:11:26.4116320Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4116360Z     
2025-01-22T20:11:26.4116410Z         Examples
2025-01-22T20:11:26.4116450Z         --------
2025-01-22T20:11:26.4116530Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4116890Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4116930Z         1
2025-01-22T20:11:26.4116980Z     
2025-01-22T20:11:26.4117050Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4117110Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4117160Z         slice(1, 3, None)
2025-01-22T20:11:26.4117200Z     
2025-01-22T20:11:26.4117290Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4117350Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4117420Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4117470Z         """
2025-01-22T20:11:26.4117640Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4117680Z         try:
2025-01-22T20:11:26.4117760Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4117820Z         except KeyError as err:
2025-01-22T20:11:26.4117890Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4117960Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4118060Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4118100Z             ):
2025-01-22T20:11:26.4118170Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4118230Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4118290Z E           KeyError: 'cups'
2025-01-22T20:11:26.4118290Z 
2025-01-22T20:11:26.4118500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4118760Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population] _
2025-01-22T20:11:26.4118770Z 
2025-01-22T20:11:26.4118900Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4119070Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4119120Z        't046000', 't048000'],
2025-01-22T20:11:26.4119160Z       dtype='object')
2025-01-22T20:11:26.4119210Z key = 'cups'
2025-01-22T20:11:26.4119210Z 
2025-01-22T20:11:26.4119260Z     def get_loc(self, key):
2025-01-22T20:11:26.4119310Z         """
2025-01-22T20:11:26.4119430Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4119470Z     
2025-01-22T20:11:26.4119510Z         Parameters
2025-01-22T20:11:26.4119560Z         ----------
2025-01-22T20:11:26.4119600Z         key : label
2025-01-22T20:11:26.4119690Z     
2025-01-22T20:11:26.4119740Z         Returns
2025-01-22T20:11:26.4119780Z         -------
2025-01-22T20:11:26.4119880Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4119920Z     
2025-01-22T20:11:26.4119970Z         Examples
2025-01-22T20:11:26.4120010Z         --------
2025-01-22T20:11:26.4120090Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4120150Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4120190Z         1
2025-01-22T20:11:26.4120230Z     
2025-01-22T20:11:26.4120360Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4120440Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4120490Z         slice(1, 3, None)
2025-01-22T20:11:26.4120530Z     
2025-01-22T20:11:26.4120610Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4120680Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4120740Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4120790Z         """
2025-01-22T20:11:26.4120860Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4120910Z         try:
2025-01-22T20:11:26.4120990Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4120990Z 
2025-01-22T20:11:26.4121200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4121290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4121400Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4121440Z     ???
2025-01-22T20:11:26.4121540Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4121580Z     ???
2025-01-22T20:11:26.4121800Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4121850Z     ???
2025-01-22T20:11:26.4121930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4121940Z 
2025-01-22T20:11:26.4121990Z >   ???
2025-01-22T20:11:26.4122040Z E   KeyError: 'cups'
2025-01-22T20:11:26.4122360Z 
2025-01-22T20:11:26.4122480Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4122490Z 
2025-01-22T20:11:26.4122610Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4122620Z 
2025-01-22T20:11:26.4122790Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4123040Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4123520Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4123530Z 
2025-01-22T20:11:26.4123590Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4123640Z     def plasma(
2025-01-22T20:11:26.4123680Z         self,
2025-01-22T20:11:26.4123740Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4123780Z         config,
2025-01-22T20:11:26.4123820Z     ):
2025-01-22T20:11:26.4123910Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4123970Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4123980Z 
2025-01-22T20:11:26.4124070Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4124150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4124230Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4124290Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4124430Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4124500Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4124580Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4124870Z     return BasePlasma(
2025-01-22T20:11:26.4124930Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4124990Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4125050Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4125110Z     self.update(**kwargs)
2025-01-22T20:11:26.4125170Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4125260Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4125350Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4125430Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4125610Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4125730Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4125900Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4125970Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4126060Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4126200Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4126340Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4126480Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4126690Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4126830Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4126970Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4127040Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4127240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4127340Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4127530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4127590Z     return self.apply_standard()
2025-01-22T20:11:26.4127810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4127960Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4128200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4128290Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4128470Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4128520Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4128740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4128790Z     return self._get_value(key)
2025-01-22T20:11:26.4129010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4129070Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4129160Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4129160Z 
2025-01-22T20:11:26.4129290Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4129460Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4129520Z        't046000', 't048000'],
2025-01-22T20:11:26.4129560Z       dtype='object')
2025-01-22T20:11:26.4129610Z key = 'cups'
2025-01-22T20:11:26.4129610Z 
2025-01-22T20:11:26.4129660Z     def get_loc(self, key):
2025-01-22T20:11:26.4129710Z         """
2025-01-22T20:11:26.4129830Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4129870Z     
2025-01-22T20:11:26.4129910Z         Parameters
2025-01-22T20:11:26.4129960Z         ----------
2025-01-22T20:11:26.4130000Z         key : label
2025-01-22T20:11:26.4130110Z     
2025-01-22T20:11:26.4130160Z         Returns
2025-01-22T20:11:26.4130200Z         -------
2025-01-22T20:11:26.4130310Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4130350Z     
2025-01-22T20:11:26.4130400Z         Examples
2025-01-22T20:11:26.4130440Z         --------
2025-01-22T20:11:26.4130520Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4130570Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4130620Z         1
2025-01-22T20:11:26.4130660Z     
2025-01-22T20:11:26.4130740Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4130800Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4130850Z         slice(1, 3, None)
2025-01-22T20:11:26.4130890Z     
2025-01-22T20:11:26.4130970Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4131040Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4131110Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4131150Z         """
2025-01-22T20:11:26.4131230Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4131270Z         try:
2025-01-22T20:11:26.4131350Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4131410Z         except KeyError as err:
2025-01-22T20:11:26.4131480Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4131550Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4131640Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4131680Z             ):
2025-01-22T20:11:26.4131750Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4131810Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4131860Z E           KeyError: 'cups'
2025-01-22T20:11:26.4131860Z 
2025-01-22T20:11:26.4132070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4132350Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population_updated] _
2025-01-22T20:11:26.4132410Z 
2025-01-22T20:11:26.4132550Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4132710Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4132760Z        't046000', 't048000'],
2025-01-22T20:11:26.4132810Z       dtype='object')
2025-01-22T20:11:26.4132860Z key = 'cups'
2025-01-22T20:11:26.4132860Z 
2025-01-22T20:11:26.4132910Z     def get_loc(self, key):
2025-01-22T20:11:26.4132950Z         """
2025-01-22T20:11:26.4133080Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4133120Z     
2025-01-22T20:11:26.4133170Z         Parameters
2025-01-22T20:11:26.4133220Z         ----------
2025-01-22T20:11:26.4133270Z         key : label
2025-01-22T20:11:26.4133310Z     
2025-01-22T20:11:26.4133350Z         Returns
2025-01-22T20:11:26.4133400Z         -------
2025-01-22T20:11:26.4133500Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4133540Z     
2025-01-22T20:11:26.4133590Z         Examples
2025-01-22T20:11:26.4133630Z         --------
2025-01-22T20:11:26.4133700Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4133760Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4133800Z         1
2025-01-22T20:11:26.4133850Z     
2025-01-22T20:11:26.4133930Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4133990Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4134040Z         slice(1, 3, None)
2025-01-22T20:11:26.4134090Z     
2025-01-22T20:11:26.4134170Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4134230Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4134300Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4134400Z         """
2025-01-22T20:11:26.4134480Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4134520Z         try:
2025-01-22T20:11:26.4134600Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4134600Z 
2025-01-22T20:11:26.4134790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4134880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4134980Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4135030Z     ???
2025-01-22T20:11:26.4135130Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4135170Z     ???
2025-01-22T20:11:26.4135390Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4135440Z     ???
2025-01-22T20:11:26.4135530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4135530Z 
2025-01-22T20:11:26.4135580Z >   ???
2025-01-22T20:11:26.4135630Z E   KeyError: 'cups'
2025-01-22T20:11:26.4135630Z 
2025-01-22T20:11:26.4135730Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4135730Z 
2025-01-22T20:11:26.4135860Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4135870Z 
2025-01-22T20:11:26.4136040Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4136300Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4136790Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4136790Z 
2025-01-22T20:11:26.4136860Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4136910Z     def plasma(
2025-01-22T20:11:26.4136950Z         self,
2025-01-22T20:11:26.4137000Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4137100Z         config,
2025-01-22T20:11:26.4137140Z     ):
2025-01-22T20:11:26.4137230Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4137290Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4137290Z 
2025-01-22T20:11:26.4137380Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4137470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4137540Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4137600Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4137730Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4137800Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4137880Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4137930Z     return BasePlasma(
2025-01-22T20:11:26.4137990Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4138060Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4138130Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4138190Z     self.update(**kwargs)
2025-01-22T20:11:26.4138250Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4138340Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4138420Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4138500Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4138680Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4138800Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4138970Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4139040Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4139140Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4139310Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4139450Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4139600Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4139800Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4139940Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4140080Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4140150Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4140350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4140440Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4140630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4140700Z     return self.apply_standard()
2025-01-22T20:11:26.4140910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4141010Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4141260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4141350Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4141520Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4141570Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4141790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4141850Z     return self._get_value(key)
2025-01-22T20:11:26.4142070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4142130Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4142220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4142880Z 
2025-01-22T20:11:26.4143080Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4143250Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4143300Z        't046000', 't048000'],
2025-01-22T20:11:26.4143350Z       dtype='object')
2025-01-22T20:11:26.4143390Z key = 'cups'
2025-01-22T20:11:26.4143400Z 
2025-01-22T20:11:26.4143450Z     def get_loc(self, key):
2025-01-22T20:11:26.4143490Z         """
2025-01-22T20:11:26.4143610Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4143660Z     
2025-01-22T20:11:26.4143700Z         Parameters
2025-01-22T20:11:26.4143750Z         ----------
2025-01-22T20:11:26.4143790Z         key : label
2025-01-22T20:11:26.4143840Z     
2025-01-22T20:11:26.4143880Z         Returns
2025-01-22T20:11:26.4143920Z         -------
2025-01-22T20:11:26.4144020Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4144070Z     
2025-01-22T20:11:26.4144110Z         Examples
2025-01-22T20:11:26.4144150Z         --------
2025-01-22T20:11:26.4144230Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4144290Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4144330Z         1
2025-01-22T20:11:26.4144380Z     
2025-01-22T20:11:26.4144450Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4144510Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4144570Z         slice(1, 3, None)
2025-01-22T20:11:26.4144610Z     
2025-01-22T20:11:26.4144690Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4144750Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4144820Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4145290Z         """
2025-01-22T20:11:26.4145370Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4145410Z         try:
2025-01-22T20:11:26.4145490Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4145550Z         except KeyError as err:
2025-01-22T20:11:26.4145610Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4145690Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4145780Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4145820Z             ):
2025-01-22T20:11:26.4145890Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4145950Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4146000Z E           KeyError: 'cups'
2025-01-22T20:11:26.4146000Z 
2025-01-22T20:11:26.4146210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4146400Z _ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:26.4146410Z 
2025-01-22T20:11:26.4146540Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4146710Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4146750Z        't046000', 't048000'],
2025-01-22T20:11:26.4146810Z       dtype='object')
2025-01-22T20:11:26.4146850Z key = 'cups'
2025-01-22T20:11:26.4146850Z 
2025-01-22T20:11:26.4146900Z     def get_loc(self, key):
2025-01-22T20:11:26.4146950Z         """
2025-01-22T20:11:26.4147070Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4147110Z     
2025-01-22T20:11:26.4147160Z         Parameters
2025-01-22T20:11:26.4147200Z         ----------
2025-01-22T20:11:26.4147250Z         key : label
2025-01-22T20:11:26.4147290Z     
2025-01-22T20:11:26.4147330Z         Returns
2025-01-22T20:11:26.4147370Z         -------
2025-01-22T20:11:26.4147470Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4147520Z     
2025-01-22T20:11:26.4147660Z         Examples
2025-01-22T20:11:26.4147710Z         --------
2025-01-22T20:11:26.4147780Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4147840Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4147880Z         1
2025-01-22T20:11:26.4147920Z     
2025-01-22T20:11:26.4147990Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4148060Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4148110Z         slice(1, 3, None)
2025-01-22T20:11:26.4148150Z     
2025-01-22T20:11:26.4148230Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4148290Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4148350Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4148400Z         """
2025-01-22T20:11:26.4148480Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4148520Z         try:
2025-01-22T20:11:26.4148600Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4148600Z 
2025-01-22T20:11:26.4148790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4148880Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4148990Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4149030Z     ???
2025-01-22T20:11:26.4149130Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4149170Z     ???
2025-01-22T20:11:26.4149380Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4149430Z     ???
2025-01-22T20:11:26.4149510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4149510Z 
2025-01-22T20:11:26.4149560Z >   ???
2025-01-22T20:11:26.4149610Z E   KeyError: 'cups'
2025-01-22T20:11:26.4149670Z 
2025-01-22T20:11:26.4149770Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4149780Z 
2025-01-22T20:11:26.4149910Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4149910Z 
2025-01-22T20:11:26.4150080Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4150340Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4150820Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4150830Z 
2025-01-22T20:11:26.4150890Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4150940Z     def plasma(
2025-01-22T20:11:26.4150990Z         self,
2025-01-22T20:11:26.4151040Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4151080Z         config,
2025-01-22T20:11:26.4151120Z     ):
2025-01-22T20:11:26.4151210Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4151280Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4151290Z 
2025-01-22T20:11:26.4151370Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4151460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4151530Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4151590Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4151710Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4151780Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4151870Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4151910Z     return BasePlasma(
2025-01-22T20:11:26.4151980Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4152030Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4152100Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4152150Z     self.update(**kwargs)
2025-01-22T20:11:26.4152270Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4152360Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4152440Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4152510Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4152700Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4152820Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4152980Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4153050Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4153150Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4153280Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4153420Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4153550Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4153760Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4153900Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4154040Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4154110Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4154310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4154410Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4154600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4154650Z     return self.apply_standard()
2025-01-22T20:11:26.4154920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4155020Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4155270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4155350Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4155520Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4155580Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4155810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4159910Z     return self._get_value(key)
2025-01-22T20:11:26.4160200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4160260Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4160350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4160370Z 
2025-01-22T20:11:26.4160500Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4160670Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4160730Z        't046000', 't048000'],
2025-01-22T20:11:26.4160770Z       dtype='object')
2025-01-22T20:11:26.4160820Z key = 'cups'
2025-01-22T20:11:26.4160820Z 
2025-01-22T20:11:26.4160880Z     def get_loc(self, key):
2025-01-22T20:11:26.4160920Z         """
2025-01-22T20:11:26.4161050Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4161090Z     
2025-01-22T20:11:26.4161130Z         Parameters
2025-01-22T20:11:26.4161180Z         ----------
2025-01-22T20:11:26.4161220Z         key : label
2025-01-22T20:11:26.4161270Z     
2025-01-22T20:11:26.4161320Z         Returns
2025-01-22T20:11:26.4161360Z         -------
2025-01-22T20:11:26.4161460Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4161740Z     
2025-01-22T20:11:26.4161790Z         Examples
2025-01-22T20:11:26.4161830Z         --------
2025-01-22T20:11:26.4161900Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4161960Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4162010Z         1
2025-01-22T20:11:26.4162050Z     
2025-01-22T20:11:26.4162130Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4162190Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4162240Z         slice(1, 3, None)
2025-01-22T20:11:26.4162290Z     
2025-01-22T20:11:26.4162380Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4162440Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4162500Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4162550Z         """
2025-01-22T20:11:26.4162620Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4162680Z         try:
2025-01-22T20:11:26.4162750Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4162810Z         except KeyError as err:
2025-01-22T20:11:26.4162880Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4162960Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4163050Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4163100Z             ):
2025-01-22T20:11:26.4163160Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4163220Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4163270Z E           KeyError: 'cups'
2025-01-22T20:11:26.4163280Z 
2025-01-22T20:11:26.4163490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4163740Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-time_explosion] _
2025-01-22T20:11:26.4163830Z 
2025-01-22T20:11:26.4163960Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4164130Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4164180Z        't046000', 't048000'],
2025-01-22T20:11:26.4164230Z       dtype='object')
2025-01-22T20:11:26.4164280Z key = 'cups'
2025-01-22T20:11:26.4164280Z 
2025-01-22T20:11:26.4164330Z     def get_loc(self, key):
2025-01-22T20:11:26.4164380Z         """
2025-01-22T20:11:26.4164500Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4164550Z     
2025-01-22T20:11:26.4164590Z         Parameters
2025-01-22T20:11:26.4164640Z         ----------
2025-01-22T20:11:26.4164680Z         key : label
2025-01-22T20:11:26.4164720Z     
2025-01-22T20:11:26.4164770Z         Returns
2025-01-22T20:11:26.4164810Z         -------
2025-01-22T20:11:26.4164910Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4164960Z     
2025-01-22T20:11:26.4165010Z         Examples
2025-01-22T20:11:26.4165050Z         --------
2025-01-22T20:11:26.4165120Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4165180Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4165220Z         1
2025-01-22T20:11:26.4165260Z     
2025-01-22T20:11:26.4165340Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4165400Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4165450Z         slice(1, 3, None)
2025-01-22T20:11:26.4165490Z     
2025-01-22T20:11:26.4165570Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4165630Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4165700Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4165740Z         """
2025-01-22T20:11:26.4165810Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4165850Z         try:
2025-01-22T20:11:26.4165930Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4165930Z 
2025-01-22T20:11:26.4166450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4166550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4166650Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4166690Z     ???
2025-01-22T20:11:26.4166800Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4166840Z     ???
2025-01-22T20:11:26.4167050Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4167090Z     ???
2025-01-22T20:11:26.4167190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4167190Z 
2025-01-22T20:11:26.4167230Z >   ???
2025-01-22T20:11:26.4167280Z E   KeyError: 'cups'
2025-01-22T20:11:26.4167280Z 
2025-01-22T20:11:26.4167380Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4167380Z 
2025-01-22T20:11:26.4167510Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4167510Z 
2025-01-22T20:11:26.4167680Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4167940Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4168430Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4168440Z 
2025-01-22T20:11:26.4168490Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4168550Z     def plasma(
2025-01-22T20:11:26.4168590Z         self,
2025-01-22T20:11:26.4168640Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4169090Z         config,
2025-01-22T20:11:26.4169140Z     ):
2025-01-22T20:11:26.4169220Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4169290Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4169300Z 
2025-01-22T20:11:26.4169390Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4169480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4169550Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4169610Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4169750Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4169820Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4169890Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4169940Z     return BasePlasma(
2025-01-22T20:11:26.4170000Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4170060Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4170120Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4170180Z     self.update(**kwargs)
2025-01-22T20:11:26.4170240Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4170340Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4170420Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4170490Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4170670Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4170790Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4170960Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4171030Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4171120Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4171250Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4171380Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4171530Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4171810Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4171950Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4172100Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4172180Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4172390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4172480Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4172680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4172740Z     return self.apply_standard()
2025-01-22T20:11:26.4172960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4173050Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4173310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4173400Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4173570Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4173630Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4173850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4173910Z     return self._get_value(key)
2025-01-22T20:11:26.4174110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4174170Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4174260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4174320Z 
2025-01-22T20:11:26.4174460Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4174640Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4174700Z        't046000', 't048000'],
2025-01-22T20:11:26.4174750Z       dtype='object')
2025-01-22T20:11:26.4174790Z key = 'cups'
2025-01-22T20:11:26.4174790Z 
2025-01-22T20:11:26.4174840Z     def get_loc(self, key):
2025-01-22T20:11:26.4174890Z         """
2025-01-22T20:11:26.4175010Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4175050Z     
2025-01-22T20:11:26.4175100Z         Parameters
2025-01-22T20:11:26.4175140Z         ----------
2025-01-22T20:11:26.4175190Z         key : label
2025-01-22T20:11:26.4175230Z     
2025-01-22T20:11:26.4175270Z         Returns
2025-01-22T20:11:26.4175320Z         -------
2025-01-22T20:11:26.4175420Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4175470Z     
2025-01-22T20:11:26.4175510Z         Examples
2025-01-22T20:11:26.4175560Z         --------
2025-01-22T20:11:26.4175630Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4175690Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4175730Z         1
2025-01-22T20:11:26.4175780Z     
2025-01-22T20:11:26.4175850Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4175910Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4175960Z         slice(1, 3, None)
2025-01-22T20:11:26.4176000Z     
2025-01-22T20:11:26.4176080Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4176150Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4176220Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4176260Z         """
2025-01-22T20:11:26.4176330Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4176380Z         try:
2025-01-22T20:11:26.4176450Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4176510Z         except KeyError as err:
2025-01-22T20:11:26.4176650Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4176720Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4176820Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4176860Z             ):
2025-01-22T20:11:26.4176930Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4176990Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4177050Z E           KeyError: 'cups'
2025-01-22T20:11:26.4177050Z 
2025-01-22T20:11:26.4177260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4177530Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-link_t_rad_t_electron] _
2025-01-22T20:11:26.4177530Z 
2025-01-22T20:11:26.4177660Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4177830Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4177880Z        't046000', 't048000'],
2025-01-22T20:11:26.4177930Z       dtype='object')
2025-01-22T20:11:26.4177980Z key = 'cups'
2025-01-22T20:11:26.4177980Z 
2025-01-22T20:11:26.4178030Z     def get_loc(self, key):
2025-01-22T20:11:26.4178080Z         """
2025-01-22T20:11:26.4178200Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4178240Z     
2025-01-22T20:11:26.4178280Z         Parameters
2025-01-22T20:11:26.4178330Z         ----------
2025-01-22T20:11:26.4178370Z         key : label
2025-01-22T20:11:26.4178410Z     
2025-01-22T20:11:26.4178450Z         Returns
2025-01-22T20:11:26.4178500Z         -------
2025-01-22T20:11:26.4178600Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4178710Z     
2025-01-22T20:11:26.4178770Z         Examples
2025-01-22T20:11:26.4178820Z         --------
2025-01-22T20:11:26.4178890Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4178950Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4178990Z         1
2025-01-22T20:11:26.4179030Z     
2025-01-22T20:11:26.4179110Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4179170Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4179220Z         slice(1, 3, None)
2025-01-22T20:11:26.4179260Z     
2025-01-22T20:11:26.4179340Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4179410Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4179480Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4179520Z         """
2025-01-22T20:11:26.4179600Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4179640Z         try:
2025-01-22T20:11:26.4179720Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4179720Z 
2025-01-22T20:11:26.4179920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4180010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4180120Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4180160Z     ???
2025-01-22T20:11:26.4180260Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4180300Z     ???
2025-01-22T20:11:26.4180520Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4180560Z     ???
2025-01-22T20:11:26.4180650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4180650Z 
2025-01-22T20:11:26.4180690Z >   ???
2025-01-22T20:11:26.4180740Z E   KeyError: 'cups'
2025-01-22T20:11:26.4180740Z 
2025-01-22T20:11:26.4180840Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4180840Z 
2025-01-22T20:11:26.4180970Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4181040Z 
2025-01-22T20:11:26.4181210Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4181460Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4182020Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4182040Z 
2025-01-22T20:11:26.4182110Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4182160Z     def plasma(
2025-01-22T20:11:26.4182200Z         self,
2025-01-22T20:11:26.4182250Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4182300Z         config,
2025-01-22T20:11:26.4182340Z     ):
2025-01-22T20:11:26.4182430Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4182500Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4182510Z 
2025-01-22T20:11:26.4182610Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4182690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4182770Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4182820Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4182950Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4183020Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4183100Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4183150Z     return BasePlasma(
2025-01-22T20:11:26.4183210Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4183270Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4183330Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4183500Z     self.update(**kwargs)
2025-01-22T20:11:26.4183560Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4183660Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4183750Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4183820Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4184010Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4184130Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4184290Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4184370Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4184470Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4184600Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4184740Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4184880Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4185080Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4185220Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4185360Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4185430Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4185640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4185730Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4185920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4185970Z     return self.apply_standard()
2025-01-22T20:11:26.4186190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4186290Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4186530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4187040Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4187210Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4187340Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4187560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4187620Z     return self._get_value(key)
2025-01-22T20:11:26.4187820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4187890Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4187970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4187980Z 
2025-01-22T20:11:26.4188100Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4188280Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4188330Z        't046000', 't048000'],
2025-01-22T20:11:26.4188380Z       dtype='object')
2025-01-22T20:11:26.4188430Z key = 'cups'
2025-01-22T20:11:26.4188430Z 
2025-01-22T20:11:26.4188480Z     def get_loc(self, key):
2025-01-22T20:11:26.4188520Z         """
2025-01-22T20:11:26.4188650Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4188690Z     
2025-01-22T20:11:26.4188740Z         Parameters
2025-01-22T20:11:26.4188780Z         ----------
2025-01-22T20:11:26.4188830Z         key : label
2025-01-22T20:11:26.4188870Z     
2025-01-22T20:11:26.4188910Z         Returns
2025-01-22T20:11:26.4188960Z         -------
2025-01-22T20:11:26.4189060Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4189560Z     
2025-01-22T20:11:26.4189610Z         Examples
2025-01-22T20:11:26.4189660Z         --------
2025-01-22T20:11:26.4189740Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4189800Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4189840Z         1
2025-01-22T20:11:26.4189890Z     
2025-01-22T20:11:26.4189960Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4190030Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4190070Z         slice(1, 3, None)
2025-01-22T20:11:26.4190120Z     
2025-01-22T20:11:26.4190190Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4190260Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4190320Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4190370Z         """
2025-01-22T20:11:26.4190440Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4190490Z         try:
2025-01-22T20:11:26.4190560Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4190620Z         except KeyError as err:
2025-01-22T20:11:26.4190690Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4190770Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4190860Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4190900Z             ):
2025-01-22T20:11:26.4190970Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4191030Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4191080Z E           KeyError: 'cups'
2025-01-22T20:11:26.4191080Z 
2025-01-22T20:11:26.4191290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4191520Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:26.4191520Z 
2025-01-22T20:11:26.4191640Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4191810Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4191940Z        't046000', 't048000'],
2025-01-22T20:11:26.4191990Z       dtype='object')
2025-01-22T20:11:26.4192030Z key = 'cups'
2025-01-22T20:11:26.4192040Z 
2025-01-22T20:11:26.4192090Z     def get_loc(self, key):
2025-01-22T20:11:26.4192130Z         """
2025-01-22T20:11:26.4192250Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4192300Z     
2025-01-22T20:11:26.4192340Z         Parameters
2025-01-22T20:11:26.4192390Z         ----------
2025-01-22T20:11:26.4192440Z         key : label
2025-01-22T20:11:26.4192480Z     
2025-01-22T20:11:26.4192520Z         Returns
2025-01-22T20:11:26.4192560Z         -------
2025-01-22T20:11:26.4192670Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4192710Z     
2025-01-22T20:11:26.4192770Z         Examples
2025-01-22T20:11:26.4192810Z         --------
2025-01-22T20:11:26.4192880Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4192940Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4192990Z         1
2025-01-22T20:11:26.4193030Z     
2025-01-22T20:11:26.4193110Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4193170Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4193220Z         slice(1, 3, None)
2025-01-22T20:11:26.4193270Z     
2025-01-22T20:11:26.4193350Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4193410Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4193470Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4193510Z         """
2025-01-22T20:11:26.4193580Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4193630Z         try:
2025-01-22T20:11:26.4193700Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4193760Z 
2025-01-22T20:11:26.4193960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4194050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4194160Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4194210Z     ???
2025-01-22T20:11:26.4194310Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4194350Z     ???
2025-01-22T20:11:26.4194570Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4194610Z     ???
2025-01-22T20:11:26.4194710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4194710Z 
2025-01-22T20:11:26.4194760Z >   ???
2025-01-22T20:11:26.4194800Z E   KeyError: 'cups'
2025-01-22T20:11:26.4194810Z 
2025-01-22T20:11:26.4194900Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4194910Z 
2025-01-22T20:11:26.4195040Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4195040Z 
2025-01-22T20:11:26.4195210Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4195470Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4195960Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4195960Z 
2025-01-22T20:11:26.4196030Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4196070Z     def plasma(
2025-01-22T20:11:26.4196110Z         self,
2025-01-22T20:11:26.4196160Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4196210Z         config,
2025-01-22T20:11:26.4196250Z     ):
2025-01-22T20:11:26.4196340Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4196400Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4196460Z 
2025-01-22T20:11:26.4196560Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4196640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4196720Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4196900Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4197040Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4197120Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4197200Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4197250Z     return BasePlasma(
2025-01-22T20:11:26.4197300Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4197360Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4197420Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4197480Z     self.update(**kwargs)
2025-01-22T20:11:26.4197540Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4197640Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4197720Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4197800Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4197990Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4198110Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4198270Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4198340Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4198450Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4198570Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4198710Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4198850Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4199150Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4199290Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4199430Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4199510Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4199710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4199810Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4199990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4200060Z     return self.apply_standard()
2025-01-22T20:11:26.4200280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4200370Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4200630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4200730Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4200900Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4200970Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4201180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4201240Z     return self._get_value(key)
2025-01-22T20:11:26.4201450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4201500Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4201590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4201590Z 
2025-01-22T20:11:26.4201710Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4201890Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4201990Z        't046000', 't048000'],
2025-01-22T20:11:26.4202040Z       dtype='object')
2025-01-22T20:11:26.4202090Z key = 'cups'
2025-01-22T20:11:26.4202090Z 
2025-01-22T20:11:26.4202150Z     def get_loc(self, key):
2025-01-22T20:11:26.4202190Z         """
2025-01-22T20:11:26.4202310Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4202360Z     
2025-01-22T20:11:26.4202410Z         Parameters
2025-01-22T20:11:26.4202450Z         ----------
2025-01-22T20:11:26.4202490Z         key : label
2025-01-22T20:11:26.4202540Z     
2025-01-22T20:11:26.4202580Z         Returns
2025-01-22T20:11:26.4202630Z         -------
2025-01-22T20:11:26.4202730Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4202770Z     
2025-01-22T20:11:26.4202820Z         Examples
2025-01-22T20:11:26.4202860Z         --------
2025-01-22T20:11:26.4202930Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4203000Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4203040Z         1
2025-01-22T20:11:26.4203080Z     
2025-01-22T20:11:26.4203160Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4203220Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4203260Z         slice(1, 3, None)
2025-01-22T20:11:26.4203310Z     
2025-01-22T20:11:26.4203390Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4203450Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4203520Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4203560Z         """
2025-01-22T20:11:26.4203630Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4203670Z         try:
2025-01-22T20:11:26.4203740Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4203830Z         except KeyError as err:
2025-01-22T20:11:26.4203910Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4203980Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4204080Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4204120Z             ):
2025-01-22T20:11:26.4204190Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4204250Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4204300Z E           KeyError: 'cups'
2025-01-22T20:11:26.4204300Z 
2025-01-22T20:11:26.4204520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4204710Z _ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I'], 'classical_nebular': True}] _
2025-01-22T20:11:26.4204720Z 
2025-01-22T20:11:26.4204840Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4205010Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4205070Z        't046000', 't048000'],
2025-01-22T20:11:26.4205120Z       dtype='object')
2025-01-22T20:11:26.4205170Z key = 'cups'
2025-01-22T20:11:26.4205170Z 
2025-01-22T20:11:26.4205230Z     def get_loc(self, key):
2025-01-22T20:11:26.4205270Z         """
2025-01-22T20:11:26.4205390Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4205430Z     
2025-01-22T20:11:26.4205480Z         Parameters
2025-01-22T20:11:26.4205520Z         ----------
2025-01-22T20:11:26.4205570Z         key : label
2025-01-22T20:11:26.4205610Z     
2025-01-22T20:11:26.4205650Z         Returns
2025-01-22T20:11:26.4209720Z         -------
2025-01-22T20:11:26.4209900Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4209950Z     
2025-01-22T20:11:26.4209990Z         Examples
2025-01-22T20:11:26.4210030Z         --------
2025-01-22T20:11:26.4210120Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4210180Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4210760Z         1
2025-01-22T20:11:26.4210800Z     
2025-01-22T20:11:26.4210870Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4210940Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4210990Z         slice(1, 3, None)
2025-01-22T20:11:26.4211030Z     
2025-01-22T20:11:26.4211110Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4211170Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4211230Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4211280Z         """
2025-01-22T20:11:26.4211350Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4211400Z         try:
2025-01-22T20:11:26.4211470Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4211470Z 
2025-01-22T20:11:26.4211670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4211750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4211860Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4211910Z     ???
2025-01-22T20:11:26.4212010Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4212050Z     ???
2025-01-22T20:11:26.4212260Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4212310Z     ???
2025-01-22T20:11:26.4212390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4212390Z 
2025-01-22T20:11:26.4212430Z >   ???
2025-01-22T20:11:26.4212480Z E   KeyError: 'cups'
2025-01-22T20:11:26.4212480Z 
2025-01-22T20:11:26.4212580Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4212580Z 
2025-01-22T20:11:26.4212720Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4213020Z 
2025-01-22T20:11:26.4213210Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4213480Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4213970Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4213970Z 
2025-01-22T20:11:26.4214040Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4214080Z     def plasma(
2025-01-22T20:11:26.4214140Z         self,
2025-01-22T20:11:26.4214190Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4214240Z         config,
2025-01-22T20:11:26.4214280Z     ):
2025-01-22T20:11:26.4214360Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4214430Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4214440Z 
2025-01-22T20:11:26.4214530Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4214620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4214700Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4214760Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4214890Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4214960Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4215040Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4215090Z     return BasePlasma(
2025-01-22T20:11:26.4215150Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4215210Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4215270Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4215330Z     self.update(**kwargs)
2025-01-22T20:11:26.4215390Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4215490Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4215570Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4215730Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4215920Z tardis/plasma/properties/partition_function.py:255: in _calculate_classical_nebular
2025-01-22T20:11:26.4216040Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4216210Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4216280Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4216380Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4216510Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4216640Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4216780Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4216990Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4217130Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4217270Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4217350Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4217550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4217640Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4217830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4217890Z     return self.apply_standard()
2025-01-22T20:11:26.4218110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4218200Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4218450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4218610Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4218790Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4218850Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4219070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4219120Z     return self._get_value(key)
2025-01-22T20:11:26.4219330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4219390Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4219480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4219480Z 
2025-01-22T20:11:26.4219600Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4219770Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4219830Z        't046000', 't048000'],
2025-01-22T20:11:26.4219880Z       dtype='object')
2025-01-22T20:11:26.4219920Z key = 'cups'
2025-01-22T20:11:26.4219920Z 
2025-01-22T20:11:26.4219980Z     def get_loc(self, key):
2025-01-22T20:11:26.4220020Z         """
2025-01-22T20:11:26.4220140Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4220180Z     
2025-01-22T20:11:26.4220230Z         Parameters
2025-01-22T20:11:26.4220270Z         ----------
2025-01-22T20:11:26.4220320Z         key : label
2025-01-22T20:11:26.4220370Z     
2025-01-22T20:11:26.4220410Z         Returns
2025-01-22T20:11:26.4220460Z         -------
2025-01-22T20:11:26.4220560Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4220610Z     
2025-01-22T20:11:26.4220650Z         Examples
2025-01-22T20:11:26.4220700Z         --------
2025-01-22T20:11:26.4220770Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4220830Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4220930Z         1
2025-01-22T20:11:26.4220970Z     
2025-01-22T20:11:26.4221050Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4221110Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4221150Z         slice(1, 3, None)
2025-01-22T20:11:26.4221190Z     
2025-01-22T20:11:26.4221270Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4221340Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4221400Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4221440Z         """
2025-01-22T20:11:26.4221520Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4221560Z         try:
2025-01-22T20:11:26.4221630Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4221680Z         except KeyError as err:
2025-01-22T20:11:26.4221760Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4221830Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4221920Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4221970Z             ):
2025-01-22T20:11:26.4222030Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4222100Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4222150Z E           KeyError: 'cups'
2025-01-22T20:11:26.4222150Z 
2025-01-22T20:11:26.4222370Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4222550Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_rad] _
2025-01-22T20:11:26.4222550Z 
2025-01-22T20:11:26.4222680Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4222850Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4222940Z        't046000', 't048000'],
2025-01-22T20:11:26.4223000Z       dtype='object')
2025-01-22T20:11:26.4223040Z key = 'cups'
2025-01-22T20:11:26.4223050Z 
2025-01-22T20:11:26.4223100Z     def get_loc(self, key):
2025-01-22T20:11:26.4223140Z         """
2025-01-22T20:11:26.4223270Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4223310Z     
2025-01-22T20:11:26.4223350Z         Parameters
2025-01-22T20:11:26.4223390Z         ----------
2025-01-22T20:11:26.4223440Z         key : label
2025-01-22T20:11:26.4223480Z     
2025-01-22T20:11:26.4223520Z         Returns
2025-01-22T20:11:26.4223570Z         -------
2025-01-22T20:11:26.4223670Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4223710Z     
2025-01-22T20:11:26.4223750Z         Examples
2025-01-22T20:11:26.4223800Z         --------
2025-01-22T20:11:26.4223870Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4223930Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4223970Z         1
2025-01-22T20:11:26.4224010Z     
2025-01-22T20:11:26.4224090Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4224150Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4224200Z         slice(1, 3, None)
2025-01-22T20:11:26.4224240Z     
2025-01-22T20:11:26.4224320Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4224390Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4224450Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4224490Z         """
2025-01-22T20:11:26.4224560Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4224610Z         try:
2025-01-22T20:11:26.4224680Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4224680Z 
2025-01-22T20:11:26.4224880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4224970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4225080Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4225180Z     ???
2025-01-22T20:11:26.4225280Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4225320Z     ???
2025-01-22T20:11:26.4225530Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4225580Z     ???
2025-01-22T20:11:26.4225660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4225660Z 
2025-01-22T20:11:26.4225710Z >   ???
2025-01-22T20:11:26.4225750Z E   KeyError: 'cups'
2025-01-22T20:11:26.4225750Z 
2025-01-22T20:11:26.4225850Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4225850Z 
2025-01-22T20:11:26.4225980Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4225990Z 
2025-01-22T20:11:26.4226150Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4226410Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4226900Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4226910Z 
2025-01-22T20:11:26.4226970Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4227020Z     def plasma(
2025-01-22T20:11:26.4227070Z         self,
2025-01-22T20:11:26.4227130Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4227170Z         config,
2025-01-22T20:11:26.4227220Z     ):
2025-01-22T20:11:26.4227300Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4227370Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4227370Z 
2025-01-22T20:11:26.4227510Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4227600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4227680Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4227740Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4227870Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4227940Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4228010Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4228060Z     return BasePlasma(
2025-01-22T20:11:26.4228120Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4228180Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4228250Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4228300Z     self.update(**kwargs)
2025-01-22T20:11:26.4228360Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4228450Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4228540Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4228610Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4228770Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4228880Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4229050Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4229120Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4229220Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4229360Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4229490Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4229640Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4229840Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4229990Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4230130Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4230870Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4231080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4231170Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4231360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4231420Z     return self.apply_standard()
2025-01-22T20:11:26.4231650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4231740Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4231980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4232070Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4232250Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4232310Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4232520Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4232580Z     return self._get_value(key)
2025-01-22T20:11:26.4232790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4232850Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4232940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4232950Z 
2025-01-22T20:11:26.4233080Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4233250Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4233510Z        't046000', 't048000'],
2025-01-22T20:11:26.4233560Z       dtype='object')
2025-01-22T20:11:26.4233610Z key = 'cups'
2025-01-22T20:11:26.4233610Z 
2025-01-22T20:11:26.4233660Z     def get_loc(self, key):
2025-01-22T20:11:26.4233710Z         """
2025-01-22T20:11:26.4233830Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4233880Z     
2025-01-22T20:11:26.4233920Z         Parameters
2025-01-22T20:11:26.4233970Z         ----------
2025-01-22T20:11:26.4234020Z         key : label
2025-01-22T20:11:26.4234060Z     
2025-01-22T20:11:26.4234100Z         Returns
2025-01-22T20:11:26.4234140Z         -------
2025-01-22T20:11:26.4234250Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4234290Z     
2025-01-22T20:11:26.4234340Z         Examples
2025-01-22T20:11:26.4234380Z         --------
2025-01-22T20:11:26.4234450Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4234510Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4234560Z         1
2025-01-22T20:11:26.4234590Z     
2025-01-22T20:11:26.4234670Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4234730Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4234790Z         slice(1, 3, None)
2025-01-22T20:11:26.4234830Z     
2025-01-22T20:11:26.4234910Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4234970Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4235030Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4235070Z         """
2025-01-22T20:11:26.4235140Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4235190Z         try:
2025-01-22T20:11:26.4235260Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4235320Z         except KeyError as err:
2025-01-22T20:11:26.4235390Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4235460Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4235550Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4235670Z             ):
2025-01-22T20:11:26.4235740Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4235810Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4235870Z E           KeyError: 'cups'
2025-01-22T20:11:26.4235870Z 
2025-01-22T20:11:26.4236090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4236210Z ---------------------------- Captured stdout setup -----------------------------
2025-01-22T20:11:26.4236600Z [[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
2025-01-22T20:11:26.4237110Z 	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
2025-01-22T20:11:26.4237240Z ------------------------------ Captured log setup ------------------------------
2025-01-22T20:11:26.4237640Z WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
2025-01-22T20:11:26.4237840Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-g_electron] _
2025-01-22T20:11:26.4237840Z 
2025-01-22T20:11:26.4237970Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4238140Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4238200Z        't046000', 't048000'],
2025-01-22T20:11:26.4238250Z       dtype='object')
2025-01-22T20:11:26.4238290Z key = 'cups'
2025-01-22T20:11:26.4238290Z 
2025-01-22T20:11:26.4238350Z     def get_loc(self, key):
2025-01-22T20:11:26.4238390Z         """
2025-01-22T20:11:26.4238510Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4238670Z     
2025-01-22T20:11:26.4238720Z         Parameters
2025-01-22T20:11:26.4238770Z         ----------
2025-01-22T20:11:26.4238810Z         key : label
2025-01-22T20:11:26.4238850Z     
2025-01-22T20:11:26.4238910Z         Returns
2025-01-22T20:11:26.4238950Z         -------
2025-01-22T20:11:26.4239050Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4239090Z     
2025-01-22T20:11:26.4239140Z         Examples
2025-01-22T20:11:26.4239180Z         --------
2025-01-22T20:11:26.4239250Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4239310Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4239350Z         1
2025-01-22T20:11:26.4239390Z     
2025-01-22T20:11:26.4239460Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4239530Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4239570Z         slice(1, 3, None)
2025-01-22T20:11:26.4239610Z     
2025-01-22T20:11:26.4239690Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4239770Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4239830Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4239870Z         """
2025-01-22T20:11:26.4239940Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4239990Z         try:
2025-01-22T20:11:26.4240060Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4240060Z 
2025-01-22T20:11:26.4240260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4240340Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4240440Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4240490Z     ???
2025-01-22T20:11:26.4240590Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4240630Z     ???
2025-01-22T20:11:26.4240840Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4240890Z     ???
2025-01-22T20:11:26.4240970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4241020Z 
2025-01-22T20:11:26.4241080Z >   ???
2025-01-22T20:11:26.4241130Z E   KeyError: 'cups'
2025-01-22T20:11:26.4241130Z 
2025-01-22T20:11:26.4241230Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4241230Z 
2025-01-22T20:11:26.4241360Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4241360Z 
2025-01-22T20:11:26.4241530Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4241780Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4242270Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4242280Z 
2025-01-22T20:11:26.4242340Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4242390Z     def plasma(
2025-01-22T20:11:26.4242430Z         self,
2025-01-22T20:11:26.4242490Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4242540Z         config,
2025-01-22T20:11:26.4242580Z     ):
2025-01-22T20:11:26.4242670Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4242740Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4242740Z 
2025-01-22T20:11:26.4242830Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4242910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4242990Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4243050Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4243170Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4243300Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4243380Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4243440Z     return BasePlasma(
2025-01-22T20:11:26.4243490Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4243560Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4243620Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4243680Z     self.update(**kwargs)
2025-01-22T20:11:26.4243740Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4243830Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4243910Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4243980Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4244140Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4244250Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4244420Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4244490Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4244590Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4244720Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4244860Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4244990Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4245190Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4245340Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4245480Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4245560Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4245760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4245870Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4246060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4246180Z     return self.apply_standard()
2025-01-22T20:11:26.4246400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4246490Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4246750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4246840Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4247020Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4247080Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4247300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4247360Z     return self._get_value(key)
2025-01-22T20:11:26.4247570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4247630Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4247720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4247720Z 
2025-01-22T20:11:26.4247840Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4248010Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4248070Z        't046000', 't048000'],
2025-01-22T20:11:26.4248120Z       dtype='object')
2025-01-22T20:11:26.4248160Z key = 'cups'
2025-01-22T20:11:26.4248170Z 
2025-01-22T20:11:26.4248220Z     def get_loc(self, key):
2025-01-22T20:11:26.4248260Z         """
2025-01-22T20:11:26.4248390Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4248470Z     
2025-01-22T20:11:26.4248520Z         Parameters
2025-01-22T20:11:26.4248570Z         ----------
2025-01-22T20:11:26.4248610Z         key : label
2025-01-22T20:11:26.4248660Z     
2025-01-22T20:11:26.4248700Z         Returns
2025-01-22T20:11:26.4248740Z         -------
2025-01-22T20:11:26.4248840Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4248890Z     
2025-01-22T20:11:26.4248940Z         Examples
2025-01-22T20:11:26.4248980Z         --------
2025-01-22T20:11:26.4249050Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4249110Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4249150Z         1
2025-01-22T20:11:26.4249190Z     
2025-01-22T20:11:26.4249270Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4249330Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4249390Z         slice(1, 3, None)
2025-01-22T20:11:26.4249440Z     
2025-01-22T20:11:26.4249520Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4249580Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4249650Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4249690Z         """
2025-01-22T20:11:26.4249770Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4249810Z         try:
2025-01-22T20:11:26.4249880Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4249940Z         except KeyError as err:
2025-01-22T20:11:26.4250010Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4250090Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4250180Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4250230Z             ):
2025-01-22T20:11:26.4250290Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4250360Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4250410Z E           KeyError: 'cups'
2025-01-22T20:11:26.4250410Z 
2025-01-22T20:11:26.4250630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4251180Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-selected_atoms] _
2025-01-22T20:11:26.4251180Z 
2025-01-22T20:11:26.4251310Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4251480Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4251530Z        't046000', 't048000'],
2025-01-22T20:11:26.4251590Z       dtype='object')
2025-01-22T20:11:26.4251630Z key = 'cups'
2025-01-22T20:11:26.4251630Z 
2025-01-22T20:11:26.4251690Z     def get_loc(self, key):
2025-01-22T20:11:26.4251730Z         """
2025-01-22T20:11:26.4251850Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4251890Z     
2025-01-22T20:11:26.4251940Z         Parameters
2025-01-22T20:11:26.4251980Z         ----------
2025-01-22T20:11:26.4252040Z         key : label
2025-01-22T20:11:26.4252080Z     
2025-01-22T20:11:26.4252120Z         Returns
2025-01-22T20:11:26.4252160Z         -------
2025-01-22T20:11:26.4252270Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4252310Z     
2025-01-22T20:11:26.4252350Z         Examples
2025-01-22T20:11:26.4252390Z         --------
2025-01-22T20:11:26.4252460Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4252520Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4252570Z         1
2025-01-22T20:11:26.4252610Z     
2025-01-22T20:11:26.4252680Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4252750Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4252800Z         slice(1, 3, None)
2025-01-22T20:11:26.4252840Z     
2025-01-22T20:11:26.4252920Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4252980Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4253410Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4253460Z         """
2025-01-22T20:11:26.4253540Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4253600Z         try:
2025-01-22T20:11:26.4253670Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4253680Z 
2025-01-22T20:11:26.4253870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4253960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4254060Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4254100Z     ???
2025-01-22T20:11:26.4254200Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4254240Z     ???
2025-01-22T20:11:26.4254450Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4254500Z     ???
2025-01-22T20:11:26.4254580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4254580Z 
2025-01-22T20:11:26.4254630Z >   ???
2025-01-22T20:11:26.4254680Z E   KeyError: 'cups'
2025-01-22T20:11:26.4254680Z 
2025-01-22T20:11:26.4254780Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4254780Z 
2025-01-22T20:11:26.4254910Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4254910Z 
2025-01-22T20:11:26.4255080Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4255350Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4255830Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4255840Z 
2025-01-22T20:11:26.4255900Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4255950Z     def plasma(
2025-01-22T20:11:26.4256090Z         self,
2025-01-22T20:11:26.4256150Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4256190Z         config,
2025-01-22T20:11:26.4256240Z     ):
2025-01-22T20:11:26.4256320Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4256390Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4256390Z 
2025-01-22T20:11:26.4256480Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4256560Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4256640Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4256700Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4256830Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4256900Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4256980Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4257030Z     return BasePlasma(
2025-01-22T20:11:26.4257090Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4257150Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4257220Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4257270Z     self.update(**kwargs)
2025-01-22T20:11:26.4257330Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4261640Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4261790Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4261860Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4262020Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4262140Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4262300Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4262370Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4262720Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4262850Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4262980Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4263120Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4263320Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4263460Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4263600Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4263680Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4263880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4263980Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4264170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4264230Z     return self.apply_standard()
2025-01-22T20:11:26.4264460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4264550Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4264790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4264880Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4265050Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4265110Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4265330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4265390Z     return self._get_value(key)
2025-01-22T20:11:26.4265590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4265660Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4265850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4265850Z 
2025-01-22T20:11:26.4265990Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4266150Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4266210Z        't046000', 't048000'],
2025-01-22T20:11:26.4266260Z       dtype='object')
2025-01-22T20:11:26.4266310Z key = 'cups'
2025-01-22T20:11:26.4266320Z 
2025-01-22T20:11:26.4266370Z     def get_loc(self, key):
2025-01-22T20:11:26.4266410Z         """
2025-01-22T20:11:26.4266540Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4266580Z     
2025-01-22T20:11:26.4266630Z         Parameters
2025-01-22T20:11:26.4266680Z         ----------
2025-01-22T20:11:26.4266730Z         key : label
2025-01-22T20:11:26.4266760Z     
2025-01-22T20:11:26.4266810Z         Returns
2025-01-22T20:11:26.4266850Z         -------
2025-01-22T20:11:26.4266960Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4267000Z     
2025-01-22T20:11:26.4267050Z         Examples
2025-01-22T20:11:26.4267090Z         --------
2025-01-22T20:11:26.4267160Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4267220Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4267260Z         1
2025-01-22T20:11:26.4267300Z     
2025-01-22T20:11:26.4267380Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4267440Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4267490Z         slice(1, 3, None)
2025-01-22T20:11:26.4267530Z     
2025-01-22T20:11:26.4267610Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4267680Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4267810Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4267860Z         """
2025-01-22T20:11:26.4267940Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4267990Z         try:
2025-01-22T20:11:26.4268060Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4268120Z         except KeyError as err:
2025-01-22T20:11:26.4268190Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4268260Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4268350Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4268400Z             ):
2025-01-22T20:11:26.4268460Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4268520Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4268570Z E           KeyError: 'cups'
2025-01-22T20:11:26.4268580Z 
2025-01-22T20:11:26.4268790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4269000Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-number_density] _
2025-01-22T20:11:26.4269010Z 
2025-01-22T20:11:26.4269130Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4269310Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4269360Z        't046000', 't048000'],
2025-01-22T20:11:26.4269410Z       dtype='object')
2025-01-22T20:11:26.4269450Z key = 'cups'
2025-01-22T20:11:26.4269450Z 
2025-01-22T20:11:26.4269510Z     def get_loc(self, key):
2025-01-22T20:11:26.4269550Z         """
2025-01-22T20:11:26.4269670Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4269720Z     
2025-01-22T20:11:26.4269760Z         Parameters
2025-01-22T20:11:26.4269810Z         ----------
2025-01-22T20:11:26.4269850Z         key : label
2025-01-22T20:11:26.4269900Z     
2025-01-22T20:11:26.4269940Z         Returns
2025-01-22T20:11:26.4269980Z         -------
2025-01-22T20:11:26.4270080Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4270180Z     
2025-01-22T20:11:26.4270230Z         Examples
2025-01-22T20:11:26.4270270Z         --------
2025-01-22T20:11:26.4270340Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4270400Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4270440Z         1
2025-01-22T20:11:26.4270480Z     
2025-01-22T20:11:26.4270550Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4270620Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4270670Z         slice(1, 3, None)
2025-01-22T20:11:26.4270710Z     
2025-01-22T20:11:26.4270790Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4270850Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4270920Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4270960Z         """
2025-01-22T20:11:26.4271030Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4271080Z         try:
2025-01-22T20:11:26.4271150Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4271150Z 
2025-01-22T20:11:26.4271350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4271440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4271540Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4271590Z     ???
2025-01-22T20:11:26.4271690Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4271740Z     ???
2025-01-22T20:11:26.4271960Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4272000Z     ???
2025-01-22T20:11:26.4272090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4272130Z 
2025-01-22T20:11:26.4272180Z >   ???
2025-01-22T20:11:26.4272230Z E   KeyError: 'cups'
2025-01-22T20:11:26.4272240Z 
2025-01-22T20:11:26.4272330Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4272330Z 
2025-01-22T20:11:26.4272470Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4272470Z 
2025-01-22T20:11:26.4272640Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4272890Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4273380Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4273390Z 
2025-01-22T20:11:26.4273450Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4273490Z     def plasma(
2025-01-22T20:11:26.4273540Z         self,
2025-01-22T20:11:26.4273590Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4273630Z         config,
2025-01-22T20:11:26.4273680Z     ):
2025-01-22T20:11:26.4273770Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4273840Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4273840Z 
2025-01-22T20:11:26.4273930Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4274020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4274100Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4274160Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4274280Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4274350Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4274430Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4274480Z     return BasePlasma(
2025-01-22T20:11:26.4274540Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4274600Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4275190Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4275240Z     self.update(**kwargs)
2025-01-22T20:11:26.4275310Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4275400Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4275480Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4275560Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4275710Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4275830Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4275990Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4276060Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4276160Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4276300Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4276430Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4276580Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4276780Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4276910Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4277190Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4277260Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4277470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4277560Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4277750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4278320Z     return self.apply_standard()
2025-01-22T20:11:26.4278550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4278650Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4278900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4278990Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4279160Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4279220Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4279430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4279490Z     return self._get_value(key)
2025-01-22T20:11:26.4279700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4279760Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4279850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4279850Z 
2025-01-22T20:11:26.4279980Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4280150Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4280200Z        't046000', 't048000'],
2025-01-22T20:11:26.4280250Z       dtype='object')
2025-01-22T20:11:26.4280290Z key = 'cups'
2025-01-22T20:11:26.4280300Z 
2025-01-22T20:11:26.4280350Z     def get_loc(self, key):
2025-01-22T20:11:26.4280390Z         """
2025-01-22T20:11:26.4280520Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4280570Z     
2025-01-22T20:11:26.4280610Z         Parameters
2025-01-22T20:11:26.4280660Z         ----------
2025-01-22T20:11:26.4280700Z         key : label
2025-01-22T20:11:26.4280740Z     
2025-01-22T20:11:26.4280790Z         Returns
2025-01-22T20:11:26.4280830Z         -------
2025-01-22T20:11:26.4280930Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4281060Z     
2025-01-22T20:11:26.4281110Z         Examples
2025-01-22T20:11:26.4281160Z         --------
2025-01-22T20:11:26.4281230Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4281290Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4281330Z         1
2025-01-22T20:11:26.4281370Z     
2025-01-22T20:11:26.4281450Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4281510Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4281570Z         slice(1, 3, None)
2025-01-22T20:11:26.4281610Z     
2025-01-22T20:11:26.4281690Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4281760Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4281820Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4281860Z         """
2025-01-22T20:11:26.4281940Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4281980Z         try:
2025-01-22T20:11:26.4282050Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4282110Z         except KeyError as err:
2025-01-22T20:11:26.4282170Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4282250Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4282340Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4282390Z             ):
2025-01-22T20:11:26.4282450Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4282510Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4282570Z E           KeyError: 'cups'
2025-01-22T20:11:26.4282570Z 
2025-01-22T20:11:26.4282780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4282980Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-t_electrons] _
2025-01-22T20:11:26.4283030Z 
2025-01-22T20:11:26.4283160Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4283340Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4283400Z        't046000', 't048000'],
2025-01-22T20:11:26.4283450Z       dtype='object')
2025-01-22T20:11:26.4283500Z key = 'cups'
2025-01-22T20:11:26.4283500Z 
2025-01-22T20:11:26.4283560Z     def get_loc(self, key):
2025-01-22T20:11:26.4283600Z         """
2025-01-22T20:11:26.4283740Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4283780Z     
2025-01-22T20:11:26.4283830Z         Parameters
2025-01-22T20:11:26.4283880Z         ----------
2025-01-22T20:11:26.4283920Z         key : label
2025-01-22T20:11:26.4283960Z     
2025-01-22T20:11:26.4284000Z         Returns
2025-01-22T20:11:26.4284050Z         -------
2025-01-22T20:11:26.4284150Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4284200Z     
2025-01-22T20:11:26.4284250Z         Examples
2025-01-22T20:11:26.4284300Z         --------
2025-01-22T20:11:26.4284370Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4284430Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4284470Z         1
2025-01-22T20:11:26.4284520Z     
2025-01-22T20:11:26.4284600Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4284650Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4284700Z         slice(1, 3, None)
2025-01-22T20:11:26.4284740Z     
2025-01-22T20:11:26.4284820Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4284890Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4284950Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4284990Z         """
2025-01-22T20:11:26.4285070Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4285120Z         try:
2025-01-22T20:11:26.4285190Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4285250Z 
2025-01-22T20:11:26.4285450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4285540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4285640Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4285680Z     ???
2025-01-22T20:11:26.4285780Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4285820Z     ???
2025-01-22T20:11:26.4286040Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4286080Z     ???
2025-01-22T20:11:26.4286170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4286170Z 
2025-01-22T20:11:26.4286210Z >   ???
2025-01-22T20:11:26.4286260Z E   KeyError: 'cups'
2025-01-22T20:11:26.4286270Z 
2025-01-22T20:11:26.4286360Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4286360Z 
2025-01-22T20:11:26.4286500Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4286500Z 
2025-01-22T20:11:26.4286670Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4286920Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4287500Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4287500Z 
2025-01-22T20:11:26.4287570Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4287620Z     def plasma(
2025-01-22T20:11:26.4287660Z         self,
2025-01-22T20:11:26.4287790Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4287830Z         config,
2025-01-22T20:11:26.4287880Z     ):
2025-01-22T20:11:26.4287970Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4288040Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4288040Z 
2025-01-22T20:11:26.4288130Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4288220Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4288300Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4288360Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4288490Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4288560Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4288640Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4288690Z     return BasePlasma(
2025-01-22T20:11:26.4288750Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4288810Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4288880Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4288930Z     self.update(**kwargs)
2025-01-22T20:11:26.4289000Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4289090Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4289170Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4289250Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4289400Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4289520Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4289680Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4289750Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4289850Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4289980Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4290110Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4290250Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4290520Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4290670Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4290820Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4290890Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4291100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4291190Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4291380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4291430Z     return self.apply_standard()
2025-01-22T20:11:26.4291660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4291750Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4292000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4292100Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4292270Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4292330Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4292540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4292600Z     return self._get_value(key)
2025-01-22T20:11:26.4292810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4292870Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4292960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4293010Z 
2025-01-22T20:11:26.4293140Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4293310Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4293360Z        't046000', 't048000'],
2025-01-22T20:11:26.4293410Z       dtype='object')
2025-01-22T20:11:26.4293460Z key = 'cups'
2025-01-22T20:11:26.4293460Z 
2025-01-22T20:11:26.4293520Z     def get_loc(self, key):
2025-01-22T20:11:26.4293560Z         """
2025-01-22T20:11:26.4293690Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4293730Z     
2025-01-22T20:11:26.4293780Z         Parameters
2025-01-22T20:11:26.4293820Z         ----------
2025-01-22T20:11:26.4293870Z         key : label
2025-01-22T20:11:26.4293910Z     
2025-01-22T20:11:26.4293950Z         Returns
2025-01-22T20:11:26.4294000Z         -------
2025-01-22T20:11:26.4294100Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4294140Z     
2025-01-22T20:11:26.4294190Z         Examples
2025-01-22T20:11:26.4294230Z         --------
2025-01-22T20:11:26.4294300Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4294360Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4294400Z         1
2025-01-22T20:11:26.4294440Z     
2025-01-22T20:11:26.4294520Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4294580Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4294630Z         slice(1, 3, None)
2025-01-22T20:11:26.4294670Z     
2025-01-22T20:11:26.4294750Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4294820Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4294890Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4294930Z         """
2025-01-22T20:11:26.4295000Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4295050Z         try:
2025-01-22T20:11:26.4295120Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4295580Z         except KeyError as err:
2025-01-22T20:11:26.4295660Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4295730Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4295830Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4295870Z             ):
2025-01-22T20:11:26.4295930Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4295990Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4296040Z E           KeyError: 'cups'
2025-01-22T20:11:26.4296050Z 
2025-01-22T20:11:26.4296260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4296430Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-w] _
2025-01-22T20:11:26.4296430Z 
2025-01-22T20:11:26.4296560Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4296730Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4296790Z        't046000', 't048000'],
2025-01-22T20:11:26.4296830Z       dtype='object')
2025-01-22T20:11:26.4296880Z key = 'cups'
2025-01-22T20:11:26.4296880Z 
2025-01-22T20:11:26.4296940Z     def get_loc(self, key):
2025-01-22T20:11:26.4296980Z         """
2025-01-22T20:11:26.4297100Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4297140Z     
2025-01-22T20:11:26.4297190Z         Parameters
2025-01-22T20:11:26.4297230Z         ----------
2025-01-22T20:11:26.4297280Z         key : label
2025-01-22T20:11:26.4297320Z     
2025-01-22T20:11:26.4297360Z         Returns
2025-01-22T20:11:26.4297400Z         -------
2025-01-22T20:11:26.4297510Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4298130Z     
2025-01-22T20:11:26.4298180Z         Examples
2025-01-22T20:11:26.4298230Z         --------
2025-01-22T20:11:26.4298310Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4298370Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4298420Z         1
2025-01-22T20:11:26.4298460Z     
2025-01-22T20:11:26.4298530Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4298590Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4298640Z         slice(1, 3, None)
2025-01-22T20:11:26.4298680Z     
2025-01-22T20:11:26.4298760Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4298820Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4298890Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4298930Z         """
2025-01-22T20:11:26.4299000Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4299050Z         try:
2025-01-22T20:11:26.4299120Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4299120Z 
2025-01-22T20:11:26.4299320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4299410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4299510Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4299550Z     ???
2025-01-22T20:11:26.4299650Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4299690Z     ???
2025-01-22T20:11:26.4299910Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4299950Z     ???
2025-01-22T20:11:26.4300040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4300040Z 
2025-01-22T20:11:26.4300080Z >   ???
2025-01-22T20:11:26.4300130Z E   KeyError: 'cups'
2025-01-22T20:11:26.4300130Z 
2025-01-22T20:11:26.4300220Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4300230Z 
2025-01-22T20:11:26.4300360Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4300490Z 
2025-01-22T20:11:26.4300660Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4300930Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4301440Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4301440Z 
2025-01-22T20:11:26.4301500Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4301550Z     def plasma(
2025-01-22T20:11:26.4301590Z         self,
2025-01-22T20:11:26.4301640Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4301690Z         config,
2025-01-22T20:11:26.4301730Z     ):
2025-01-22T20:11:26.4301810Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4301880Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4301880Z 
2025-01-22T20:11:26.4301980Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4302060Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4302150Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4302200Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4302330Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4302400Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4302490Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4302540Z     return BasePlasma(
2025-01-22T20:11:26.4302600Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4302670Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4302730Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4302870Z     self.update(**kwargs)
2025-01-22T20:11:26.4302930Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4303030Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4303110Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4303180Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4303340Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4303460Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4303620Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4303690Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4303790Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4303920Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4304060Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4304200Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4304400Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4304540Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4304680Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4304760Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4304970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4305060Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4305260Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4305330Z     return self.apply_standard()
2025-01-22T20:11:26.4305550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4305650Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4305900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4306060Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4306230Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4306300Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4306510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4306580Z     return self._get_value(key)
2025-01-22T20:11:26.4306790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4306850Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4306940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4306950Z 
2025-01-22T20:11:26.4307070Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4307250Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4307300Z        't046000', 't048000'],
2025-01-22T20:11:26.4307350Z       dtype='object')
2025-01-22T20:11:26.4307390Z key = 'cups'
2025-01-22T20:11:26.4307400Z 
2025-01-22T20:11:26.4307450Z     def get_loc(self, key):
2025-01-22T20:11:26.4307490Z         """
2025-01-22T20:11:26.4307620Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4307660Z     
2025-01-22T20:11:26.4307700Z         Parameters
2025-01-22T20:11:26.4307750Z         ----------
2025-01-22T20:11:26.4307790Z         key : label
2025-01-22T20:11:26.4307830Z     
2025-01-22T20:11:26.4307880Z         Returns
2025-01-22T20:11:26.4307920Z         -------
2025-01-22T20:11:26.4308020Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4308120Z     
2025-01-22T20:11:26.4308170Z         Examples
2025-01-22T20:11:26.4308210Z         --------
2025-01-22T20:11:26.4308290Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4308350Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4308390Z         1
2025-01-22T20:11:26.4308430Z     
2025-01-22T20:11:26.4308500Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4308570Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4308620Z         slice(1, 3, None)
2025-01-22T20:11:26.4308660Z     
2025-01-22T20:11:26.4308740Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4308810Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4308880Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4308930Z         """
2025-01-22T20:11:26.4309000Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4312820Z         try:
2025-01-22T20:11:26.4312980Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4313050Z         except KeyError as err:
2025-01-22T20:11:26.4313120Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4313200Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4313300Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4313340Z             ):
2025-01-22T20:11:26.4313420Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4313480Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4313530Z E           KeyError: 'cups'
2025-01-22T20:11:26.4313530Z 
2025-01-22T20:11:26.4313740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4313920Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-t_rad] _
2025-01-22T20:11:26.4313920Z 
2025-01-22T20:11:26.4314050Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4314220Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4314530Z        't046000', 't048000'],
2025-01-22T20:11:26.4314570Z       dtype='object')
2025-01-22T20:11:26.4314620Z key = 'cups'
2025-01-22T20:11:26.4314630Z 
2025-01-22T20:11:26.4314680Z     def get_loc(self, key):
2025-01-22T20:11:26.4314720Z         """
2025-01-22T20:11:26.4314840Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4314890Z     
2025-01-22T20:11:26.4314930Z         Parameters
2025-01-22T20:11:26.4314980Z         ----------
2025-01-22T20:11:26.4315020Z         key : label
2025-01-22T20:11:26.4315060Z     
2025-01-22T20:11:26.4315110Z         Returns
2025-01-22T20:11:26.4315150Z         -------
2025-01-22T20:11:26.4315250Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4315290Z     
2025-01-22T20:11:26.4315340Z         Examples
2025-01-22T20:11:26.4315380Z         --------
2025-01-22T20:11:26.4315460Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4315510Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4315560Z         1
2025-01-22T20:11:26.4315600Z     
2025-01-22T20:11:26.4315670Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4315730Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4315780Z         slice(1, 3, None)
2025-01-22T20:11:26.4315820Z     
2025-01-22T20:11:26.4315900Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4315970Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4316030Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4316070Z         """
2025-01-22T20:11:26.4316140Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4316190Z         try:
2025-01-22T20:11:26.4316260Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4316260Z 
2025-01-22T20:11:26.4316540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4316640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4316750Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4316790Z     ???
2025-01-22T20:11:26.4316890Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4316930Z     ???
2025-01-22T20:11:26.4317330Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4317370Z     ???
2025-01-22T20:11:26.4317450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4317460Z 
2025-01-22T20:11:26.4317500Z >   ???
2025-01-22T20:11:26.4317540Z E   KeyError: 'cups'
2025-01-22T20:11:26.4317550Z 
2025-01-22T20:11:26.4317640Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4317640Z 
2025-01-22T20:11:26.4317770Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4317780Z 
2025-01-22T20:11:26.4317950Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4318220Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4318710Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4318720Z 
2025-01-22T20:11:26.4318780Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4318820Z     def plasma(
2025-01-22T20:11:26.4318870Z         self,
2025-01-22T20:11:26.4318920Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4318960Z         config,
2025-01-22T20:11:26.4319000Z     ):
2025-01-22T20:11:26.4319080Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4319150Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4319160Z 
2025-01-22T20:11:26.4319780Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4319860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4319940Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4320000Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4320130Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4320200Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4320280Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4320330Z     return BasePlasma(
2025-01-22T20:11:26.4320390Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4320450Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4320510Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4320560Z     self.update(**kwargs)
2025-01-22T20:11:26.4320620Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4320710Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4320790Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4320870Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4321030Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4321140Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4321310Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4321380Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4321470Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4321600Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4321740Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4321870Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4322280Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4322420Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4322560Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4322640Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4322850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4322950Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4323140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4323210Z     return self.apply_standard()
2025-01-22T20:11:26.4323430Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4323530Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4323780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4323880Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4324040Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4324110Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4324320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4324380Z     return self._get_value(key)
2025-01-22T20:11:26.4324590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4324650Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4324740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4324740Z 
2025-01-22T20:11:26.4324860Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4325040Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4325170Z        't046000', 't048000'],
2025-01-22T20:11:26.4325230Z       dtype='object')
2025-01-22T20:11:26.4325280Z key = 'cups'
2025-01-22T20:11:26.4325280Z 
2025-01-22T20:11:26.4325340Z     def get_loc(self, key):
2025-01-22T20:11:26.4325380Z         """
2025-01-22T20:11:26.4325510Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4325560Z     
2025-01-22T20:11:26.4325600Z         Parameters
2025-01-22T20:11:26.4325650Z         ----------
2025-01-22T20:11:26.4325690Z         key : label
2025-01-22T20:11:26.4325740Z     
2025-01-22T20:11:26.4325780Z         Returns
2025-01-22T20:11:26.4325820Z         -------
2025-01-22T20:11:26.4325920Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4325970Z     
2025-01-22T20:11:26.4326010Z         Examples
2025-01-22T20:11:26.4326060Z         --------
2025-01-22T20:11:26.4326130Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4326190Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4326240Z         1
2025-01-22T20:11:26.4326280Z     
2025-01-22T20:11:26.4326360Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4326420Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4326470Z         slice(1, 3, None)
2025-01-22T20:11:26.4326510Z     
2025-01-22T20:11:26.4326590Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4326660Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4326730Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4326770Z         """
2025-01-22T20:11:26.4326840Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4326890Z         try:
2025-01-22T20:11:26.4326960Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4327010Z         except KeyError as err:
2025-01-22T20:11:26.4327140Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4327210Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4327310Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4327350Z             ):
2025-01-22T20:11:26.4327410Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4327480Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4327530Z E           KeyError: 'cups'
2025-01-22T20:11:26.4327530Z 
2025-01-22T20:11:26.4327750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4327940Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_electron] _
2025-01-22T20:11:26.4327950Z 
2025-01-22T20:11:26.4328080Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4328250Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4328300Z        't046000', 't048000'],
2025-01-22T20:11:26.4328350Z       dtype='object')
2025-01-22T20:11:26.4328400Z key = 'cups'
2025-01-22T20:11:26.4328400Z 
2025-01-22T20:11:26.4328450Z     def get_loc(self, key):
2025-01-22T20:11:26.4328490Z         """
2025-01-22T20:11:26.4328620Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4328660Z     
2025-01-22T20:11:26.4328710Z         Parameters
2025-01-22T20:11:26.4328750Z         ----------
2025-01-22T20:11:26.4328800Z         key : label
2025-01-22T20:11:26.4328840Z     
2025-01-22T20:11:26.4328880Z         Returns
2025-01-22T20:11:26.4328920Z         -------
2025-01-22T20:11:26.4329020Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4329060Z     
2025-01-22T20:11:26.4329110Z         Examples
2025-01-22T20:11:26.4329150Z         --------
2025-01-22T20:11:26.4329220Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4329280Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4329320Z         1
2025-01-22T20:11:26.4329430Z     
2025-01-22T20:11:26.4329510Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4329580Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4329630Z         slice(1, 3, None)
2025-01-22T20:11:26.4329680Z     
2025-01-22T20:11:26.4329760Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4329820Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4329890Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4329930Z         """
2025-01-22T20:11:26.4330000Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4330050Z         try:
2025-01-22T20:11:26.4330120Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4330130Z 
2025-01-22T20:11:26.4330320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4330410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4330520Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4330570Z     ???
2025-01-22T20:11:26.4330670Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4330710Z     ???
2025-01-22T20:11:26.4330920Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4330970Z     ???
2025-01-22T20:11:26.4331050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4331050Z 
2025-01-22T20:11:26.4331090Z >   ???
2025-01-22T20:11:26.4331140Z E   KeyError: 'cups'
2025-01-22T20:11:26.4331140Z 
2025-01-22T20:11:26.4331240Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4331240Z 
2025-01-22T20:11:26.4331370Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4331430Z 
2025-01-22T20:11:26.4331600Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4331860Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4332350Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4332360Z 
2025-01-22T20:11:26.4332420Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4332470Z     def plasma(
2025-01-22T20:11:26.4332510Z         self,
2025-01-22T20:11:26.4332570Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4332610Z         config,
2025-01-22T20:11:26.4332650Z     ):
2025-01-22T20:11:26.4332740Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4332810Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4332820Z 
2025-01-22T20:11:26.4332910Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4332990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4333070Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4333120Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4333250Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4333320Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4333400Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4333450Z     return BasePlasma(
2025-01-22T20:11:26.4333500Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4333560Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4333630Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4333680Z     self.update(**kwargs)
2025-01-22T20:11:26.4333740Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4333830Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4333920Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4333990Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4334210Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4334330Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4334490Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4334560Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4334660Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4334790Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4334930Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4335060Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4335270Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4335410Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4335550Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4335630Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4335830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4335920Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4336110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4336170Z     return self.apply_standard()
2025-01-22T20:11:26.4336390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4336480Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4336730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4336870Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4337050Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4337110Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4337320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4337380Z     return self._get_value(key)
2025-01-22T20:11:26.4337590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4337650Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4337750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4337750Z 
2025-01-22T20:11:26.4337870Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4338040Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4338100Z        't046000', 't048000'],
2025-01-22T20:11:26.4338150Z       dtype='object')
2025-01-22T20:11:26.4338200Z key = 'cups'
2025-01-22T20:11:26.4338200Z 
2025-01-22T20:11:26.4338260Z     def get_loc(self, key):
2025-01-22T20:11:26.4338300Z         """
2025-01-22T20:11:26.4338430Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4338470Z     
2025-01-22T20:11:26.4338520Z         Parameters
2025-01-22T20:11:26.4338560Z         ----------
2025-01-22T20:11:26.4338610Z         key : label
2025-01-22T20:11:26.4338650Z     
2025-01-22T20:11:26.4338690Z         Returns
2025-01-22T20:11:26.4338730Z         -------
2025-01-22T20:11:26.4338830Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4338880Z     
2025-01-22T20:11:26.4338920Z         Examples
2025-01-22T20:11:26.4338960Z         --------
2025-01-22T20:11:26.4339030Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4339090Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4339140Z         1
2025-01-22T20:11:26.4339690Z     
2025-01-22T20:11:26.4339780Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4339840Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4339900Z         slice(1, 3, None)
2025-01-22T20:11:26.4339940Z     
2025-01-22T20:11:26.4340020Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4340080Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4340150Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4340190Z         """
2025-01-22T20:11:26.4340260Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4340310Z         try:
2025-01-22T20:11:26.4340390Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4340440Z         except KeyError as err:
2025-01-22T20:11:26.4340510Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4340590Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4340690Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4340740Z             ):
2025-01-22T20:11:26.4340810Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4340870Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4340930Z E           KeyError: 'cups'
2025-01-22T20:11:26.4340930Z 
2025-01-22T20:11:26.4341140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4341360Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-level_boltzmann_factor] _
2025-01-22T20:11:26.4341360Z 
2025-01-22T20:11:26.4341480Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4341650Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4341980Z        't046000', 't048000'],
2025-01-22T20:11:26.4342040Z       dtype='object')
2025-01-22T20:11:26.4342080Z key = 'cups'
2025-01-22T20:11:26.4342090Z 
2025-01-22T20:11:26.4342140Z     def get_loc(self, key):
2025-01-22T20:11:26.4342190Z         """
2025-01-22T20:11:26.4342310Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4342350Z     
2025-01-22T20:11:26.4342400Z         Parameters
2025-01-22T20:11:26.4342450Z         ----------
2025-01-22T20:11:26.4342490Z         key : label
2025-01-22T20:11:26.4342530Z     
2025-01-22T20:11:26.4342580Z         Returns
2025-01-22T20:11:26.4342620Z         -------
2025-01-22T20:11:26.4342730Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4342770Z     
2025-01-22T20:11:26.4342830Z         Examples
2025-01-22T20:11:26.4342870Z         --------
2025-01-22T20:11:26.4342940Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4343010Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4343050Z         1
2025-01-22T20:11:26.4343100Z     
2025-01-22T20:11:26.4343180Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4343240Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4343290Z         slice(1, 3, None)
2025-01-22T20:11:26.4343330Z     
2025-01-22T20:11:26.4343410Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4343480Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4343540Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4343590Z         """
2025-01-22T20:11:26.4343660Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4343710Z         try:
2025-01-22T20:11:26.4343780Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4343780Z 
2025-01-22T20:11:26.4343980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4344070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4344180Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4344290Z     ???
2025-01-22T20:11:26.4344400Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4344440Z     ???
2025-01-22T20:11:26.4344660Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4344700Z     ???
2025-01-22T20:11:26.4344780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4344790Z 
2025-01-22T20:11:26.4344830Z >   ???
2025-01-22T20:11:26.4344870Z E   KeyError: 'cups'
2025-01-22T20:11:26.4344880Z 
2025-01-22T20:11:26.4344970Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4344980Z 
2025-01-22T20:11:26.4345110Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4345120Z 
2025-01-22T20:11:26.4345280Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4345540Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4346030Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4346040Z 
2025-01-22T20:11:26.4346100Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4346150Z     def plasma(
2025-01-22T20:11:26.4346190Z         self,
2025-01-22T20:11:26.4346240Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4346290Z         config,
2025-01-22T20:11:26.4346330Z     ):
2025-01-22T20:11:26.4346410Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4346480Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4346490Z 
2025-01-22T20:11:26.4346570Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4346750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4346840Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4346900Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4347030Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4347100Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4347180Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4347230Z     return BasePlasma(
2025-01-22T20:11:26.4347290Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4347350Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4347410Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4347470Z     self.update(**kwargs)
2025-01-22T20:11:26.4347530Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4347630Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4347710Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4347790Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4347950Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4348070Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4348240Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4348300Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4348410Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4348540Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4348670Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4348810Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4349010Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4349140Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4349280Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4349420Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4349620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4349710Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4349900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4349970Z     return self.apply_standard()
2025-01-22T20:11:26.4350200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4350300Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4350550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4350640Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4350810Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4350880Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4351090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4351150Z     return self._get_value(key)
2025-01-22T20:11:26.4351360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4351420Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4351510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4351510Z 
2025-01-22T20:11:26.4351630Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4351800Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4351920Z        't046000', 't048000'],
2025-01-22T20:11:26.4351970Z       dtype='object')
2025-01-22T20:11:26.4352020Z key = 'cups'
2025-01-22T20:11:26.4352030Z 
2025-01-22T20:11:26.4352080Z     def get_loc(self, key):
2025-01-22T20:11:26.4352120Z         """
2025-01-22T20:11:26.4352250Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4352300Z     
2025-01-22T20:11:26.4352340Z         Parameters
2025-01-22T20:11:26.4352390Z         ----------
2025-01-22T20:11:26.4352430Z         key : label
2025-01-22T20:11:26.4352470Z     
2025-01-22T20:11:26.4352520Z         Returns
2025-01-22T20:11:26.4352560Z         -------
2025-01-22T20:11:26.4352660Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4352710Z     
2025-01-22T20:11:26.4352760Z         Examples
2025-01-22T20:11:26.4352800Z         --------
2025-01-22T20:11:26.4352870Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4352930Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4352970Z         1
2025-01-22T20:11:26.4353010Z     
2025-01-22T20:11:26.4353090Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4353150Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4353200Z         slice(1, 3, None)
2025-01-22T20:11:26.4353240Z     
2025-01-22T20:11:26.4353320Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4353390Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4353460Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4353500Z         """
2025-01-22T20:11:26.4353570Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4353610Z         try:
2025-01-22T20:11:26.4353680Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4353740Z         except KeyError as err:
2025-01-22T20:11:26.4353800Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4353880Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4353970Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4354020Z             ):
2025-01-22T20:11:26.4354140Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4354210Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4354260Z E           KeyError: 'cups'
2025-01-22T20:11:26.4354270Z 
2025-01-22T20:11:26.4354480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4354690Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-partition_function] _
2025-01-22T20:11:26.4354690Z 
2025-01-22T20:11:26.4354820Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4354990Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4355030Z        't046000', 't048000'],
2025-01-22T20:11:26.4355090Z       dtype='object')
2025-01-22T20:11:26.4355130Z key = 'cups'
2025-01-22T20:11:26.4355140Z 
2025-01-22T20:11:26.4355190Z     def get_loc(self, key):
2025-01-22T20:11:26.4355230Z         """
2025-01-22T20:11:26.4355360Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4355400Z     
2025-01-22T20:11:26.4355450Z         Parameters
2025-01-22T20:11:26.4355500Z         ----------
2025-01-22T20:11:26.4355540Z         key : label
2025-01-22T20:11:26.4355580Z     
2025-01-22T20:11:26.4355620Z         Returns
2025-01-22T20:11:26.4355670Z         -------
2025-01-22T20:11:26.4355770Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4355810Z     
2025-01-22T20:11:26.4355850Z         Examples
2025-01-22T20:11:26.4355900Z         --------
2025-01-22T20:11:26.4355960Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4356020Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4356060Z         1
2025-01-22T20:11:26.4356100Z     
2025-01-22T20:11:26.4356230Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4356290Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4356340Z         slice(1, 3, None)
2025-01-22T20:11:26.4356390Z     
2025-01-22T20:11:26.4356470Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4356530Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4356590Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4356640Z         """
2025-01-22T20:11:26.4356710Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4356750Z         try:
2025-01-22T20:11:26.4356820Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4356830Z 
2025-01-22T20:11:26.4357020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4357110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4357380Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4357430Z     ???
2025-01-22T20:11:26.4357540Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4357580Z     ???
2025-01-22T20:11:26.4357800Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4357840Z     ???
2025-01-22T20:11:26.4357930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4357930Z 
2025-01-22T20:11:26.4357970Z >   ???
2025-01-22T20:11:26.4358020Z E   KeyError: 'cups'
2025-01-22T20:11:26.4358020Z 
2025-01-22T20:11:26.4358120Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4358120Z 
2025-01-22T20:11:26.4358250Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4358250Z 
2025-01-22T20:11:26.4358420Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4358680Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4359170Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4359650Z 
2025-01-22T20:11:26.4363730Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4363840Z     def plasma(
2025-01-22T20:11:26.4363880Z         self,
2025-01-22T20:11:26.4363940Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4363980Z         config,
2025-01-22T20:11:26.4364030Z     ):
2025-01-22T20:11:26.4364110Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4364180Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4364180Z 
2025-01-22T20:11:26.4364270Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4364360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4364440Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4364500Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4364640Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4364710Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4364790Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4364850Z     return BasePlasma(
2025-01-22T20:11:26.4364910Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4364970Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4365040Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4365100Z     self.update(**kwargs)
2025-01-22T20:11:26.4365160Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4365250Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4365330Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4365400Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4366060Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4366190Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4366360Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4366430Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4366530Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4366660Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4366800Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4366940Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4367140Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4367280Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4367420Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4367500Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4367710Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4367800Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4367990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4368050Z     return self.apply_standard()
2025-01-22T20:11:26.4368270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4368360Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4368610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4368700Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4368880Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4368940Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4369270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4369340Z     return self._get_value(key)
2025-01-22T20:11:26.4369540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4369610Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4369690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4369690Z 
2025-01-22T20:11:26.4369820Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4369990Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4370050Z        't046000', 't048000'],
2025-01-22T20:11:26.4370090Z       dtype='object')
2025-01-22T20:11:26.4370140Z key = 'cups'
2025-01-22T20:11:26.4370140Z 
2025-01-22T20:11:26.4370200Z     def get_loc(self, key):
2025-01-22T20:11:26.4370240Z         """
2025-01-22T20:11:26.4370370Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4370410Z     
2025-01-22T20:11:26.4370450Z         Parameters
2025-01-22T20:11:26.4370500Z         ----------
2025-01-22T20:11:26.4370540Z         key : label
2025-01-22T20:11:26.4370580Z     
2025-01-22T20:11:26.4370630Z         Returns
2025-01-22T20:11:26.4370670Z         -------
2025-01-22T20:11:26.4370770Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4370810Z     
2025-01-22T20:11:26.4370860Z         Examples
2025-01-22T20:11:26.4370900Z         --------
2025-01-22T20:11:26.4370970Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4371030Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4371070Z         1
2025-01-22T20:11:26.4371110Z     
2025-01-22T20:11:26.4371260Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4371320Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4371380Z         slice(1, 3, None)
2025-01-22T20:11:26.4371420Z     
2025-01-22T20:11:26.4371510Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4371580Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4371640Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4371680Z         """
2025-01-22T20:11:26.4371750Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4371790Z         try:
2025-01-22T20:11:26.4371860Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4371920Z         except KeyError as err:
2025-01-22T20:11:26.4371990Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4372060Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4372150Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4372200Z             ):
2025-01-22T20:11:26.4372260Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4372330Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4372380Z E           KeyError: 'cups'
2025-01-22T20:11:26.4372390Z 
2025-01-22T20:11:26.4372600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4372800Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-excitation_energy] _
2025-01-22T20:11:26.4372810Z 
2025-01-22T20:11:26.4372930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4373100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4373140Z        't046000', 't048000'],
2025-01-22T20:11:26.4373200Z       dtype='object')
2025-01-22T20:11:26.4373250Z key = 'cups'
2025-01-22T20:11:26.4373260Z 
2025-01-22T20:11:26.4373320Z     def get_loc(self, key):
2025-01-22T20:11:26.4373370Z         """
2025-01-22T20:11:26.4373490Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4373590Z     
2025-01-22T20:11:26.4373640Z         Parameters
2025-01-22T20:11:26.4373680Z         ----------
2025-01-22T20:11:26.4373730Z         key : label
2025-01-22T20:11:26.4373770Z     
2025-01-22T20:11:26.4373810Z         Returns
2025-01-22T20:11:26.4373850Z         -------
2025-01-22T20:11:26.4373950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4374000Z     
2025-01-22T20:11:26.4374040Z         Examples
2025-01-22T20:11:26.4374090Z         --------
2025-01-22T20:11:26.4374160Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4374220Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4374260Z         1
2025-01-22T20:11:26.4374300Z     
2025-01-22T20:11:26.4374370Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4374440Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4374490Z         slice(1, 3, None)
2025-01-22T20:11:26.4374530Z     
2025-01-22T20:11:26.4374620Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4374680Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4374740Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4374790Z         """
2025-01-22T20:11:26.4374860Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4374900Z         try:
2025-01-22T20:11:26.4374980Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4374980Z 
2025-01-22T20:11:26.4375170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4375260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4375360Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4375400Z     ???
2025-01-22T20:11:26.4375560Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4375600Z     ???
2025-01-22T20:11:26.4375820Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4375860Z     ???
2025-01-22T20:11:26.4375950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4375950Z 
2025-01-22T20:11:26.4375990Z >   ???
2025-01-22T20:11:26.4376040Z E   KeyError: 'cups'
2025-01-22T20:11:26.4376050Z 
2025-01-22T20:11:26.4376140Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4376140Z 
2025-01-22T20:11:26.4376280Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4376280Z 
2025-01-22T20:11:26.4376450Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4376710Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4377200Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4377210Z 
2025-01-22T20:11:26.4377270Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4377320Z     def plasma(
2025-01-22T20:11:26.4377360Z         self,
2025-01-22T20:11:26.4377410Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4377460Z         config,
2025-01-22T20:11:26.4377500Z     ):
2025-01-22T20:11:26.4377580Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4377650Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4377650Z 
2025-01-22T20:11:26.4377740Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4377820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4377900Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4377950Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4378090Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4378210Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4378290Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4378340Z     return BasePlasma(
2025-01-22T20:11:26.4378400Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4378460Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4378520Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4378570Z     self.update(**kwargs)
2025-01-22T20:11:26.4378640Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4378730Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4378810Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4378880Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4379040Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4379160Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4379320Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4379390Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4379490Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4379620Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4379750Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4379890Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4380090Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4380230Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4380370Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4380490Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4380700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4380790Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4380990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4381050Z     return self.apply_standard()
2025-01-22T20:11:26.4381270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4381350Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4381600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4381690Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4381860Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4381920Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4382150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4382210Z     return self._get_value(key)
2025-01-22T20:11:26.4382420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4382480Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4382570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4382570Z 
2025-01-22T20:11:26.4382700Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4382870Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4382920Z        't046000', 't048000'],
2025-01-22T20:11:26.4382970Z       dtype='object')
2025-01-22T20:11:26.4383020Z key = 'cups'
2025-01-22T20:11:26.4383020Z 
2025-01-22T20:11:26.4383080Z     def get_loc(self, key):
2025-01-22T20:11:26.4383120Z         """
2025-01-22T20:11:26.4383240Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4383740Z     
2025-01-22T20:11:26.4383790Z         Parameters
2025-01-22T20:11:26.4383840Z         ----------
2025-01-22T20:11:26.4383880Z         key : label
2025-01-22T20:11:26.4383920Z     
2025-01-22T20:11:26.4383970Z         Returns
2025-01-22T20:11:26.4384010Z         -------
2025-01-22T20:11:26.4384110Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4384150Z     
2025-01-22T20:11:26.4384200Z         Examples
2025-01-22T20:11:26.4384250Z         --------
2025-01-22T20:11:26.4384320Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4384380Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4384440Z         1
2025-01-22T20:11:26.4384480Z     
2025-01-22T20:11:26.4384560Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4384630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4384680Z         slice(1, 3, None)
2025-01-22T20:11:26.4384730Z     
2025-01-22T20:11:26.4384810Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4384890Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4384950Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4384990Z         """
2025-01-22T20:11:26.4385060Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4385110Z         try:
2025-01-22T20:11:26.4385180Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4385240Z         except KeyError as err:
2025-01-22T20:11:26.4385310Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4385380Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4385480Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4385520Z             ):
2025-01-22T20:11:26.4385590Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4386080Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4386130Z E           KeyError: 'cups'
2025-01-22T20:11:26.4386140Z 
2025-01-22T20:11:26.4386360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4386540Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines] _
2025-01-22T20:11:26.4386540Z 
2025-01-22T20:11:26.4386670Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4386840Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4386890Z        't046000', 't048000'],
2025-01-22T20:11:26.4386940Z       dtype='object')
2025-01-22T20:11:26.4386980Z key = 'cups'
2025-01-22T20:11:26.4386980Z 
2025-01-22T20:11:26.4387030Z     def get_loc(self, key):
2025-01-22T20:11:26.4387080Z         """
2025-01-22T20:11:26.4387200Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4387240Z     
2025-01-22T20:11:26.4387290Z         Parameters
2025-01-22T20:11:26.4387400Z         ----------
2025-01-22T20:11:26.4387440Z         key : label
2025-01-22T20:11:26.4387490Z     
2025-01-22T20:11:26.4387530Z         Returns
2025-01-22T20:11:26.4387570Z         -------
2025-01-22T20:11:26.4387670Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4387720Z     
2025-01-22T20:11:26.4387760Z         Examples
2025-01-22T20:11:26.4387810Z         --------
2025-01-22T20:11:26.4387880Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4387930Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4387980Z         1
2025-01-22T20:11:26.4388020Z     
2025-01-22T20:11:26.4388090Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4388150Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4388200Z         slice(1, 3, None)
2025-01-22T20:11:26.4388250Z     
2025-01-22T20:11:26.4388330Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4388510Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4388580Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4388620Z         """
2025-01-22T20:11:26.4388860Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4388910Z         try:
2025-01-22T20:11:26.4388990Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4388990Z 
2025-01-22T20:11:26.4389190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4389290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4389390Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4389430Z     ???
2025-01-22T20:11:26.4389530Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4389580Z     ???
2025-01-22T20:11:26.4389790Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4389840Z     ???
2025-01-22T20:11:26.4389930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4389930Z 
2025-01-22T20:11:26.4389970Z >   ???
2025-01-22T20:11:26.4390020Z E   KeyError: 'cups'
2025-01-22T20:11:26.4390020Z 
2025-01-22T20:11:26.4390110Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4390120Z 
2025-01-22T20:11:26.4390240Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4390250Z 
2025-01-22T20:11:26.4390420Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4390680Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4391170Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4391270Z 
2025-01-22T20:11:26.4391330Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4391390Z     def plasma(
2025-01-22T20:11:26.4391430Z         self,
2025-01-22T20:11:26.4391480Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4391520Z         config,
2025-01-22T20:11:26.4391570Z     ):
2025-01-22T20:11:26.4391650Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4391720Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4391720Z 
2025-01-22T20:11:26.4391810Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4391890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4391970Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4392020Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4392150Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4392220Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4392310Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4392350Z     return BasePlasma(
2025-01-22T20:11:26.4392420Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4392480Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4392540Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4392590Z     self.update(**kwargs)
2025-01-22T20:11:26.4392650Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4392740Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4392820Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4392890Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4393050Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4393160Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4393330Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4393460Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4393560Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4393690Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4393820Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4393960Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4394160Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4394300Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4394440Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4394520Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4394720Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4394820Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4395020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4395080Z     return self.apply_standard()
2025-01-22T20:11:26.4395300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4395390Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4395630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4395730Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4395900Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4395970Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4396180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4396290Z     return self._get_value(key)
2025-01-22T20:11:26.4396500Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4396570Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4396650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4396650Z 
2025-01-22T20:11:26.4396780Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4396940Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4396990Z        't046000', 't048000'],
2025-01-22T20:11:26.4397050Z       dtype='object')
2025-01-22T20:11:26.4397090Z key = 'cups'
2025-01-22T20:11:26.4397090Z 
2025-01-22T20:11:26.4397150Z     def get_loc(self, key):
2025-01-22T20:11:26.4397190Z         """
2025-01-22T20:11:26.4397320Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4397360Z     
2025-01-22T20:11:26.4397410Z         Parameters
2025-01-22T20:11:26.4397450Z         ----------
2025-01-22T20:11:26.4397500Z         key : label
2025-01-22T20:11:26.4397540Z     
2025-01-22T20:11:26.4397580Z         Returns
2025-01-22T20:11:26.4397630Z         -------
2025-01-22T20:11:26.4397730Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4397770Z     
2025-01-22T20:11:26.4397820Z         Examples
2025-01-22T20:11:26.4397870Z         --------
2025-01-22T20:11:26.4397930Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4397990Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4398030Z         1
2025-01-22T20:11:26.4398080Z     
2025-01-22T20:11:26.4398150Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4398210Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4398260Z         slice(1, 3, None)
2025-01-22T20:11:26.4398310Z     
2025-01-22T20:11:26.4398400Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4398530Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4398590Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4398640Z         """
2025-01-22T20:11:26.4398710Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4398750Z         try:
2025-01-22T20:11:26.4398830Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4398890Z         except KeyError as err:
2025-01-22T20:11:26.4398960Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4399030Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4399120Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4399160Z             ):
2025-01-22T20:11:26.4399230Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4399290Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4399350Z E           KeyError: 'cups'
2025-01-22T20:11:26.4399350Z 
2025-01-22T20:11:26.4399570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4399800Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] _
2025-01-22T20:11:26.4399800Z 
2025-01-22T20:11:26.4399920Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4400090Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4400140Z        't046000', 't048000'],
2025-01-22T20:11:26.4400190Z       dtype='object')
2025-01-22T20:11:26.4400240Z key = 'cups'
2025-01-22T20:11:26.4400240Z 
2025-01-22T20:11:26.4400290Z     def get_loc(self, key):
2025-01-22T20:11:26.4400340Z         """
2025-01-22T20:11:26.4400460Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4400550Z     
2025-01-22T20:11:26.4400610Z         Parameters
2025-01-22T20:11:26.4400660Z         ----------
2025-01-22T20:11:26.4400710Z         key : label
2025-01-22T20:11:26.4400750Z     
2025-01-22T20:11:26.4400800Z         Returns
2025-01-22T20:11:26.4400840Z         -------
2025-01-22T20:11:26.4400940Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4400980Z     
2025-01-22T20:11:26.4401030Z         Examples
2025-01-22T20:11:26.4401070Z         --------
2025-01-22T20:11:26.4401140Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4401200Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4401240Z         1
2025-01-22T20:11:26.4401280Z     
2025-01-22T20:11:26.4401360Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4401420Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4401470Z         slice(1, 3, None)
2025-01-22T20:11:26.4401510Z     
2025-01-22T20:11:26.4401600Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4401660Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4401730Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4401770Z         """
2025-01-22T20:11:26.4401840Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4401880Z         try:
2025-01-22T20:11:26.4401950Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4401960Z 
2025-01-22T20:11:26.4402150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4402240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4402350Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4402390Z     ???
2025-01-22T20:11:26.4402490Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4402530Z     ???
2025-01-22T20:11:26.4402750Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4402790Z     ???
2025-01-22T20:11:26.4402890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4403540Z 
2025-01-22T20:11:26.4403640Z >   ???
2025-01-22T20:11:26.4403690Z E   KeyError: 'cups'
2025-01-22T20:11:26.4403700Z 
2025-01-22T20:11:26.4403800Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4403800Z 
2025-01-22T20:11:26.4403930Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4403930Z 
2025-01-22T20:11:26.4404110Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4404360Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4404870Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4404880Z 
2025-01-22T20:11:26.4404950Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4404990Z     def plasma(
2025-01-22T20:11:26.4405030Z         self,
2025-01-22T20:11:26.4405090Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4405130Z         config,
2025-01-22T20:11:26.4405170Z     ):
2025-01-22T20:11:26.4405260Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4405330Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4405330Z 
2025-01-22T20:11:26.4405430Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4405510Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4405590Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4405650Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4405780Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4406330Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4406420Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4406480Z     return BasePlasma(
2025-01-22T20:11:26.4406540Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4406600Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4406660Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4406710Z     self.update(**kwargs)
2025-01-22T20:11:26.4406770Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4406870Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4406950Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4407020Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4407170Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4407290Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4407450Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4407530Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4407630Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4407760Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4407900Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4408040Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4408250Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4408390Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4408530Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4408610Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4408810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4408900Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4409100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4409260Z     return self.apply_standard()
2025-01-22T20:11:26.4409480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4409570Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4409810Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4409900Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4410070Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4410140Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4410360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4410420Z     return self._get_value(key)
2025-01-22T20:11:26.4410630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4410690Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4410790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4410790Z 
2025-01-22T20:11:26.4410910Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4411080Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4411130Z        't046000', 't048000'],
2025-01-22T20:11:26.4411180Z       dtype='object')
2025-01-22T20:11:26.4411220Z key = 'cups'
2025-01-22T20:11:26.4411220Z 
2025-01-22T20:11:26.4411280Z     def get_loc(self, key):
2025-01-22T20:11:26.4411320Z         """
2025-01-22T20:11:26.4411440Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4411540Z     
2025-01-22T20:11:26.4411590Z         Parameters
2025-01-22T20:11:26.4411630Z         ----------
2025-01-22T20:11:26.4415660Z         key : label
2025-01-22T20:11:26.4415780Z     
2025-01-22T20:11:26.4415820Z         Returns
2025-01-22T20:11:26.4415870Z         -------
2025-01-22T20:11:26.4415980Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4416020Z     
2025-01-22T20:11:26.4416060Z         Examples
2025-01-22T20:11:26.4416110Z         --------
2025-01-22T20:11:26.4416180Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4416240Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4416280Z         1
2025-01-22T20:11:26.4416320Z     
2025-01-22T20:11:26.4416400Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4416460Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4416510Z         slice(1, 3, None)
2025-01-22T20:11:26.4416550Z     
2025-01-22T20:11:26.4416650Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4416710Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4416780Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4416820Z         """
2025-01-22T20:11:26.4416890Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4416930Z         try:
2025-01-22T20:11:26.4417010Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4417060Z         except KeyError as err:
2025-01-22T20:11:26.4417130Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4417200Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4417300Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4417350Z             ):
2025-01-22T20:11:26.4417410Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4417470Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4417520Z E           KeyError: 'cups'
2025-01-22T20:11:26.4417530Z 
2025-01-22T20:11:26.4417740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4418200Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] _
2025-01-22T20:11:26.4418200Z 
2025-01-22T20:11:26.4418330Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4418510Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4418560Z        't046000', 't048000'],
2025-01-22T20:11:26.4418600Z       dtype='object')
2025-01-22T20:11:26.4418650Z key = 'cups'
2025-01-22T20:11:26.4418650Z 
2025-01-22T20:11:26.4418710Z     def get_loc(self, key):
2025-01-22T20:11:26.4418750Z         """
2025-01-22T20:11:26.4418890Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4418930Z     
2025-01-22T20:11:26.4418980Z         Parameters
2025-01-22T20:11:26.4419030Z         ----------
2025-01-22T20:11:26.4419080Z         key : label
2025-01-22T20:11:26.4419120Z     
2025-01-22T20:11:26.4419160Z         Returns
2025-01-22T20:11:26.4419200Z         -------
2025-01-22T20:11:26.4419300Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4419340Z     
2025-01-22T20:11:26.4419390Z         Examples
2025-01-22T20:11:26.4419430Z         --------
2025-01-22T20:11:26.4419500Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4419560Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4419600Z         1
2025-01-22T20:11:26.4419640Z     
2025-01-22T20:11:26.4419720Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4419780Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4419830Z         slice(1, 3, None)
2025-01-22T20:11:26.4419870Z     
2025-01-22T20:11:26.4419950Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4420120Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4420190Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4420240Z         """
2025-01-22T20:11:26.4420320Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4420360Z         try:
2025-01-22T20:11:26.4420430Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4420430Z 
2025-01-22T20:11:26.4420630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4420720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4420830Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4420870Z     ???
2025-01-22T20:11:26.4420970Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4421020Z     ???
2025-01-22T20:11:26.4421230Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4421270Z     ???
2025-01-22T20:11:26.4421360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4421360Z 
2025-01-22T20:11:26.4421410Z >   ???
2025-01-22T20:11:26.4421460Z E   KeyError: 'cups'
2025-01-22T20:11:26.4421460Z 
2025-01-22T20:11:26.4421550Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4421560Z 
2025-01-22T20:11:26.4421690Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4421690Z 
2025-01-22T20:11:26.4421870Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4422120Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4422610Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4422610Z 
2025-01-22T20:11:26.4422680Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4422800Z     def plasma(
2025-01-22T20:11:26.4422850Z         self,
2025-01-22T20:11:26.4422900Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4422940Z         config,
2025-01-22T20:11:26.4422990Z     ):
2025-01-22T20:11:26.4423070Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4423150Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4423150Z 
2025-01-22T20:11:26.4423240Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4423330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4423400Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4423460Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4423590Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4423660Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4423740Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4423800Z     return BasePlasma(
2025-01-22T20:11:26.4423860Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4423930Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4423990Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4424050Z     self.update(**kwargs)
2025-01-22T20:11:26.4424110Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4424200Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4424290Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4424360Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4424520Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4424640Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4424810Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4424920Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4425020Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4425150Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4425290Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4425430Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4425630Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4425770Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4425910Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4425990Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4426190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4426290Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4426480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4426540Z     return self.apply_standard()
2025-01-22T20:11:26.4426770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4426860Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4427110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4427200Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4427380Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4427440Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4427650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4427710Z     return self._get_value(key)
2025-01-22T20:11:26.4427920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4428380Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4428470Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4428470Z 
2025-01-22T20:11:26.4428600Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4428770Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4428950Z        't046000', 't048000'],
2025-01-22T20:11:26.4429000Z       dtype='object')
2025-01-22T20:11:26.4429050Z key = 'cups'
2025-01-22T20:11:26.4429050Z 
2025-01-22T20:11:26.4429110Z     def get_loc(self, key):
2025-01-22T20:11:26.4429150Z         """
2025-01-22T20:11:26.4429280Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4429320Z     
2025-01-22T20:11:26.4429370Z         Parameters
2025-01-22T20:11:26.4429430Z         ----------
2025-01-22T20:11:26.4429470Z         key : label
2025-01-22T20:11:26.4429520Z     
2025-01-22T20:11:26.4429560Z         Returns
2025-01-22T20:11:26.4429600Z         -------
2025-01-22T20:11:26.4429710Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4429750Z     
2025-01-22T20:11:26.4429790Z         Examples
2025-01-22T20:11:26.4429830Z         --------
2025-01-22T20:11:26.4429900Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4429960Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4430010Z         1
2025-01-22T20:11:26.4430050Z     
2025-01-22T20:11:26.4430120Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4430180Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4430240Z         slice(1, 3, None)
2025-01-22T20:11:26.4430280Z     
2025-01-22T20:11:26.4430360Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4430820Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4430890Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4430930Z         """
2025-01-22T20:11:26.4431010Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4431050Z         try:
2025-01-22T20:11:26.4431130Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4431180Z         except KeyError as err:
2025-01-22T20:11:26.4431250Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4431320Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4431410Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4431460Z             ):
2025-01-22T20:11:26.4431520Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4431580Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4431630Z E           KeyError: 'cups'
2025-01-22T20:11:26.4431630Z 
2025-01-22T20:11:26.4431850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4432050Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-atomic_mass] _
2025-01-22T20:11:26.4432050Z 
2025-01-22T20:11:26.4432180Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4432350Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4432400Z        't046000', 't048000'],
2025-01-22T20:11:26.4432450Z       dtype='object')
2025-01-22T20:11:26.4432500Z key = 'cups'
2025-01-22T20:11:26.4432500Z 
2025-01-22T20:11:26.4432560Z     def get_loc(self, key):
2025-01-22T20:11:26.4432600Z         """
2025-01-22T20:11:26.4432730Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4432770Z     
2025-01-22T20:11:26.4432820Z         Parameters
2025-01-22T20:11:26.4432860Z         ----------
2025-01-22T20:11:26.4432910Z         key : label
2025-01-22T20:11:26.4432950Z     
2025-01-22T20:11:26.4432990Z         Returns
2025-01-22T20:11:26.4433030Z         -------
2025-01-22T20:11:26.4433220Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4433260Z     
2025-01-22T20:11:26.4433310Z         Examples
2025-01-22T20:11:26.4433350Z         --------
2025-01-22T20:11:26.4433420Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4433480Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4433520Z         1
2025-01-22T20:11:26.4433560Z     
2025-01-22T20:11:26.4433640Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4433700Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4433750Z         slice(1, 3, None)
2025-01-22T20:11:26.4433790Z     
2025-01-22T20:11:26.4433870Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4433940Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4434000Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4434050Z         """
2025-01-22T20:11:26.4434120Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4434160Z         try:
2025-01-22T20:11:26.4434230Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4434240Z 
2025-01-22T20:11:26.4434440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4434530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4434630Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4434680Z     ???
2025-01-22T20:11:26.4434770Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4434820Z     ???
2025-01-22T20:11:26.4435030Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4435070Z     ???
2025-01-22T20:11:26.4435150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4435200Z 
2025-01-22T20:11:26.4435250Z >   ???
2025-01-22T20:11:26.4435300Z E   KeyError: 'cups'
2025-01-22T20:11:26.4435310Z 
2025-01-22T20:11:26.4435400Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4435410Z 
2025-01-22T20:11:26.4435540Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4435540Z 
2025-01-22T20:11:26.4435700Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4435960Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4436450Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4436450Z 
2025-01-22T20:11:26.4436520Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4436570Z     def plasma(
2025-01-22T20:11:26.4436610Z         self,
2025-01-22T20:11:26.4436660Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4436710Z         config,
2025-01-22T20:11:26.4436750Z     ):
2025-01-22T20:11:26.4436840Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4436910Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4436910Z 
2025-01-22T20:11:26.4437030Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4437120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4437200Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4437260Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4437380Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4437460Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4437530Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4437590Z     return BasePlasma(
2025-01-22T20:11:26.4437650Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4437710Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4437880Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4437930Z     self.update(**kwargs)
2025-01-22T20:11:26.4438000Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4438090Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4438170Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4438240Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4438400Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4438520Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4438680Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4438750Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4438850Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4438980Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4439110Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4439250Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4439450Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4439590Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4439730Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4439810Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4440010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4440110Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4440300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4440430Z     return self.apply_standard()
2025-01-22T20:11:26.4440670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4440770Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4441020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4441110Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4441290Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4441350Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4441560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4441620Z     return self._get_value(key)
2025-01-22T20:11:26.4441830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4441890Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4441980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4441990Z 
2025-01-22T20:11:26.4442110Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4442280Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4442330Z        't046000', 't048000'],
2025-01-22T20:11:26.4442380Z       dtype='object')
2025-01-22T20:11:26.4442420Z key = 'cups'
2025-01-22T20:11:26.4442420Z 
2025-01-22T20:11:26.4442480Z     def get_loc(self, key):
2025-01-22T20:11:26.4442530Z         """
2025-01-22T20:11:26.4442650Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4442690Z     
2025-01-22T20:11:26.4442740Z         Parameters
2025-01-22T20:11:26.4442780Z         ----------
2025-01-22T20:11:26.4442830Z         key : label
2025-01-22T20:11:26.4442880Z     
2025-01-22T20:11:26.4442920Z         Returns
2025-01-22T20:11:26.4442960Z         -------
2025-01-22T20:11:26.4443120Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4443170Z     
2025-01-22T20:11:26.4443220Z         Examples
2025-01-22T20:11:26.4443260Z         --------
2025-01-22T20:11:26.4443340Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4443400Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4443440Z         1
2025-01-22T20:11:26.4443480Z     
2025-01-22T20:11:26.4443560Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4443630Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4443680Z         slice(1, 3, None)
2025-01-22T20:11:26.4443720Z     
2025-01-22T20:11:26.4443810Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4443870Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4443930Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4443980Z         """
2025-01-22T20:11:26.4444050Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4444090Z         try:
2025-01-22T20:11:26.4444160Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4444220Z         except KeyError as err:
2025-01-22T20:11:26.4444300Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4444370Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4444470Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4444510Z             ):
2025-01-22T20:11:26.4444570Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4444630Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4444690Z E           KeyError: 'cups'
2025-01-22T20:11:26.4444690Z 
2025-01-22T20:11:26.4444910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4445160Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-ionization_data] _
2025-01-22T20:11:26.4445160Z 
2025-01-22T20:11:26.4445290Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4445460Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4445510Z        't046000', 't048000'],
2025-01-22T20:11:26.4445560Z       dtype='object')
2025-01-22T20:11:26.4445610Z key = 'cups'
2025-01-22T20:11:26.4445610Z 
2025-01-22T20:11:26.4445670Z     def get_loc(self, key):
2025-01-22T20:11:26.4445710Z         """
2025-01-22T20:11:26.4445830Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4445870Z     
2025-01-22T20:11:26.4445920Z         Parameters
2025-01-22T20:11:26.4445960Z         ----------
2025-01-22T20:11:26.4446010Z         key : label
2025-01-22T20:11:26.4446050Z     
2025-01-22T20:11:26.4446090Z         Returns
2025-01-22T20:11:26.4446140Z         -------
2025-01-22T20:11:26.4446250Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4446300Z     
2025-01-22T20:11:26.4446340Z         Examples
2025-01-22T20:11:26.4446390Z         --------
2025-01-22T20:11:26.4446460Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4446520Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4446560Z         1
2025-01-22T20:11:26.4446600Z     
2025-01-22T20:11:26.4446670Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4446740Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4446790Z         slice(1, 3, None)
2025-01-22T20:11:26.4446830Z     
2025-01-22T20:11:26.4446910Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4446970Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4447030Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4447080Z         """
2025-01-22T20:11:26.4447150Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4447190Z         try:
2025-01-22T20:11:26.4447260Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4447620Z 
2025-01-22T20:11:26.4447840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4447940Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4448040Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4448090Z     ???
2025-01-22T20:11:26.4448180Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4448230Z     ???
2025-01-22T20:11:26.4448440Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4448480Z     ???
2025-01-22T20:11:26.4448570Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4448570Z 
2025-01-22T20:11:26.4448610Z >   ???
2025-01-22T20:11:26.4448660Z E   KeyError: 'cups'
2025-01-22T20:11:26.4448670Z 
2025-01-22T20:11:26.4448760Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4448770Z 
2025-01-22T20:11:26.4448890Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4448900Z 
2025-01-22T20:11:26.4449060Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4449320Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4449810Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4449810Z 
2025-01-22T20:11:26.4449880Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4449930Z     def plasma(
2025-01-22T20:11:26.4450260Z         self,
2025-01-22T20:11:26.4450320Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4450370Z         config,
2025-01-22T20:11:26.4450410Z     ):
2025-01-22T20:11:26.4450500Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4450570Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4450570Z 
2025-01-22T20:11:26.4450660Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4450750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4450820Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4450880Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4451010Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4451070Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4451150Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4451200Z     return BasePlasma(
2025-01-22T20:11:26.4451260Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4451320Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4451390Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4451440Z     self.update(**kwargs)
2025-01-22T20:11:26.4451510Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4451600Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4451680Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4451750Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4451910Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4452020Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4452190Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4452260Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4452360Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4452490Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4452620Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4452850Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4453050Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4453190Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4453330Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4453400Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4453600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4453700Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4453890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4453950Z     return self.apply_standard()
2025-01-22T20:11:26.4454170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4454270Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4454510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4454600Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4454780Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4454840Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4455050Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4455110Z     return self._get_value(key)
2025-01-22T20:11:26.4455320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4455380Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4455540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4455550Z 
2025-01-22T20:11:26.4455670Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4455840Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4455890Z        't046000', 't048000'],
2025-01-22T20:11:26.4455940Z       dtype='object')
2025-01-22T20:11:26.4455990Z key = 'cups'
2025-01-22T20:11:26.4455990Z 
2025-01-22T20:11:26.4456040Z     def get_loc(self, key):
2025-01-22T20:11:26.4456080Z         """
2025-01-22T20:11:26.4456210Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4456250Z     
2025-01-22T20:11:26.4456300Z         Parameters
2025-01-22T20:11:26.4456340Z         ----------
2025-01-22T20:11:26.4456390Z         key : label
2025-01-22T20:11:26.4456430Z     
2025-01-22T20:11:26.4456470Z         Returns
2025-01-22T20:11:26.4456520Z         -------
2025-01-22T20:11:26.4456620Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4456670Z     
2025-01-22T20:11:26.4456720Z         Examples
2025-01-22T20:11:26.4456760Z         --------
2025-01-22T20:11:26.4456830Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4456880Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4456930Z         1
2025-01-22T20:11:26.4456970Z     
2025-01-22T20:11:26.4457040Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4457110Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4457160Z         slice(1, 3, None)
2025-01-22T20:11:26.4457200Z     
2025-01-22T20:11:26.4457290Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4457350Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4457420Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4457460Z         """
2025-01-22T20:11:26.4457540Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4457590Z         try:
2025-01-22T20:11:26.4457660Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4457770Z         except KeyError as err:
2025-01-22T20:11:26.4457850Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4457920Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4458010Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4458060Z             ):
2025-01-22T20:11:26.4458120Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4458180Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4458240Z E           KeyError: 'cups'
2025-01-22T20:11:26.4458240Z 
2025-01-22T20:11:26.4458450Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4458620Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-nu] _
2025-01-22T20:11:26.4458630Z 
2025-01-22T20:11:26.4458750Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4458920Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4458980Z        't046000', 't048000'],
2025-01-22T20:11:26.4459030Z       dtype='object')
2025-01-22T20:11:26.4459070Z key = 'cups'
2025-01-22T20:11:26.4459070Z 
2025-01-22T20:11:26.4459120Z     def get_loc(self, key):
2025-01-22T20:11:26.4459160Z         """
2025-01-22T20:11:26.4459290Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4459330Z     
2025-01-22T20:11:26.4459380Z         Parameters
2025-01-22T20:11:26.4459430Z         ----------
2025-01-22T20:11:26.4459470Z         key : label
2025-01-22T20:11:26.4459520Z     
2025-01-22T20:11:26.4459570Z         Returns
2025-01-22T20:11:26.4459620Z         -------
2025-01-22T20:11:26.4459720Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4459830Z     
2025-01-22T20:11:26.4459870Z         Examples
2025-01-22T20:11:26.4459920Z         --------
2025-01-22T20:11:26.4459990Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4460050Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4460090Z         1
2025-01-22T20:11:26.4460130Z     
2025-01-22T20:11:26.4460210Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4460280Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4460330Z         slice(1, 3, None)
2025-01-22T20:11:26.4460370Z     
2025-01-22T20:11:26.4460450Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4460520Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4464410Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4464560Z         """
2025-01-22T20:11:26.4464630Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4464680Z         try:
2025-01-22T20:11:26.4464780Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4464780Z 
2025-01-22T20:11:26.4464980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4465080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4465180Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4465230Z     ???
2025-01-22T20:11:26.4465330Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4465380Z     ???
2025-01-22T20:11:26.4465590Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4465630Z     ???
2025-01-22T20:11:26.4465730Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4465730Z 
2025-01-22T20:11:26.4465770Z >   ???
2025-01-22T20:11:26.4465820Z E   KeyError: 'cups'
2025-01-22T20:11:26.4465820Z 
2025-01-22T20:11:26.4465920Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4465920Z 
2025-01-22T20:11:26.4466060Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4466330Z 
2025-01-22T20:11:26.4466510Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4466770Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4467270Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4467270Z 
2025-01-22T20:11:26.4467340Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4467390Z     def plasma(
2025-01-22T20:11:26.4467430Z         self,
2025-01-22T20:11:26.4467490Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4467530Z         config,
2025-01-22T20:11:26.4467580Z     ):
2025-01-22T20:11:26.4467670Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4467740Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4467750Z 
2025-01-22T20:11:26.4467830Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4467920Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4467990Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4468050Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4468170Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4468240Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4468320Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4468370Z     return BasePlasma(
2025-01-22T20:11:26.4468430Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4468490Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4468640Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4468690Z     self.update(**kwargs)
2025-01-22T20:11:26.4468750Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4468850Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4469040Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4469110Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4469270Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4469390Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4469550Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4469630Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4469730Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4469860Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4469990Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4470140Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4470340Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4470480Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4470620Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4470690Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4470890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4470980Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4471170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4471230Z     return self.apply_standard()
2025-01-22T20:11:26.4471460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4471550Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4472170Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4472260Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4472430Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4472490Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4472700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4472760Z     return self._get_value(key)
2025-01-22T20:11:26.4472970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4473030Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4473120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4473120Z 
2025-01-22T20:11:26.4473250Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4473420Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4473470Z        't046000', 't048000'],
2025-01-22T20:11:26.4473520Z       dtype='object')
2025-01-22T20:11:26.4473570Z key = 'cups'
2025-01-22T20:11:26.4473570Z 
2025-01-22T20:11:26.4473630Z     def get_loc(self, key):
2025-01-22T20:11:26.4473670Z         """
2025-01-22T20:11:26.4473800Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4473840Z     
2025-01-22T20:11:26.4473880Z         Parameters
2025-01-22T20:11:26.4473930Z         ----------
2025-01-22T20:11:26.4473980Z         key : label
2025-01-22T20:11:26.4474020Z     
2025-01-22T20:11:26.4474060Z         Returns
2025-01-22T20:11:26.4474110Z         -------
2025-01-22T20:11:26.4474210Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4474510Z     
2025-01-22T20:11:26.4474560Z         Examples
2025-01-22T20:11:26.4474610Z         --------
2025-01-22T20:11:26.4474680Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4474740Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4474790Z         1
2025-01-22T20:11:26.4474830Z     
2025-01-22T20:11:26.4474910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4474980Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4475030Z         slice(1, 3, None)
2025-01-22T20:11:26.4475070Z     
2025-01-22T20:11:26.4475150Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4475220Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4475290Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4475330Z         """
2025-01-22T20:11:26.4475400Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4475440Z         try:
2025-01-22T20:11:26.4475520Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4475580Z         except KeyError as err:
2025-01-22T20:11:26.4475650Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4475730Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4475820Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4475860Z             ):
2025-01-22T20:11:26.4475930Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4475980Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4476040Z E           KeyError: 'cups'
2025-01-22T20:11:26.4476040Z 
2025-01-22T20:11:26.4476250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4476450Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] _
2025-01-22T20:11:26.4476450Z 
2025-01-22T20:11:26.4476570Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4476750Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4476880Z        't046000', 't048000'],
2025-01-22T20:11:26.4476930Z       dtype='object')
2025-01-22T20:11:26.4476970Z key = 'cups'
2025-01-22T20:11:26.4476980Z 
2025-01-22T20:11:26.4477030Z     def get_loc(self, key):
2025-01-22T20:11:26.4477070Z         """
2025-01-22T20:11:26.4477200Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4477240Z     
2025-01-22T20:11:26.4477280Z         Parameters
2025-01-22T20:11:26.4477330Z         ----------
2025-01-22T20:11:26.4477370Z         key : label
2025-01-22T20:11:26.4477410Z     
2025-01-22T20:11:26.4477450Z         Returns
2025-01-22T20:11:26.4477500Z         -------
2025-01-22T20:11:26.4477590Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4477630Z     
2025-01-22T20:11:26.4477680Z         Examples
2025-01-22T20:11:26.4477730Z         --------
2025-01-22T20:11:26.4477800Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4477860Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4477900Z         1
2025-01-22T20:11:26.4477940Z     
2025-01-22T20:11:26.4478020Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4478080Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4478140Z         slice(1, 3, None)
2025-01-22T20:11:26.4478180Z     
2025-01-22T20:11:26.4478260Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4478330Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4478390Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4478430Z         """
2025-01-22T20:11:26.4478500Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4478550Z         try:
2025-01-22T20:11:26.4478630Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4478680Z 
2025-01-22T20:11:26.4478870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4478970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4479070Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4479110Z     ???
2025-01-22T20:11:26.4479210Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4479250Z     ???
2025-01-22T20:11:26.4479470Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4479510Z     ???
2025-01-22T20:11:26.4479600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4479600Z 
2025-01-22T20:11:26.4479650Z >   ???
2025-01-22T20:11:26.4479700Z E   KeyError: 'cups'
2025-01-22T20:11:26.4479700Z 
2025-01-22T20:11:26.4479800Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4479800Z 
2025-01-22T20:11:26.4479930Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4479940Z 
2025-01-22T20:11:26.4480110Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4480370Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4480850Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4480860Z 
2025-01-22T20:11:26.4480920Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4480970Z     def plasma(
2025-01-22T20:11:26.4481010Z         self,
2025-01-22T20:11:26.4481070Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4481110Z         config,
2025-01-22T20:11:26.4481150Z     ):
2025-01-22T20:11:26.4481240Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4481300Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4481360Z 
2025-01-22T20:11:26.4481450Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4481540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4481610Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4481670Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4481800Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4481860Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4481960Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4482010Z     return BasePlasma(
2025-01-22T20:11:26.4482080Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4482140Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4482210Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4482260Z     self.update(**kwargs)
2025-01-22T20:11:26.4482320Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4482420Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4482510Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4482600Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4482760Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4482880Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4483040Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4483120Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4483210Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4483350Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4483480Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4483630Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4483900Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4484040Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4484180Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4484260Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4484460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4484550Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4484750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4484800Z     return self.apply_standard()
2025-01-22T20:11:26.4485020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4485110Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4485360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4485460Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4485630Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4485690Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4485900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4485960Z     return self._get_value(key)
2025-01-22T20:11:26.4486160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4486220Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4486310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4486310Z 
2025-01-22T20:11:26.4486430Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4486610Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4486710Z        't046000', 't048000'],
2025-01-22T20:11:26.4486770Z       dtype='object')
2025-01-22T20:11:26.4486820Z key = 'cups'
2025-01-22T20:11:26.4486820Z 
2025-01-22T20:11:26.4486880Z     def get_loc(self, key):
2025-01-22T20:11:26.4486920Z         """
2025-01-22T20:11:26.4487040Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4487090Z     
2025-01-22T20:11:26.4487140Z         Parameters
2025-01-22T20:11:26.4487180Z         ----------
2025-01-22T20:11:26.4487220Z         key : label
2025-01-22T20:11:26.4487270Z     
2025-01-22T20:11:26.4487310Z         Returns
2025-01-22T20:11:26.4487380Z         -------
2025-01-22T20:11:26.4487480Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4487530Z     
2025-01-22T20:11:26.4487580Z         Examples
2025-01-22T20:11:26.4487620Z         --------
2025-01-22T20:11:26.4487690Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4487750Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4487790Z         1
2025-01-22T20:11:26.4487840Z     
2025-01-22T20:11:26.4487910Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4487970Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4488020Z         slice(1, 3, None)
2025-01-22T20:11:26.4488060Z     
2025-01-22T20:11:26.4488140Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4488210Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4488270Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4488310Z         """
2025-01-22T20:11:26.4488380Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4488430Z         try:
2025-01-22T20:11:26.4488500Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4488610Z         except KeyError as err:
2025-01-22T20:11:26.4488690Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4488760Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4488860Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4488900Z             ):
2025-01-22T20:11:26.4488970Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4489030Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4489080Z E           KeyError: 'cups'
2025-01-22T20:11:26.4489090Z 
2025-01-22T20:11:26.4489300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4489480Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-f_lu] _
2025-01-22T20:11:26.4489480Z 
2025-01-22T20:11:26.4489600Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4489770Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4489830Z        't046000', 't048000'],
2025-01-22T20:11:26.4489880Z       dtype='object')
2025-01-22T20:11:26.4489930Z key = 'cups'
2025-01-22T20:11:26.4489930Z 
2025-01-22T20:11:26.4489980Z     def get_loc(self, key):
2025-01-22T20:11:26.4490030Z         """
2025-01-22T20:11:26.4490150Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4490190Z     
2025-01-22T20:11:26.4490230Z         Parameters
2025-01-22T20:11:26.4490280Z         ----------
2025-01-22T20:11:26.4490320Z         key : label
2025-01-22T20:11:26.4490360Z     
2025-01-22T20:11:26.4490400Z         Returns
2025-01-22T20:11:26.4490450Z         -------
2025-01-22T20:11:26.4490540Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4490590Z     
2025-01-22T20:11:26.4490630Z         Examples
2025-01-22T20:11:26.4490670Z         --------
2025-01-22T20:11:26.4490740Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4490800Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4491230Z         1
2025-01-22T20:11:26.4491270Z     
2025-01-22T20:11:26.4491350Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4491410Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4491460Z         slice(1, 3, None)
2025-01-22T20:11:26.4491500Z     
2025-01-22T20:11:26.4491580Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4491640Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4491710Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4491750Z         """
2025-01-22T20:11:26.4491820Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4491860Z         try:
2025-01-22T20:11:26.4491940Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4491940Z 
2025-01-22T20:11:26.4492130Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4492230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4492340Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4492380Z     ???
2025-01-22T20:11:26.4492480Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4492520Z     ???
2025-01-22T20:11:26.4492730Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4492780Z     ???
2025-01-22T20:11:26.4492860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4492870Z 
2025-01-22T20:11:26.4492910Z >   ???
2025-01-22T20:11:26.4492960Z E   KeyError: 'cups'
2025-01-22T20:11:26.4492960Z 
2025-01-22T20:11:26.4493050Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4493060Z 
2025-01-22T20:11:26.4493180Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4493470Z 
2025-01-22T20:11:26.4493650Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4493920Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4494410Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4494420Z 
2025-01-22T20:11:26.4494480Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4494530Z     def plasma(
2025-01-22T20:11:26.4494570Z         self,
2025-01-22T20:11:26.4494620Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4494670Z         config,
2025-01-22T20:11:26.4494710Z     ):
2025-01-22T20:11:26.4494790Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4494860Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4494870Z 
2025-01-22T20:11:26.4494950Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4495040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4495120Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4495170Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4495300Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4495370Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4495450Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4495500Z     return BasePlasma(
2025-01-22T20:11:26.4495560Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4495620Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4495680Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4495740Z     self.update(**kwargs)
2025-01-22T20:11:26.4495790Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4495890Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4495970Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4496130Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4496280Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4496400Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4496560Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4496640Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4496730Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4496860Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4497000Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4497130Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4497340Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4497470Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4497620Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4497690Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4497900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4498000Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4498190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4498250Z     return self.apply_standard()
2025-01-22T20:11:26.4498470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4498560Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4498800Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4498950Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4499120Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4499190Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4499400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4499460Z     return self._get_value(key)
2025-01-22T20:11:26.4499680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4499740Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4499820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4499820Z 
2025-01-22T20:11:26.4499950Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4500130Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4500180Z        't046000', 't048000'],
2025-01-22T20:11:26.4500240Z       dtype='object')
2025-01-22T20:11:26.4500280Z key = 'cups'
2025-01-22T20:11:26.4500290Z 
2025-01-22T20:11:26.4500340Z     def get_loc(self, key):
2025-01-22T20:11:26.4500380Z         """
2025-01-22T20:11:26.4500510Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4500550Z     
2025-01-22T20:11:26.4500600Z         Parameters
2025-01-22T20:11:26.4500640Z         ----------
2025-01-22T20:11:26.4500690Z         key : label
2025-01-22T20:11:26.4500730Z     
2025-01-22T20:11:26.4500770Z         Returns
2025-01-22T20:11:26.4500820Z         -------
2025-01-22T20:11:26.4500920Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4500960Z     
2025-01-22T20:11:26.4501000Z         Examples
2025-01-22T20:11:26.4501050Z         --------
2025-01-22T20:11:26.4501120Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4501180Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4501290Z         1
2025-01-22T20:11:26.4501330Z     
2025-01-22T20:11:26.4501410Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4501470Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4501520Z         slice(1, 3, None)
2025-01-22T20:11:26.4501560Z     
2025-01-22T20:11:26.4501640Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4501710Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4501770Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4501810Z         """
2025-01-22T20:11:26.4501890Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4501930Z         try:
2025-01-22T20:11:26.4502010Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4502060Z         except KeyError as err:
2025-01-22T20:11:26.4502140Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4502220Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4502320Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4502360Z             ):
2025-01-22T20:11:26.4502430Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4502490Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4502540Z E           KeyError: 'cups'
2025-01-22T20:11:26.4502550Z 
2025-01-22T20:11:26.4502760Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4502960Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-metastability] _
2025-01-22T20:11:26.4502970Z 
2025-01-22T20:11:26.4503090Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4503260Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4503380Z        't046000', 't048000'],
2025-01-22T20:11:26.4503430Z       dtype='object')
2025-01-22T20:11:26.4503480Z key = 'cups'
2025-01-22T20:11:26.4503480Z 
2025-01-22T20:11:26.4503540Z     def get_loc(self, key):
2025-01-22T20:11:26.4503580Z         """
2025-01-22T20:11:26.4503710Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4503750Z     
2025-01-22T20:11:26.4503800Z         Parameters
2025-01-22T20:11:26.4503840Z         ----------
2025-01-22T20:11:26.4503880Z         key : label
2025-01-22T20:11:26.4503930Z     
2025-01-22T20:11:26.4503970Z         Returns
2025-01-22T20:11:26.4504010Z         -------
2025-01-22T20:11:26.4504110Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4504150Z     
2025-01-22T20:11:26.4504200Z         Examples
2025-01-22T20:11:26.4504250Z         --------
2025-01-22T20:11:26.4504320Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4504370Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4504420Z         1
2025-01-22T20:11:26.4504460Z     
2025-01-22T20:11:26.4504540Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4504600Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4504660Z         slice(1, 3, None)
2025-01-22T20:11:26.4504700Z     
2025-01-22T20:11:26.4504780Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4504840Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4504910Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4504950Z         """
2025-01-22T20:11:26.4505020Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4505070Z         try:
2025-01-22T20:11:26.4505140Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4505140Z 
2025-01-22T20:11:26.4505330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4505420Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4505530Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4505620Z     ???
2025-01-22T20:11:26.4505730Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4505770Z     ???
2025-01-22T20:11:26.4505990Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4506040Z     ???
2025-01-22T20:11:26.4506130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4506130Z 
2025-01-22T20:11:26.4506170Z >   ???
2025-01-22T20:11:26.4506220Z E   KeyError: 'cups'
2025-01-22T20:11:26.4506220Z 
2025-01-22T20:11:26.4506320Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4506320Z 
2025-01-22T20:11:26.4506450Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4506450Z 
2025-01-22T20:11:26.4506620Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4506870Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4507370Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4507370Z 
2025-01-22T20:11:26.4507430Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4507480Z     def plasma(
2025-01-22T20:11:26.4507520Z         self,
2025-01-22T20:11:26.4507570Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4507620Z         config,
2025-01-22T20:11:26.4507660Z     ):
2025-01-22T20:11:26.4507740Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4507810Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4507820Z 
2025-01-22T20:11:26.4507950Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4508040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4508120Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4508180Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4508300Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4508370Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4508450Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4508500Z     return BasePlasma(
2025-01-22T20:11:26.4508560Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4508620Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4508680Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4508730Z     self.update(**kwargs)
2025-01-22T20:11:26.4508790Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4508880Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4509090Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4509170Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4509320Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4509450Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4509610Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4509680Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4509780Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4509910Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4510040Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4510180Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4510380Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4510520Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4510660Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4511210Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4511420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4511510Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4511700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4511770Z     return self.apply_standard()
2025-01-22T20:11:26.4511990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4515780Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4516080Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4516190Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4516360Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4516430Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4516640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4516700Z     return self._get_value(key)
2025-01-22T20:11:26.4516920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4516980Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4517080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4517080Z 
2025-01-22T20:11:26.4517210Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4517380Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4517690Z        't046000', 't048000'],
2025-01-22T20:11:26.4517740Z       dtype='object')
2025-01-22T20:11:26.4517790Z key = 'cups'
2025-01-22T20:11:26.4517800Z 
2025-01-22T20:11:26.4517850Z     def get_loc(self, key):
2025-01-22T20:11:26.4517900Z         """
2025-01-22T20:11:26.4518020Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4518070Z     
2025-01-22T20:11:26.4518110Z         Parameters
2025-01-22T20:11:26.4518160Z         ----------
2025-01-22T20:11:26.4518210Z         key : label
2025-01-22T20:11:26.4518250Z     
2025-01-22T20:11:26.4518290Z         Returns
2025-01-22T20:11:26.4518340Z         -------
2025-01-22T20:11:26.4518440Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4518490Z     
2025-01-22T20:11:26.4518530Z         Examples
2025-01-22T20:11:26.4518570Z         --------
2025-01-22T20:11:26.4518640Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4518710Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4518750Z         1
2025-01-22T20:11:26.4518790Z     
2025-01-22T20:11:26.4518870Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4518940Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4518990Z         slice(1, 3, None)
2025-01-22T20:11:26.4519030Z     
2025-01-22T20:11:26.4519110Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4519170Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4519240Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4519280Z         """
2025-01-22T20:11:26.4519350Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4519390Z         try:
2025-01-22T20:11:26.4519460Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4519520Z         except KeyError as err:
2025-01-22T20:11:26.4519590Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4519660Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4519760Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4519890Z             ):
2025-01-22T20:11:26.4519960Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4520020Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4520070Z E           KeyError: 'cups'
2025-01-22T20:11:26.4520070Z 
2025-01-22T20:11:26.4520290Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4520470Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-delta] _
2025-01-22T20:11:26.4520470Z 
2025-01-22T20:11:26.4520600Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4520780Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4520840Z        't046000', 't048000'],
2025-01-22T20:11:26.4520890Z       dtype='object')
2025-01-22T20:11:26.4520940Z key = 'cups'
2025-01-22T20:11:26.4520940Z 
2025-01-22T20:11:26.4521000Z     def get_loc(self, key):
2025-01-22T20:11:26.4521040Z         """
2025-01-22T20:11:26.4521170Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4521210Z     
2025-01-22T20:11:26.4521260Z         Parameters
2025-01-22T20:11:26.4521300Z         ----------
2025-01-22T20:11:26.4521350Z         key : label
2025-01-22T20:11:26.4521390Z     
2025-01-22T20:11:26.4521430Z         Returns
2025-01-22T20:11:26.4521480Z         -------
2025-01-22T20:11:26.4521580Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4521620Z     
2025-01-22T20:11:26.4521670Z         Examples
2025-01-22T20:11:26.4521710Z         --------
2025-01-22T20:11:26.4521780Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4521840Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4521900Z         1
2025-01-22T20:11:26.4521990Z     
2025-01-22T20:11:26.4522070Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4522130Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4522190Z         slice(1, 3, None)
2025-01-22T20:11:26.4522240Z     
2025-01-22T20:11:26.4522320Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4522380Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4522440Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4522490Z         """
2025-01-22T20:11:26.4522560Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4522600Z         try:
2025-01-22T20:11:26.4522670Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4522680Z 
2025-01-22T20:11:26.4522870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4522950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4523060Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4523100Z     ???
2025-01-22T20:11:26.4523210Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4523260Z     ???
2025-01-22T20:11:26.4523470Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4523510Z     ???
2025-01-22T20:11:26.4523590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4523600Z 
2025-01-22T20:11:26.4523640Z >   ???
2025-01-22T20:11:26.4523690Z E   KeyError: 'cups'
2025-01-22T20:11:26.4523690Z 
2025-01-22T20:11:26.4523790Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4523800Z 
2025-01-22T20:11:26.4523930Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4523940Z 
2025-01-22T20:11:26.4524110Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4524380Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4524910Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4524920Z 
2025-01-22T20:11:26.4524980Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4525030Z     def plasma(
2025-01-22T20:11:26.4525070Z         self,
2025-01-22T20:11:26.4525120Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4525170Z         config,
2025-01-22T20:11:26.4525210Z     ):
2025-01-22T20:11:26.4525290Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4525360Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4525360Z 
2025-01-22T20:11:26.4525450Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4525540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4525620Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4525680Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4525810Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4525880Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4525960Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4526010Z     return BasePlasma(
2025-01-22T20:11:26.4526070Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4526130Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4526190Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4526250Z     self.update(**kwargs)
2025-01-22T20:11:26.4526310Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4526400Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4526490Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4526560Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4526770Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4526890Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4527050Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4527120Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4527220Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4527350Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4527490Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4527620Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4527830Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4527970Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4528110Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4528190Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4528390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4528490Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4528680Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4528740Z     return self.apply_standard()
2025-01-22T20:11:26.4528960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4529050Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4529300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4529390Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4529570Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4529620Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4529900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4529950Z     return self._get_value(key)
2025-01-22T20:11:26.4530160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4530220Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4530310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4530310Z 
2025-01-22T20:11:26.4530440Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4530610Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4530660Z        't046000', 't048000'],
2025-01-22T20:11:26.4530710Z       dtype='object')
2025-01-22T20:11:26.4530760Z key = 'cups'
2025-01-22T20:11:26.4530760Z 
2025-01-22T20:11:26.4530810Z     def get_loc(self, key):
2025-01-22T20:11:26.4530870Z         """
2025-01-22T20:11:26.4530990Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4531030Z     
2025-01-22T20:11:26.4531080Z         Parameters
2025-01-22T20:11:26.4531120Z         ----------
2025-01-22T20:11:26.4531160Z         key : label
2025-01-22T20:11:26.4531200Z     
2025-01-22T20:11:26.4531250Z         Returns
2025-01-22T20:11:26.4531290Z         -------
2025-01-22T20:11:26.4531390Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4531430Z     
2025-01-22T20:11:26.4531480Z         Examples
2025-01-22T20:11:26.4531520Z         --------
2025-01-22T20:11:26.4531590Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4531650Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4531690Z         1
2025-01-22T20:11:26.4531770Z     
2025-01-22T20:11:26.4531850Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4531910Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4531960Z         slice(1, 3, None)
2025-01-22T20:11:26.4532000Z     
2025-01-22T20:11:26.4532090Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4532150Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4532220Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4532260Z         """
2025-01-22T20:11:26.4532330Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4532380Z         try:
2025-01-22T20:11:26.4532450Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4532500Z         except KeyError as err:
2025-01-22T20:11:26.4532570Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4532650Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4532740Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4532790Z             ):
2025-01-22T20:11:26.4532850Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4532920Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4532980Z E           KeyError: 'cups'
2025-01-22T20:11:26.4532980Z 
2025-01-22T20:11:26.4533210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4533440Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_electron_densities] _
2025-01-22T20:11:26.4533450Z 
2025-01-22T20:11:26.4533580Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4533740Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4533790Z        't046000', 't048000'],
2025-01-22T20:11:26.4533840Z       dtype='object')
2025-01-22T20:11:26.4533890Z key = 'cups'
2025-01-22T20:11:26.4533890Z 
2025-01-22T20:11:26.4533950Z     def get_loc(self, key):
2025-01-22T20:11:26.4533990Z         """
2025-01-22T20:11:26.4534470Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4534510Z     
2025-01-22T20:11:26.4534560Z         Parameters
2025-01-22T20:11:26.4534610Z         ----------
2025-01-22T20:11:26.4534650Z         key : label
2025-01-22T20:11:26.4534700Z     
2025-01-22T20:11:26.4534740Z         Returns
2025-01-22T20:11:26.4534790Z         -------
2025-01-22T20:11:26.4534890Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4534930Z     
2025-01-22T20:11:26.4534980Z         Examples
2025-01-22T20:11:26.4535020Z         --------
2025-01-22T20:11:26.4535090Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4535150Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4535200Z         1
2025-01-22T20:11:26.4535240Z     
2025-01-22T20:11:26.4535310Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4535380Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4535430Z         slice(1, 3, None)
2025-01-22T20:11:26.4535470Z     
2025-01-22T20:11:26.4535550Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4535620Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4535680Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4535730Z         """
2025-01-22T20:11:26.4535800Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4535840Z         try:
2025-01-22T20:11:26.4535910Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4535910Z 
2025-01-22T20:11:26.4536110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4536190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4536300Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4536540Z     ???
2025-01-22T20:11:26.4536650Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4536700Z     ???
2025-01-22T20:11:26.4536920Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4536970Z     ???
2025-01-22T20:11:26.4537050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4537050Z 
2025-01-22T20:11:26.4537090Z >   ???
2025-01-22T20:11:26.4537140Z E   KeyError: 'cups'
2025-01-22T20:11:26.4537140Z 
2025-01-22T20:11:26.4537240Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4537240Z 
2025-01-22T20:11:26.4537380Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4537380Z 
2025-01-22T20:11:26.4537550Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4537810Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4538310Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4538310Z 
2025-01-22T20:11:26.4538380Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4538430Z     def plasma(
2025-01-22T20:11:26.4538470Z         self,
2025-01-22T20:11:26.4538530Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4538570Z         config,
2025-01-22T20:11:26.4538620Z     ):
2025-01-22T20:11:26.4538700Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4538770Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4538780Z 
2025-01-22T20:11:26.4538870Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4538950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4539030Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4539100Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4539350Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4539420Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4539500Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4539550Z     return BasePlasma(
2025-01-22T20:11:26.4539610Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4539670Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4539740Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4539790Z     self.update(**kwargs)
2025-01-22T20:11:26.4539850Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4539940Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4540020Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4540090Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4540250Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4540380Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4540560Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4540620Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4540730Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4540860Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4541000Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4541130Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4541330Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4541470Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4541610Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4541750Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4541960Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4542060Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4542250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4542310Z     return self.apply_standard()
2025-01-22T20:11:26.4542540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4542630Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4542880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4542970Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4543140Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4543200Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4543420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4543470Z     return self._get_value(key)
2025-01-22T20:11:26.4543690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4543740Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4543830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4543830Z 
2025-01-22T20:11:26.4543960Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4544130Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4544180Z        't046000', 't048000'],
2025-01-22T20:11:26.4544230Z       dtype='object')
2025-01-22T20:11:26.4544270Z key = 'cups'
2025-01-22T20:11:26.4544280Z 
2025-01-22T20:11:26.4544330Z     def get_loc(self, key):
2025-01-22T20:11:26.4544370Z         """
2025-01-22T20:11:26.4544550Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4544590Z     
2025-01-22T20:11:26.4544640Z         Parameters
2025-01-22T20:11:26.4544690Z         ----------
2025-01-22T20:11:26.4544730Z         key : label
2025-01-22T20:11:26.4544770Z     
2025-01-22T20:11:26.4544810Z         Returns
2025-01-22T20:11:26.4544860Z         -------
2025-01-22T20:11:26.4544960Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4545000Z     
2025-01-22T20:11:26.4545050Z         Examples
2025-01-22T20:11:26.4545100Z         --------
2025-01-22T20:11:26.4545170Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4545220Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4545270Z         1
2025-01-22T20:11:26.4545310Z     
2025-01-22T20:11:26.4545390Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4545450Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4545500Z         slice(1, 3, None)
2025-01-22T20:11:26.4545540Z     
2025-01-22T20:11:26.4545630Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4545690Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4545760Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4545800Z         """
2025-01-22T20:11:26.4545870Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4545910Z         try:
2025-01-22T20:11:26.4545980Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4546050Z         except KeyError as err:
2025-01-22T20:11:26.4546110Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4546190Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4546280Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4546320Z             ):
2025-01-22T20:11:26.4546440Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4546510Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4546560Z E           KeyError: 'cups'
2025-01-22T20:11:26.4546560Z 
2025-01-22T20:11:26.4546780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4546950Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-phi] _
2025-01-22T20:11:26.4546960Z 
2025-01-22T20:11:26.4547090Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4547260Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4547310Z        't046000', 't048000'],
2025-01-22T20:11:26.4547360Z       dtype='object')
2025-01-22T20:11:26.4547410Z key = 'cups'
2025-01-22T20:11:26.4547410Z 
2025-01-22T20:11:26.4547470Z     def get_loc(self, key):
2025-01-22T20:11:26.4547510Z         """
2025-01-22T20:11:26.4547640Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4547680Z     
2025-01-22T20:11:26.4547730Z         Parameters
2025-01-22T20:11:26.4547770Z         ----------
2025-01-22T20:11:26.4547820Z         key : label
2025-01-22T20:11:26.4547860Z     
2025-01-22T20:11:26.4547900Z         Returns
2025-01-22T20:11:26.4547940Z         -------
2025-01-22T20:11:26.4548040Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4548090Z     
2025-01-22T20:11:26.4548130Z         Examples
2025-01-22T20:11:26.4548180Z         --------
2025-01-22T20:11:26.4548240Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4548310Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4548350Z         1
2025-01-22T20:11:26.4548390Z     
2025-01-22T20:11:26.4548460Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4548530Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4548580Z         slice(1, 3, None)
2025-01-22T20:11:26.4548620Z     
2025-01-22T20:11:26.4548700Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4548820Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4548880Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4548930Z         """
2025-01-22T20:11:26.4548990Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4549130Z         try:
2025-01-22T20:11:26.4549200Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4549210Z 
2025-01-22T20:11:26.4549400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4549490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4549590Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4549630Z     ???
2025-01-22T20:11:26.4549730Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4549770Z     ???
2025-01-22T20:11:26.4549980Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4550030Z     ???
2025-01-22T20:11:26.4550110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4550110Z 
2025-01-22T20:11:26.4550160Z >   ???
2025-01-22T20:11:26.4550200Z E   KeyError: 'cups'
2025-01-22T20:11:26.4550210Z 
2025-01-22T20:11:26.4550300Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4550300Z 
2025-01-22T20:11:26.4550430Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4550440Z 
2025-01-22T20:11:26.4550600Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4550860Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4551340Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4551430Z 
2025-01-22T20:11:26.4551500Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4551550Z     def plasma(
2025-01-22T20:11:26.4551590Z         self,
2025-01-22T20:11:26.4551640Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4551690Z         config,
2025-01-22T20:11:26.4551730Z     ):
2025-01-22T20:11:26.4551810Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4551880Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4551880Z 
2025-01-22T20:11:26.4551970Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4552060Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4552130Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4552190Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4552330Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4552410Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4552490Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4552540Z     return BasePlasma(
2025-01-22T20:11:26.4552600Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4552660Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4552720Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4552780Z     self.update(**kwargs)
2025-01-22T20:11:26.4552840Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4552930Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4553010Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4553080Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4553240Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4553350Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4553520Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4554120Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4554230Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4554370Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4554510Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4554650Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4554850Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4554990Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4555140Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4555210Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4555420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4555530Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4555730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4555790Z     return self.apply_standard()
2025-01-22T20:11:26.4556010Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4556100Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4556350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4556440Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4556610Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4556670Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4557200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4557270Z     return self._get_value(key)
2025-01-22T20:11:26.4557480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4557550Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4557640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4557640Z 
2025-01-22T20:11:26.4557760Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4557930Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4557980Z        't046000', 't048000'],
2025-01-22T20:11:26.4558030Z       dtype='object')
2025-01-22T20:11:26.4558080Z key = 'cups'
2025-01-22T20:11:26.4558090Z 
2025-01-22T20:11:26.4558140Z     def get_loc(self, key):
2025-01-22T20:11:26.4558190Z         """
2025-01-22T20:11:26.4558320Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4558360Z     
2025-01-22T20:11:26.4558410Z         Parameters
2025-01-22T20:11:26.4558460Z         ----------
2025-01-22T20:11:26.4558500Z         key : label
2025-01-22T20:11:26.4558550Z     
2025-01-22T20:11:26.4558590Z         Returns
2025-01-22T20:11:26.4558630Z         -------
2025-01-22T20:11:26.4558740Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4558780Z     
2025-01-22T20:11:26.4558820Z         Examples
2025-01-22T20:11:26.4558860Z         --------
2025-01-22T20:11:26.4558940Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4558990Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4559040Z         1
2025-01-22T20:11:26.4559080Z     
2025-01-22T20:11:26.4559150Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4559210Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4559260Z         slice(1, 3, None)
2025-01-22T20:11:26.4559300Z     
2025-01-22T20:11:26.4559380Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4559530Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4559600Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4559640Z         """
2025-01-22T20:11:26.4559710Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4559760Z         try:
2025-01-22T20:11:26.4559830Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4559890Z         except KeyError as err:
2025-01-22T20:11:26.4559960Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4560030Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4560130Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4560170Z             ):
2025-01-22T20:11:26.4560240Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4560300Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4560350Z E           KeyError: 'cups'
2025-01-22T20:11:26.4560350Z 
2025-01-22T20:11:26.4560570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4560780Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-ion_number_density] _
2025-01-22T20:11:26.4560790Z 
2025-01-22T20:11:26.4560910Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4561080Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4561130Z        't046000', 't048000'],
2025-01-22T20:11:26.4561170Z       dtype='object')
2025-01-22T20:11:26.4561220Z key = 'cups'
2025-01-22T20:11:26.4561220Z 
2025-01-22T20:11:26.4561270Z     def get_loc(self, key):
2025-01-22T20:11:26.4561320Z         """
2025-01-22T20:11:26.4561440Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4565420Z     
2025-01-22T20:11:26.4565530Z         Parameters
2025-01-22T20:11:26.4565600Z         ----------
2025-01-22T20:11:26.4565640Z         key : label
2025-01-22T20:11:26.4565680Z     
2025-01-22T20:11:26.4565730Z         Returns
2025-01-22T20:11:26.4565770Z         -------
2025-01-22T20:11:26.4565870Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4565920Z     
2025-01-22T20:11:26.4565960Z         Examples
2025-01-22T20:11:26.4566010Z         --------
2025-01-22T20:11:26.4566070Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4566130Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4566180Z         1
2025-01-22T20:11:26.4566220Z     
2025-01-22T20:11:26.4566290Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4566350Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4566400Z         slice(1, 3, None)
2025-01-22T20:11:26.4566450Z     
2025-01-22T20:11:26.4566530Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4566590Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4566660Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4566700Z         """
2025-01-22T20:11:26.4566780Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4566820Z         try:
2025-01-22T20:11:26.4566890Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4566890Z 
2025-01-22T20:11:26.4567090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4567180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4567280Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4567330Z     ???
2025-01-22T20:11:26.4567430Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4567480Z     ???
2025-01-22T20:11:26.4567700Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4567740Z     ???
2025-01-22T20:11:26.4568050Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4568050Z 
2025-01-22T20:11:26.4568090Z >   ???
2025-01-22T20:11:26.4568150Z E   KeyError: 'cups'
2025-01-22T20:11:26.4568150Z 
2025-01-22T20:11:26.4568240Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4568250Z 
2025-01-22T20:11:26.4568380Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4568380Z 
2025-01-22T20:11:26.4568550Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4568810Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4569310Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4569320Z 
2025-01-22T20:11:26.4569390Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4569440Z     def plasma(
2025-01-22T20:11:26.4569480Z         self,
2025-01-22T20:11:26.4569550Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4569590Z         config,
2025-01-22T20:11:26.4569640Z     ):
2025-01-22T20:11:26.4569720Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4569790Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4569790Z 
2025-01-22T20:11:26.4569880Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4569960Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4570040Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4570100Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4570230Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4570390Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4570480Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4570530Z     return BasePlasma(
2025-01-22T20:11:26.4570590Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4570650Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4570710Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4570770Z     self.update(**kwargs)
2025-01-22T20:11:26.4570830Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4570920Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4571000Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4571080Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4571230Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4571350Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4571510Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4571590Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4571690Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4571830Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4571960Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4572100Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4572300Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4572450Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4572590Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4572660Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4572860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4572960Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4573240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4573300Z     return self.apply_standard()
2025-01-22T20:11:26.4573530Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4573630Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4573880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4573970Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4574140Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4574210Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4574420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4574480Z     return self._get_value(key)
2025-01-22T20:11:26.4574690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4574750Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4574840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4574840Z 
2025-01-22T20:11:26.4574970Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4575140Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4575190Z        't046000', 't048000'],
2025-01-22T20:11:26.4575240Z       dtype='object')
2025-01-22T20:11:26.4575280Z key = 'cups'
2025-01-22T20:11:26.4575280Z 
2025-01-22T20:11:26.4575340Z     def get_loc(self, key):
2025-01-22T20:11:26.4575380Z         """
2025-01-22T20:11:26.4575510Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4575600Z     
2025-01-22T20:11:26.4575650Z         Parameters
2025-01-22T20:11:26.4575690Z         ----------
2025-01-22T20:11:26.4575740Z         key : label
2025-01-22T20:11:26.4575780Z     
2025-01-22T20:11:26.4575830Z         Returns
2025-01-22T20:11:26.4575870Z         -------
2025-01-22T20:11:26.4575970Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4576010Z     
2025-01-22T20:11:26.4576060Z         Examples
2025-01-22T20:11:26.4576100Z         --------
2025-01-22T20:11:26.4576180Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4576240Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4576280Z         1
2025-01-22T20:11:26.4576330Z     
2025-01-22T20:11:26.4576400Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4576470Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4576520Z         slice(1, 3, None)
2025-01-22T20:11:26.4576570Z     
2025-01-22T20:11:26.4576650Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4576720Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4576790Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4576840Z         """
2025-01-22T20:11:26.4576910Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4576950Z         try:
2025-01-22T20:11:26.4577020Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4577070Z         except KeyError as err:
2025-01-22T20:11:26.4577140Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4577210Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4577310Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4577350Z             ):
2025-01-22T20:11:26.4577410Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4577470Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4577520Z E           KeyError: 'cups'
2025-01-22T20:11:26.4577530Z 
2025-01-22T20:11:26.4577740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4578380Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-electron_densities] _
2025-01-22T20:11:26.4578380Z 
2025-01-22T20:11:26.4578510Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4578680Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4578730Z        't046000', 't048000'],
2025-01-22T20:11:26.4578770Z       dtype='object')
2025-01-22T20:11:26.4578820Z key = 'cups'
2025-01-22T20:11:26.4578820Z 
2025-01-22T20:11:26.4578870Z     def get_loc(self, key):
2025-01-22T20:11:26.4578910Z         """
2025-01-22T20:11:26.4579030Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4579080Z     
2025-01-22T20:11:26.4579120Z         Parameters
2025-01-22T20:11:26.4579170Z         ----------
2025-01-22T20:11:26.4579210Z         key : label
2025-01-22T20:11:26.4579250Z     
2025-01-22T20:11:26.4579300Z         Returns
2025-01-22T20:11:26.4579340Z         -------
2025-01-22T20:11:26.4579440Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4579490Z     
2025-01-22T20:11:26.4579530Z         Examples
2025-01-22T20:11:26.4579570Z         --------
2025-01-22T20:11:26.4579640Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4579700Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4579740Z         1
2025-01-22T20:11:26.4579780Z     
2025-01-22T20:11:26.4579860Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4579920Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4579970Z         slice(1, 3, None)
2025-01-22T20:11:26.4580010Z     
2025-01-22T20:11:26.4580090Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4580420Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4580490Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4580540Z         """
2025-01-22T20:11:26.4580610Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4580660Z         try:
2025-01-22T20:11:26.4580730Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4580730Z 
2025-01-22T20:11:26.4580920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4581010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4581120Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4581160Z     ???
2025-01-22T20:11:26.4581260Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4581300Z     ???
2025-01-22T20:11:26.4581520Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4581560Z     ???
2025-01-22T20:11:26.4581650Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4581650Z 
2025-01-22T20:11:26.4581690Z >   ???
2025-01-22T20:11:26.4581750Z E   KeyError: 'cups'
2025-01-22T20:11:26.4581750Z 
2025-01-22T20:11:26.4581850Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4581850Z 
2025-01-22T20:11:26.4581980Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4581990Z 
2025-01-22T20:11:26.4582160Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4582410Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4582910Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4582910Z 
2025-01-22T20:11:26.4582980Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4583110Z     def plasma(
2025-01-22T20:11:26.4583150Z         self,
2025-01-22T20:11:26.4583200Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4583250Z         config,
2025-01-22T20:11:26.4583290Z     ):
2025-01-22T20:11:26.4583370Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4583440Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4583440Z 
2025-01-22T20:11:26.4583530Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4583620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4583700Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4583750Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4583880Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4583950Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4584030Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4584080Z     return BasePlasma(
2025-01-22T20:11:26.4584150Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4584200Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4584270Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4584330Z     self.update(**kwargs)
2025-01-22T20:11:26.4584390Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4584480Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4584560Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4584630Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4584780Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4584900Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4585060Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4585190Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4585300Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4585440Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4585570Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4585710Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4585920Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4586060Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4586200Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4586270Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4586480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4586570Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4586780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4586850Z     return self.apply_standard()
2025-01-22T20:11:26.4587070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4587160Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4587440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4587530Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4587700Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4587770Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4587990Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4588040Z     return self._get_value(key)
2025-01-22T20:11:26.4588250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4588390Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4588480Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4588490Z 
2025-01-22T20:11:26.4588610Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4588790Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4588840Z        't046000', 't048000'],
2025-01-22T20:11:26.4588890Z       dtype='object')
2025-01-22T20:11:26.4588930Z key = 'cups'
2025-01-22T20:11:26.4588940Z 
2025-01-22T20:11:26.4588990Z     def get_loc(self, key):
2025-01-22T20:11:26.4589040Z         """
2025-01-22T20:11:26.4589280Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4589330Z     
2025-01-22T20:11:26.4589390Z         Parameters
2025-01-22T20:11:26.4589430Z         ----------
2025-01-22T20:11:26.4589480Z         key : label
2025-01-22T20:11:26.4589520Z     
2025-01-22T20:11:26.4589570Z         Returns
2025-01-22T20:11:26.4589610Z         -------
2025-01-22T20:11:26.4589720Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4589760Z     
2025-01-22T20:11:26.4589800Z         Examples
2025-01-22T20:11:26.4589850Z         --------
2025-01-22T20:11:26.4589920Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4589980Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4590020Z         1
2025-01-22T20:11:26.4590060Z     
2025-01-22T20:11:26.4590140Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4590210Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4590260Z         slice(1, 3, None)
2025-01-22T20:11:26.4590300Z     
2025-01-22T20:11:26.4590380Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4590550Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4590610Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4590660Z         """
2025-01-22T20:11:26.4590730Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4590780Z         try:
2025-01-22T20:11:26.4590850Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4590900Z         except KeyError as err:
2025-01-22T20:11:26.4590970Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4591050Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4591150Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4591190Z             ):
2025-01-22T20:11:26.4591250Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4591310Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4591360Z E           KeyError: 'cups'
2025-01-22T20:11:26.4591370Z 
2025-01-22T20:11:26.4591580Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4591800Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-level_number_density] _
2025-01-22T20:11:26.4591810Z 
2025-01-22T20:11:26.4591930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4592100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4592150Z        't046000', 't048000'],
2025-01-22T20:11:26.4592200Z       dtype='object')
2025-01-22T20:11:26.4592250Z key = 'cups'
2025-01-22T20:11:26.4592250Z 
2025-01-22T20:11:26.4592300Z     def get_loc(self, key):
2025-01-22T20:11:26.4592340Z         """
2025-01-22T20:11:26.4592460Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4592500Z     
2025-01-22T20:11:26.4592550Z         Parameters
2025-01-22T20:11:26.4592600Z         ----------
2025-01-22T20:11:26.4592640Z         key : label
2025-01-22T20:11:26.4592690Z     
2025-01-22T20:11:26.4592730Z         Returns
2025-01-22T20:11:26.4592850Z         -------
2025-01-22T20:11:26.4592950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4593000Z     
2025-01-22T20:11:26.4593040Z         Examples
2025-01-22T20:11:26.4593090Z         --------
2025-01-22T20:11:26.4593160Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4593220Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4593260Z         1
2025-01-22T20:11:26.4593310Z     
2025-01-22T20:11:26.4593380Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4593440Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4593490Z         slice(1, 3, None)
2025-01-22T20:11:26.4593530Z     
2025-01-22T20:11:26.4593610Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4593680Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4593740Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4593780Z         """
2025-01-22T20:11:26.4593860Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4593910Z         try:
2025-01-22T20:11:26.4593980Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4593990Z 
2025-01-22T20:11:26.4594180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4594270Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4594380Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4594420Z     ???
2025-01-22T20:11:26.4594520Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4594560Z     ???
2025-01-22T20:11:26.4594780Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4594820Z     ???
2025-01-22T20:11:26.4594910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4594960Z 
2025-01-22T20:11:26.4595000Z >   ???
2025-01-22T20:11:26.4595060Z E   KeyError: 'cups'
2025-01-22T20:11:26.4595060Z 
2025-01-22T20:11:26.4595160Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4595160Z 
2025-01-22T20:11:26.4595290Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4595290Z 
2025-01-22T20:11:26.4595460Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4595710Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4596200Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4596200Z 
2025-01-22T20:11:26.4596260Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4596310Z     def plasma(
2025-01-22T20:11:26.4596350Z         self,
2025-01-22T20:11:26.4596410Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4596450Z         config,
2025-01-22T20:11:26.4596490Z     ):
2025-01-22T20:11:26.4596580Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4596640Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4596650Z 
2025-01-22T20:11:26.4596740Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4596820Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4596900Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4596950Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4597080Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4597150Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4597230Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4597280Z     return BasePlasma(
2025-01-22T20:11:26.4597340Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4597700Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4597760Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4597820Z     self.update(**kwargs)
2025-01-22T20:11:26.4597880Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4597970Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4598050Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4598130Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4598280Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4598400Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4598560Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4598630Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4598730Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4598870Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4599010Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4599140Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4599350Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4599490Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4599640Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4599710Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4599910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4600000Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4600200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4600560Z     return self.apply_standard()
2025-01-22T20:11:26.4600790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4600880Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4601120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4601210Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4601380Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4601440Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4601650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4601710Z     return self._get_value(key)
2025-01-22T20:11:26.4601920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4601980Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4602080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4602080Z 
2025-01-22T20:11:26.4602200Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4602370Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4602420Z        't046000', 't048000'],
2025-01-22T20:11:26.4602470Z       dtype='object')
2025-01-22T20:11:26.4602510Z key = 'cups'
2025-01-22T20:11:26.4602510Z 
2025-01-22T20:11:26.4602570Z     def get_loc(self, key):
2025-01-22T20:11:26.4602610Z         """
2025-01-22T20:11:26.4602730Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4602770Z     
2025-01-22T20:11:26.4602820Z         Parameters
2025-01-22T20:11:26.4602860Z         ----------
2025-01-22T20:11:26.4602910Z         key : label
2025-01-22T20:11:26.4602950Z     
2025-01-22T20:11:26.4602990Z         Returns
2025-01-22T20:11:26.4603120Z         -------
2025-01-22T20:11:26.4603220Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4603260Z     
2025-01-22T20:11:26.4603300Z         Examples
2025-01-22T20:11:26.4603350Z         --------
2025-01-22T20:11:26.4603410Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4603470Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4603510Z         1
2025-01-22T20:11:26.4603560Z     
2025-01-22T20:11:26.4603630Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4603690Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4603740Z         slice(1, 3, None)
2025-01-22T20:11:26.4603780Z     
2025-01-22T20:11:26.4603860Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4603930Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4604000Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4604040Z         """
2025-01-22T20:11:26.4604110Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4604150Z         try:
2025-01-22T20:11:26.4604230Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4604280Z         except KeyError as err:
2025-01-22T20:11:26.4604350Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4604420Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4604520Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4604560Z             ):
2025-01-22T20:11:26.4604630Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4604690Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4604750Z E           KeyError: 'cups'
2025-01-22T20:11:26.4604750Z 
2025-01-22T20:11:26.4604970Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4605260Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] _
2025-01-22T20:11:26.4605270Z 
2025-01-22T20:11:26.4605390Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4605560Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4605610Z        't046000', 't048000'],
2025-01-22T20:11:26.4605660Z       dtype='object')
2025-01-22T20:11:26.4605710Z key = 'cups'
2025-01-22T20:11:26.4605710Z 
2025-01-22T20:11:26.4605770Z     def get_loc(self, key):
2025-01-22T20:11:26.4605810Z         """
2025-01-22T20:11:26.4605930Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4605980Z     
2025-01-22T20:11:26.4606020Z         Parameters
2025-01-22T20:11:26.4606070Z         ----------
2025-01-22T20:11:26.4606110Z         key : label
2025-01-22T20:11:26.4606160Z     
2025-01-22T20:11:26.4606200Z         Returns
2025-01-22T20:11:26.4606240Z         -------
2025-01-22T20:11:26.4606350Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4606390Z     
2025-01-22T20:11:26.4606440Z         Examples
2025-01-22T20:11:26.4606480Z         --------
2025-01-22T20:11:26.4606550Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4606610Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4606660Z         1
2025-01-22T20:11:26.4606700Z     
2025-01-22T20:11:26.4606770Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4606840Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4606890Z         slice(1, 3, None)
2025-01-22T20:11:26.4606930Z     
2025-01-22T20:11:26.4607010Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4607070Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4607130Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4607180Z         """
2025-01-22T20:11:26.4607250Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4607300Z         try:
2025-01-22T20:11:26.4607420Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4607420Z 
2025-01-22T20:11:26.4607630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4607720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4607830Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4607870Z     ???
2025-01-22T20:11:26.4607970Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4608010Z     ???
2025-01-22T20:11:26.4608230Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4608270Z     ???
2025-01-22T20:11:26.4608370Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4608370Z 
2025-01-22T20:11:26.4608410Z >   ???
2025-01-22T20:11:26.4608460Z E   KeyError: 'cups'
2025-01-22T20:11:26.4608460Z 
2025-01-22T20:11:26.4608560Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4608570Z 
2025-01-22T20:11:26.4608690Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4608700Z 
2025-01-22T20:11:26.4608870Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4609120Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4609610Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4609610Z 
2025-01-22T20:11:26.4609670Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4609760Z     def plasma(
2025-01-22T20:11:26.4609810Z         self,
2025-01-22T20:11:26.4609860Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4609910Z         config,
2025-01-22T20:11:26.4609950Z     ):
2025-01-22T20:11:26.4610030Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4610100Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4610100Z 
2025-01-22T20:11:26.4610200Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4610290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4610370Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4610430Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4610560Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4610640Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4610720Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4610770Z     return BasePlasma(
2025-01-22T20:11:26.4610830Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4610890Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4610960Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4611010Z     self.update(**kwargs)
2025-01-22T20:11:26.4611080Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4614960Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4615080Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4615150Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4615320Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4615430Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4615600Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4615660Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4615770Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4615910Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4616040Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4616410Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4616630Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4616760Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4616910Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4616980Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4617180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4617280Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4617470Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4617530Z     return self.apply_standard()
2025-01-22T20:11:26.4617750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4617850Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4618090Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4618180Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4618350Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4618410Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4618620Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4618680Z     return self._get_value(key)
2025-01-22T20:11:26.4618910Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4619030Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4619120Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4619130Z 
2025-01-22T20:11:26.4619260Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4619430Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4619480Z        't046000', 't048000'],
2025-01-22T20:11:26.4619530Z       dtype='object')
2025-01-22T20:11:26.4619580Z key = 'cups'
2025-01-22T20:11:26.4619580Z 
2025-01-22T20:11:26.4619630Z     def get_loc(self, key):
2025-01-22T20:11:26.4619680Z         """
2025-01-22T20:11:26.4619800Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4619840Z     
2025-01-22T20:11:26.4619890Z         Parameters
2025-01-22T20:11:26.4619930Z         ----------
2025-01-22T20:11:26.4619980Z         key : label
2025-01-22T20:11:26.4620020Z     
2025-01-22T20:11:26.4620060Z         Returns
2025-01-22T20:11:26.4620110Z         -------
2025-01-22T20:11:26.4620210Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4620260Z     
2025-01-22T20:11:26.4620300Z         Examples
2025-01-22T20:11:26.4620340Z         --------
2025-01-22T20:11:26.4620410Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4620470Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4620520Z         1
2025-01-22T20:11:26.4620560Z     
2025-01-22T20:11:26.4620630Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4620690Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4620750Z         slice(1, 3, None)
2025-01-22T20:11:26.4620790Z     
2025-01-22T20:11:26.4620870Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4620930Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4621000Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4621040Z         """
2025-01-22T20:11:26.4621120Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4621160Z         try:
2025-01-22T20:11:26.4621570Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4621630Z         except KeyError as err:
2025-01-22T20:11:26.4621700Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4621780Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4621880Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4621920Z             ):
2025-01-22T20:11:26.4621990Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4622060Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4622120Z E           KeyError: 'cups'
2025-01-22T20:11:26.4622120Z 
2025-01-22T20:11:26.4622340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4622550Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] _
2025-01-22T20:11:26.4622560Z 
2025-01-22T20:11:26.4622690Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4622870Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4622920Z        't046000', 't048000'],
2025-01-22T20:11:26.4622980Z       dtype='object')
2025-01-22T20:11:26.4623030Z key = 'cups'
2025-01-22T20:11:26.4623030Z 
2025-01-22T20:11:26.4623090Z     def get_loc(self, key):
2025-01-22T20:11:26.4623130Z         """
2025-01-22T20:11:26.4623250Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4623300Z     
2025-01-22T20:11:26.4623350Z         Parameters
2025-01-22T20:11:26.4623390Z         ----------
2025-01-22T20:11:26.4623440Z         key : label
2025-01-22T20:11:26.4623480Z     
2025-01-22T20:11:26.4623530Z         Returns
2025-01-22T20:11:26.4623570Z         -------
2025-01-22T20:11:26.4623950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4624000Z     
2025-01-22T20:11:26.4624050Z         Examples
2025-01-22T20:11:26.4624090Z         --------
2025-01-22T20:11:26.4624160Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4624220Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4624260Z         1
2025-01-22T20:11:26.4624300Z     
2025-01-22T20:11:26.4624380Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4624440Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4624490Z         slice(1, 3, None)
2025-01-22T20:11:26.4624540Z     
2025-01-22T20:11:26.4624620Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4624680Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4624740Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4624790Z         """
2025-01-22T20:11:26.4624860Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4624910Z         try:
2025-01-22T20:11:26.4624980Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4624980Z 
2025-01-22T20:11:26.4625180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4625260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4625370Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4625410Z     ???
2025-01-22T20:11:26.4625510Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4625560Z     ???
2025-01-22T20:11:26.4625780Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4625830Z     ???
2025-01-22T20:11:26.4625910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4625920Z 
2025-01-22T20:11:26.4625960Z >   ???
2025-01-22T20:11:26.4626010Z E   KeyError: 'cups'
2025-01-22T20:11:26.4626010Z 
2025-01-22T20:11:26.4626110Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4626190Z 
2025-01-22T20:11:26.4626320Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4626330Z 
2025-01-22T20:11:26.4626500Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4626760Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4627250Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4627260Z 
2025-01-22T20:11:26.4627320Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4627370Z     def plasma(
2025-01-22T20:11:26.4627410Z         self,
2025-01-22T20:11:26.4627470Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4627510Z         config,
2025-01-22T20:11:26.4627550Z     ):
2025-01-22T20:11:26.4627640Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4627710Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4627720Z 
2025-01-22T20:11:26.4627800Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4627890Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4627960Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4628020Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4628150Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4628220Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4628300Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4628350Z     return BasePlasma(
2025-01-22T20:11:26.4628400Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4628520Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4628580Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4628640Z     self.update(**kwargs)
2025-01-22T20:11:26.4628700Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4628790Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4628880Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4628950Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4629120Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4629370Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4629540Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4629610Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4629710Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4629830Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4629970Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4630110Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4630310Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4630450Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4630590Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4630670Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4630860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4630960Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4631150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4631220Z     return self.apply_standard()
2025-01-22T20:11:26.4631440Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4631540Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4631860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4631950Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4632120Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4632180Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4632390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4632440Z     return self._get_value(key)
2025-01-22T20:11:26.4632650Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4632720Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4632800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4632810Z 
2025-01-22T20:11:26.4632930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4633100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4633160Z        't046000', 't048000'],
2025-01-22T20:11:26.4633200Z       dtype='object')
2025-01-22T20:11:26.4633250Z key = 'cups'
2025-01-22T20:11:26.4633250Z 
2025-01-22T20:11:26.4633300Z     def get_loc(self, key):
2025-01-22T20:11:26.4633350Z         """
2025-01-22T20:11:26.4633480Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4633520Z     
2025-01-22T20:11:26.4633560Z         Parameters
2025-01-22T20:11:26.4633610Z         ----------
2025-01-22T20:11:26.4633650Z         key : label
2025-01-22T20:11:26.4633690Z     
2025-01-22T20:11:26.4633740Z         Returns
2025-01-22T20:11:26.4633850Z         -------
2025-01-22T20:11:26.4633950Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4633990Z     
2025-01-22T20:11:26.4634040Z         Examples
2025-01-22T20:11:26.4634090Z         --------
2025-01-22T20:11:26.4634160Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4634220Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4634270Z         1
2025-01-22T20:11:26.4634300Z     
2025-01-22T20:11:26.4634380Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4634440Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4634490Z         slice(1, 3, None)
2025-01-22T20:11:26.4634530Z     
2025-01-22T20:11:26.4634610Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4634670Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4634730Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4634780Z         """
2025-01-22T20:11:26.4634850Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4634890Z         try:
2025-01-22T20:11:26.4634970Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4635030Z         except KeyError as err:
2025-01-22T20:11:26.4635100Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4635170Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4635270Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4635310Z             ):
2025-01-22T20:11:26.4635380Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4635440Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4635490Z E           KeyError: 'cups'
2025-01-22T20:11:26.4635490Z 
2025-01-22T20:11:26.4635700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4635900Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] _
2025-01-22T20:11:26.4635910Z 
2025-01-22T20:11:26.4636030Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4636260Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4636310Z        't046000', 't048000'],
2025-01-22T20:11:26.4636360Z       dtype='object')
2025-01-22T20:11:26.4636410Z key = 'cups'
2025-01-22T20:11:26.4636410Z 
2025-01-22T20:11:26.4636460Z     def get_loc(self, key):
2025-01-22T20:11:26.4636500Z         """
2025-01-22T20:11:26.4636630Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4636670Z     
2025-01-22T20:11:26.4636720Z         Parameters
2025-01-22T20:11:26.4636760Z         ----------
2025-01-22T20:11:26.4636810Z         key : label
2025-01-22T20:11:26.4636850Z     
2025-01-22T20:11:26.4636890Z         Returns
2025-01-22T20:11:26.4636930Z         -------
2025-01-22T20:11:26.4637040Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4637080Z     
2025-01-22T20:11:26.4637130Z         Examples
2025-01-22T20:11:26.4637170Z         --------
2025-01-22T20:11:26.4637240Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4637300Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4637350Z         1
2025-01-22T20:11:26.4637390Z     
2025-01-22T20:11:26.4637460Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4637520Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4637570Z         slice(1, 3, None)
2025-01-22T20:11:26.4637610Z     
2025-01-22T20:11:26.4637690Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4637760Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4637820Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4637870Z         """
2025-01-22T20:11:26.4637940Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4637980Z         try:
2025-01-22T20:11:26.4638100Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4638100Z 
2025-01-22T20:11:26.4638300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4638390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4638500Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4638540Z     ???
2025-01-22T20:11:26.4638640Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4638680Z     ???
2025-01-22T20:11:26.4638900Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4638950Z     ???
2025-01-22T20:11:26.4639030Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4639030Z 
2025-01-22T20:11:26.4639080Z >   ???
2025-01-22T20:11:26.4639120Z E   KeyError: 'cups'
2025-01-22T20:11:26.4639130Z 
2025-01-22T20:11:26.4639230Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4639230Z 
2025-01-22T20:11:26.4639370Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4639380Z 
2025-01-22T20:11:26.4639550Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4639800Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4640290Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4640290Z 
2025-01-22T20:11:26.4640360Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4640410Z     def plasma(
2025-01-22T20:11:26.4640460Z         self,
2025-01-22T20:11:26.4640520Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4640560Z         config,
2025-01-22T20:11:26.4640610Z     ):
2025-01-22T20:11:26.4640690Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4641200Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4641200Z 
2025-01-22T20:11:26.4641290Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4641380Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4641450Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4641510Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4641630Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4641710Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4641790Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4641840Z     return BasePlasma(
2025-01-22T20:11:26.4641900Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4641960Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4642030Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4642080Z     self.update(**kwargs)
2025-01-22T20:11:26.4642150Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4642240Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4642320Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4642390Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4642550Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4642670Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4642840Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4642910Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4643010Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4643140Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4643280Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4643710Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4643920Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4644070Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4644210Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4644290Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4644490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4644580Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4644780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4644840Z     return self.apply_standard()
2025-01-22T20:11:26.4645060Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4645150Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4645400Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4645490Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4645660Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4645720Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4645930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4645990Z     return self._get_value(key)
2025-01-22T20:11:26.4646200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4646260Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4646350Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4646350Z 
2025-01-22T20:11:26.4646480Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4646710Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4646770Z        't046000', 't048000'],
2025-01-22T20:11:26.4646810Z       dtype='object')
2025-01-22T20:11:26.4646860Z key = 'cups'
2025-01-22T20:11:26.4646860Z 
2025-01-22T20:11:26.4646910Z     def get_loc(self, key):
2025-01-22T20:11:26.4646950Z         """
2025-01-22T20:11:26.4647070Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4647120Z     
2025-01-22T20:11:26.4647160Z         Parameters
2025-01-22T20:11:26.4647210Z         ----------
2025-01-22T20:11:26.4647250Z         key : label
2025-01-22T20:11:26.4647290Z     
2025-01-22T20:11:26.4647340Z         Returns
2025-01-22T20:11:26.4647380Z         -------
2025-01-22T20:11:26.4647480Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4647520Z     
2025-01-22T20:11:26.4647570Z         Examples
2025-01-22T20:11:26.4647620Z         --------
2025-01-22T20:11:26.4647700Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4647760Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4647810Z         1
2025-01-22T20:11:26.4647850Z     
2025-01-22T20:11:26.4647930Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4647990Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4648040Z         slice(1, 3, None)
2025-01-22T20:11:26.4648080Z     
2025-01-22T20:11:26.4648170Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4648240Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4648300Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4648340Z         """
2025-01-22T20:11:26.4648420Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4648460Z         try:
2025-01-22T20:11:26.4648590Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4648650Z         except KeyError as err:
2025-01-22T20:11:26.4648720Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4648790Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4648880Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4648930Z             ):
2025-01-22T20:11:26.4649000Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4649060Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4649110Z E           KeyError: 'cups'
2025-01-22T20:11:26.4649110Z 
2025-01-22T20:11:26.4649320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4649520Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] _
2025-01-22T20:11:26.4649530Z 
2025-01-22T20:11:26.4649650Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4649830Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4649880Z        't046000', 't048000'],
2025-01-22T20:11:26.4649930Z       dtype='object')
2025-01-22T20:11:26.4649980Z key = 'cups'
2025-01-22T20:11:26.4649980Z 
2025-01-22T20:11:26.4650030Z     def get_loc(self, key):
2025-01-22T20:11:26.4650070Z         """
2025-01-22T20:11:26.4650200Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4650240Z     
2025-01-22T20:11:26.4650290Z         Parameters
2025-01-22T20:11:26.4650330Z         ----------
2025-01-22T20:11:26.4650380Z         key : label
2025-01-22T20:11:26.4650420Z     
2025-01-22T20:11:26.4650460Z         Returns
2025-01-22T20:11:26.4650510Z         -------
2025-01-22T20:11:26.4650610Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4650650Z     
2025-01-22T20:11:26.4650690Z         Examples
2025-01-22T20:11:26.4650730Z         --------
2025-01-22T20:11:26.4650800Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4650920Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4650960Z         1
2025-01-22T20:11:26.4651000Z     
2025-01-22T20:11:26.4651080Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4651140Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4651190Z         slice(1, 3, None)
2025-01-22T20:11:26.4651230Z     
2025-01-22T20:11:26.4651300Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4651370Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4651430Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4651480Z         """
2025-01-22T20:11:26.4651550Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4651590Z         try:
2025-01-22T20:11:26.4651660Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4651660Z 
2025-01-22T20:11:26.4651860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4651950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4652050Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4652100Z     ???
2025-01-22T20:11:26.4652190Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4652240Z     ???
2025-01-22T20:11:26.4652450Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4652500Z     ???
2025-01-22T20:11:26.4652580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4652590Z 
2025-01-22T20:11:26.4652630Z >   ???
2025-01-22T20:11:26.4652670Z E   KeyError: 'cups'
2025-01-22T20:11:26.4652680Z 
2025-01-22T20:11:26.4652770Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4652770Z 
2025-01-22T20:11:26.4652960Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4652960Z 
2025-01-22T20:11:26.4653140Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4653390Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4653880Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4653880Z 
2025-01-22T20:11:26.4653950Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4653990Z     def plasma(
2025-01-22T20:11:26.4654040Z         self,
2025-01-22T20:11:26.4654090Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4654130Z         config,
2025-01-22T20:11:26.4654180Z     ):
2025-01-22T20:11:26.4654260Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4654340Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4654340Z 
2025-01-22T20:11:26.4654440Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4654520Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4654590Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4654650Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4654780Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4654850Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4654930Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4654980Z     return BasePlasma(
2025-01-22T20:11:26.4655050Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4655110Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4655170Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4655220Z     self.update(**kwargs)
2025-01-22T20:11:26.4655280Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4655370Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4655510Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4655580Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4655740Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4655860Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4656020Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4656090Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4656190Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4656320Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4656450Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4656590Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4656790Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4656930Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4657070Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4657150Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4657350Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4657440Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4657640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4657700Z     return self.apply_standard()
2025-01-22T20:11:26.4657920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4658010Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4658300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4658400Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4658570Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4658620Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4658840Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4658890Z     return self._get_value(key)
2025-01-22T20:11:26.4659100Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4659160Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4659240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4659250Z 
2025-01-22T20:11:26.4659370Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4659540Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4659600Z        't046000', 't048000'],
2025-01-22T20:11:26.4659640Z       dtype='object')
2025-01-22T20:11:26.4659690Z key = 'cups'
2025-01-22T20:11:26.4659690Z 
2025-01-22T20:11:26.4659740Z     def get_loc(self, key):
2025-01-22T20:11:26.4659780Z         """
2025-01-22T20:11:26.4659920Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4659960Z     
2025-01-22T20:11:26.4660010Z         Parameters
2025-01-22T20:11:26.4660060Z         ----------
2025-01-22T20:11:26.4660100Z         key : label
2025-01-22T20:11:26.4660150Z     
2025-01-22T20:11:26.4660190Z         Returns
2025-01-22T20:11:26.4660230Z         -------
2025-01-22T20:11:26.4660340Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4660380Z     
2025-01-22T20:11:26.4660430Z         Examples
2025-01-22T20:11:26.4660480Z         --------
2025-01-22T20:11:26.4660560Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4661050Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4661090Z         1
2025-01-22T20:11:26.4661130Z     
2025-01-22T20:11:26.4661210Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4661280Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4661330Z         slice(1, 3, None)
2025-01-22T20:11:26.4661370Z     
2025-01-22T20:11:26.4661450Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4661510Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4661570Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4661620Z         """
2025-01-22T20:11:26.4661690Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4665600Z         try:
2025-01-22T20:11:26.4665740Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4665810Z         except KeyError as err:
2025-01-22T20:11:26.4665890Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4665970Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4666060Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4666110Z             ):
2025-01-22T20:11:26.4666180Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4666240Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4666290Z E           KeyError: 'cups'
2025-01-22T20:11:26.4666300Z 
2025-01-22T20:11:26.4666510Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4666740Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-transition_probabilities] _
2025-01-22T20:11:26.4666740Z 
2025-01-22T20:11:26.4666860Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4667040Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4667530Z        't046000', 't048000'],
2025-01-22T20:11:26.4667590Z       dtype='object')
2025-01-22T20:11:26.4667640Z key = 'cups'
2025-01-22T20:11:26.4667650Z 
2025-01-22T20:11:26.4667700Z     def get_loc(self, key):
2025-01-22T20:11:26.4667740Z         """
2025-01-22T20:11:26.4667860Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4667910Z     
2025-01-22T20:11:26.4667950Z         Parameters
2025-01-22T20:11:26.4668000Z         ----------
2025-01-22T20:11:26.4668050Z         key : label
2025-01-22T20:11:26.4668090Z     
2025-01-22T20:11:26.4668130Z         Returns
2025-01-22T20:11:26.4668170Z         -------
2025-01-22T20:11:26.4668270Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4668310Z     
2025-01-22T20:11:26.4668350Z         Examples
2025-01-22T20:11:26.4668400Z         --------
2025-01-22T20:11:26.4668470Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4668530Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4668570Z         1
2025-01-22T20:11:26.4668620Z     
2025-01-22T20:11:26.4668690Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4668750Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4668800Z         slice(1, 3, None)
2025-01-22T20:11:26.4668840Z     
2025-01-22T20:11:26.4668920Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4668980Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4669050Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4669090Z         """
2025-01-22T20:11:26.4669170Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4669210Z         try:
2025-01-22T20:11:26.4669280Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4669280Z 
2025-01-22T20:11:26.4669610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4669700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4669920Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4669960Z     ???
2025-01-22T20:11:26.4670060Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4670100Z     ???
2025-01-22T20:11:26.4670320Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4670360Z     ???
2025-01-22T20:11:26.4670460Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4670460Z 
2025-01-22T20:11:26.4670500Z >   ???
2025-01-22T20:11:26.4670550Z E   KeyError: 'cups'
2025-01-22T20:11:26.4670550Z 
2025-01-22T20:11:26.4670650Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4670650Z 
2025-01-22T20:11:26.4670780Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4670790Z 
2025-01-22T20:11:26.4670960Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4671220Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4671720Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4671730Z 
2025-01-22T20:11:26.4671790Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4671840Z     def plasma(
2025-01-22T20:11:26.4671880Z         self,
2025-01-22T20:11:26.4671930Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4671980Z         config,
2025-01-22T20:11:26.4672020Z     ):
2025-01-22T20:11:26.4672100Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4672170Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4672230Z 
2025-01-22T20:11:26.4672330Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4672420Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4672500Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4672550Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4672680Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4672750Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4672840Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4672880Z     return BasePlasma(
2025-01-22T20:11:26.4672940Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4673000Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4673060Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4673110Z     self.update(**kwargs)
2025-01-22T20:11:26.4673170Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4673270Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4673350Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4673430Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4673590Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4673710Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4673880Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4673950Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4674050Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4674190Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4674320Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4674470Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4674670Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4674820Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4675020Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4675090Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4675300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4675400Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4675590Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4675650Z     return self.apply_standard()
2025-01-22T20:11:26.4675870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4675970Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4676220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4676320Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4676500Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4676560Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4676770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4676830Z     return self._get_value(key)
2025-01-22T20:11:26.4677040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4677110Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4677190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4677190Z 
2025-01-22T20:11:26.4677320Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4677490Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4677590Z        't046000', 't048000'],
2025-01-22T20:11:26.4677640Z       dtype='object')
2025-01-22T20:11:26.4677690Z key = 'cups'
2025-01-22T20:11:26.4677690Z 
2025-01-22T20:11:26.4677740Z     def get_loc(self, key):
2025-01-22T20:11:26.4677780Z         """
2025-01-22T20:11:26.4677910Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4677950Z     
2025-01-22T20:11:26.4678000Z         Parameters
2025-01-22T20:11:26.4678040Z         ----------
2025-01-22T20:11:26.4678090Z         key : label
2025-01-22T20:11:26.4678130Z     
2025-01-22T20:11:26.4678170Z         Returns
2025-01-22T20:11:26.4678210Z         -------
2025-01-22T20:11:26.4678310Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4678350Z     
2025-01-22T20:11:26.4678400Z         Examples
2025-01-22T20:11:26.4678440Z         --------
2025-01-22T20:11:26.4678520Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4678580Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4678620Z         1
2025-01-22T20:11:26.4678660Z     
2025-01-22T20:11:26.4678740Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4678800Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4678850Z         slice(1, 3, None)
2025-01-22T20:11:26.4678890Z     
2025-01-22T20:11:26.4678970Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4679040Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4679100Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4679140Z         """
2025-01-22T20:11:26.4679210Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4679260Z         try:
2025-01-22T20:11:26.4679320Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4679380Z         except KeyError as err:
2025-01-22T20:11:26.4679460Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4679540Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4679640Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4679740Z             ):
2025-01-22T20:11:26.4679810Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4679870Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4679920Z E           KeyError: 'cups'
2025-01-22T20:11:26.4679930Z 
2025-01-22T20:11:26.4680140Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4680330Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues] _
2025-01-22T20:11:26.4680330Z 
2025-01-22T20:11:26.4680460Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4680630Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4680690Z        't046000', 't048000'],
2025-01-22T20:11:26.4680740Z       dtype='object')
2025-01-22T20:11:26.4680780Z key = 'cups'
2025-01-22T20:11:26.4680790Z 
2025-01-22T20:11:26.4680840Z     def get_loc(self, key):
2025-01-22T20:11:26.4680880Z         """
2025-01-22T20:11:26.4681010Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4681050Z     
2025-01-22T20:11:26.4681090Z         Parameters
2025-01-22T20:11:26.4681140Z         ----------
2025-01-22T20:11:26.4681180Z         key : label
2025-01-22T20:11:26.4681220Z     
2025-01-22T20:11:26.4681270Z         Returns
2025-01-22T20:11:26.4681310Z         -------
2025-01-22T20:11:26.4681410Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4681450Z     
2025-01-22T20:11:26.4681490Z         Examples
2025-01-22T20:11:26.4681540Z         --------
2025-01-22T20:11:26.4681610Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4681660Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4681750Z         1
2025-01-22T20:11:26.4681790Z     
2025-01-22T20:11:26.4681870Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4681930Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4681980Z         slice(1, 3, None)
2025-01-22T20:11:26.4682030Z     
2025-01-22T20:11:26.4682110Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4682170Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4682230Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4682270Z         """
2025-01-22T20:11:26.4682340Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4682390Z         try:
2025-01-22T20:11:26.4682460Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4682470Z 
2025-01-22T20:11:26.4682670Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4682760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4682870Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4682920Z     ???
2025-01-22T20:11:26.4683020Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4683060Z     ???
2025-01-22T20:11:26.4683280Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4683320Z     ???
2025-01-22T20:11:26.4683400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4683410Z 
2025-01-22T20:11:26.4683450Z >   ???
2025-01-22T20:11:26.4683490Z E   KeyError: 'cups'
2025-01-22T20:11:26.4683500Z 
2025-01-22T20:11:26.4683590Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4683590Z 
2025-01-22T20:11:26.4683720Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4683720Z 
2025-01-22T20:11:26.4683890Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4684150Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4685080Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4685090Z 
2025-01-22T20:11:26.4685150Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4685190Z     def plasma(
2025-01-22T20:11:26.4685240Z         self,
2025-01-22T20:11:26.4685290Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4685340Z         config,
2025-01-22T20:11:26.4685380Z     ):
2025-01-22T20:11:26.4685460Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4685530Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4685530Z 
2025-01-22T20:11:26.4685620Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4685710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4685790Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4685840Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4685980Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4686050Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4686130Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4686170Z     return BasePlasma(
2025-01-22T20:11:26.4686230Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4686290Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4686350Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4686410Z     self.update(**kwargs)
2025-01-22T20:11:26.4686470Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4686560Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4686640Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4687020Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4687180Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4687300Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4687490Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4687560Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4687660Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4687790Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4687930Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4688060Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4688270Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4688400Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4688550Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4688620Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4688830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4688930Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4689120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4689180Z     return self.apply_standard()
2025-01-22T20:11:26.4689410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4689500Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4689740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4689830Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4690000Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4690180Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4690390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4690450Z     return self._get_value(key)
2025-01-22T20:11:26.4690660Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4690720Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4690800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4690810Z 
2025-01-22T20:11:26.4690930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4691100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4691150Z        't046000', 't048000'],
2025-01-22T20:11:26.4691200Z       dtype='object')
2025-01-22T20:11:26.4691240Z key = 'cups'
2025-01-22T20:11:26.4691250Z 
2025-01-22T20:11:26.4691300Z     def get_loc(self, key):
2025-01-22T20:11:26.4691350Z         """
2025-01-22T20:11:26.4691490Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4691540Z     
2025-01-22T20:11:26.4691590Z         Parameters
2025-01-22T20:11:26.4691630Z         ----------
2025-01-22T20:11:26.4691680Z         key : label
2025-01-22T20:11:26.4691720Z     
2025-01-22T20:11:26.4691760Z         Returns
2025-01-22T20:11:26.4691810Z         -------
2025-01-22T20:11:26.4691910Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4691950Z     
2025-01-22T20:11:26.4692000Z         Examples
2025-01-22T20:11:26.4692040Z         --------
2025-01-22T20:11:26.4692110Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4692170Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4692260Z         1
2025-01-22T20:11:26.4692310Z     
2025-01-22T20:11:26.4692380Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4692450Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4692500Z         slice(1, 3, None)
2025-01-22T20:11:26.4692540Z     
2025-01-22T20:11:26.4692620Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4692690Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4692760Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4692800Z         """
2025-01-22T20:11:26.4692880Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4692920Z         try:
2025-01-22T20:11:26.4692990Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4693050Z         except KeyError as err:
2025-01-22T20:11:26.4693120Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4693190Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4693290Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4693330Z             ):
2025-01-22T20:11:26.4693400Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4693460Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4693520Z E           KeyError: 'cups'
2025-01-22T20:11:26.4693520Z 
2025-01-22T20:11:26.4693730Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4693940Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues_norm_factor] _
2025-01-22T20:11:26.4693950Z 
2025-01-22T20:11:26.4694070Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4694240Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4694290Z        't046000', 't048000'],
2025-01-22T20:11:26.4694340Z       dtype='object')
2025-01-22T20:11:26.4694390Z key = 'cups'
2025-01-22T20:11:26.4694390Z 
2025-01-22T20:11:26.4694440Z     def get_loc(self, key):
2025-01-22T20:11:26.4694540Z         """
2025-01-22T20:11:26.4694670Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4694710Z     
2025-01-22T20:11:26.4694760Z         Parameters
2025-01-22T20:11:26.4694810Z         ----------
2025-01-22T20:11:26.4694850Z         key : label
2025-01-22T20:11:26.4694900Z     
2025-01-22T20:11:26.4694940Z         Returns
2025-01-22T20:11:26.4694980Z         -------
2025-01-22T20:11:26.4695090Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4695130Z     
2025-01-22T20:11:26.4695180Z         Examples
2025-01-22T20:11:26.4695220Z         --------
2025-01-22T20:11:26.4695290Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4695360Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4695400Z         1
2025-01-22T20:11:26.4695440Z     
2025-01-22T20:11:26.4695520Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4695580Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4695640Z         slice(1, 3, None)
2025-01-22T20:11:26.4695680Z     
2025-01-22T20:11:26.4695760Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4695820Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4695880Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4695920Z         """
2025-01-22T20:11:26.4696000Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4696040Z         try:
2025-01-22T20:11:26.4696120Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4696120Z 
2025-01-22T20:11:26.4696330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4696420Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4696590Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4696630Z     ???
2025-01-22T20:11:26.4696740Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4696780Z     ???
2025-01-22T20:11:26.4697000Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4697040Z     ???
2025-01-22T20:11:26.4697130Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4697130Z 
2025-01-22T20:11:26.4697170Z >   ???
2025-01-22T20:11:26.4697220Z E   KeyError: 'cups'
2025-01-22T20:11:26.4697220Z 
2025-01-22T20:11:26.4697330Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4697330Z 
2025-01-22T20:11:26.4697460Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4697460Z 
2025-01-22T20:11:26.4697630Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4697880Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4698370Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4698380Z 
2025-01-22T20:11:26.4698440Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4698490Z     def plasma(
2025-01-22T20:11:26.4698540Z         self,
2025-01-22T20:11:26.4698600Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4698640Z         config,
2025-01-22T20:11:26.4698690Z     ):
2025-01-22T20:11:26.4698780Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4698840Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4698840Z 
2025-01-22T20:11:26.4698940Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4699020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4699100Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4699210Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4699340Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4699410Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4699490Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4699540Z     return BasePlasma(
2025-01-22T20:11:26.4699600Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4699660Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4699720Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4699770Z     self.update(**kwargs)
2025-01-22T20:11:26.4699830Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4699920Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4700000Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4700080Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4700230Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4700360Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4700520Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4700600Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4700700Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4700830Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4700970Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4701100Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4701310Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4701450Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4701640Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4701710Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4701920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4702010Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4702200Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4702260Z     return self.apply_standard()
2025-01-22T20:11:26.4702480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4702580Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4702820Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4702910Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4703080Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4703150Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4703360Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4703420Z     return self._get_value(key)
2025-01-22T20:11:26.4703630Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4703690Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4703780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4703780Z 
2025-01-22T20:11:26.4703900Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4704070Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4704120Z        't046000', 't048000'],
2025-01-22T20:11:26.4704170Z       dtype='object')
2025-01-22T20:11:26.4704220Z key = 'cups'
2025-01-22T20:11:26.4704220Z 
2025-01-22T20:11:26.4704270Z     def get_loc(self, key):
2025-01-22T20:11:26.4704820Z         """
2025-01-22T20:11:26.4704950Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4705000Z     
2025-01-22T20:11:26.4705050Z         Parameters
2025-01-22T20:11:26.4705090Z         ----------
2025-01-22T20:11:26.4705140Z         key : label
2025-01-22T20:11:26.4705180Z     
2025-01-22T20:11:26.4705220Z         Returns
2025-01-22T20:11:26.4705270Z         -------
2025-01-22T20:11:26.4705370Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4705410Z     
2025-01-22T20:11:26.4705450Z         Examples
2025-01-22T20:11:26.4705500Z         --------
2025-01-22T20:11:26.4705560Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4705620Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4705660Z         1
2025-01-22T20:11:26.4705710Z     
2025-01-22T20:11:26.4705780Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4705850Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4705900Z         slice(1, 3, None)
2025-01-22T20:11:26.4705950Z     
2025-01-22T20:11:26.4706030Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4706100Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4706160Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4706200Z         """
2025-01-22T20:11:26.4706280Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4706320Z         try:
2025-01-22T20:11:26.4706390Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4706450Z         except KeyError as err:
2025-01-22T20:11:26.4706520Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4706590Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4706690Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4707130Z             ):
2025-01-22T20:11:26.4707200Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4707260Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4707320Z E           KeyError: 'cups'
2025-01-22T20:11:26.4707320Z 
2025-01-22T20:11:26.4707540Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4707730Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blue_estimator] _
2025-01-22T20:11:26.4707740Z 
2025-01-22T20:11:26.4707870Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4708030Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4708080Z        't046000', 't048000'],
2025-01-22T20:11:26.4708130Z       dtype='object')
2025-01-22T20:11:26.4708170Z key = 'cups'
2025-01-22T20:11:26.4708180Z 
2025-01-22T20:11:26.4708230Z     def get_loc(self, key):
2025-01-22T20:11:26.4708270Z         """
2025-01-22T20:11:26.4708400Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4708440Z     
2025-01-22T20:11:26.4708490Z         Parameters
2025-01-22T20:11:26.4708540Z         ----------
2025-01-22T20:11:26.4708580Z         key : label
2025-01-22T20:11:26.4708620Z     
2025-01-22T20:11:26.4708660Z         Returns
2025-01-22T20:11:26.4708710Z         -------
2025-01-22T20:11:26.4708810Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4708850Z     
2025-01-22T20:11:26.4708890Z         Examples
2025-01-22T20:11:26.4708930Z         --------
2025-01-22T20:11:26.4709000Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4709060Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4709100Z         1
2025-01-22T20:11:26.4709140Z     
2025-01-22T20:11:26.4709220Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4709280Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4709330Z         slice(1, 3, None)
2025-01-22T20:11:26.4709560Z     
2025-01-22T20:11:26.4709650Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4709710Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4709770Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4709820Z         """
2025-01-22T20:11:26.4709890Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4709930Z         try:
2025-01-22T20:11:26.4710000Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4710000Z 
2025-01-22T20:11:26.4710210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4710300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4710410Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4710450Z     ???
2025-01-22T20:11:26.4710560Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4710600Z     ???
2025-01-22T20:11:26.4710820Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4710870Z     ???
2025-01-22T20:11:26.4710950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4710960Z 
2025-01-22T20:11:26.4711000Z >   ???
2025-01-22T20:11:26.4711040Z E   KeyError: 'cups'
2025-01-22T20:11:26.4711050Z 
2025-01-22T20:11:26.4711140Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4711150Z 
2025-01-22T20:11:26.4711280Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4711280Z 
2025-01-22T20:11:26.4711450Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4711710Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4712270Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4712280Z 
2025-01-22T20:11:26.4716350Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4716450Z     def plasma(
2025-01-22T20:11:26.4716500Z         self,
2025-01-22T20:11:26.4716550Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4716600Z         config,
2025-01-22T20:11:26.4716640Z     ):
2025-01-22T20:11:26.4716730Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4716800Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4716800Z 
2025-01-22T20:11:26.4716890Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4716980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4717060Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4717120Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4717250Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4717320Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4717400Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4717460Z     return BasePlasma(
2025-01-22T20:11:26.4717510Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4717580Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4717640Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4717700Z     self.update(**kwargs)
2025-01-22T20:11:26.4717760Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4717860Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4717940Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4718020Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4718180Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4718300Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4718720Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4718790Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4718890Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4719010Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4719150Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4719280Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4719490Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4719630Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4719760Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4719850Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4720050Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4720140Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4720330Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4720400Z     return self.apply_standard()
2025-01-22T20:11:26.4720610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4720710Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4720950Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4721050Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4721220Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4721380Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4721600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4721660Z     return self._get_value(key)
2025-01-22T20:11:26.4721870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4721930Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4722020Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4722020Z 
2025-01-22T20:11:26.4722150Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4722310Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4722360Z        't046000', 't048000'],
2025-01-22T20:11:26.4722410Z       dtype='object')
2025-01-22T20:11:26.4722450Z key = 'cups'
2025-01-22T20:11:26.4722460Z 
2025-01-22T20:11:26.4722510Z     def get_loc(self, key):
2025-01-22T20:11:26.4722560Z         """
2025-01-22T20:11:26.4722680Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4722740Z     
2025-01-22T20:11:26.4722790Z         Parameters
2025-01-22T20:11:26.4722830Z         ----------
2025-01-22T20:11:26.4722880Z         key : label
2025-01-22T20:11:26.4722920Z     
2025-01-22T20:11:26.4722960Z         Returns
2025-01-22T20:11:26.4723010Z         -------
2025-01-22T20:11:26.4723110Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4723150Z     
2025-01-22T20:11:26.4723200Z         Examples
2025-01-22T20:11:26.4723240Z         --------
2025-01-22T20:11:26.4723310Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4723370Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4723410Z         1
2025-01-22T20:11:26.4723450Z     
2025-01-22T20:11:26.4723520Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4723590Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4723640Z         slice(1, 3, None)
2025-01-22T20:11:26.4723740Z     
2025-01-22T20:11:26.4723830Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4723890Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4723960Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4724000Z         """
2025-01-22T20:11:26.4724070Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4724110Z         try:
2025-01-22T20:11:26.4724190Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4724240Z         except KeyError as err:
2025-01-22T20:11:26.4724310Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4724380Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4724470Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4724520Z             ):
2025-01-22T20:11:26.4724580Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4724650Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4724710Z E           KeyError: 'cups'
2025-01-22T20:11:26.4724710Z 
2025-01-22T20:11:26.4724920Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4725100Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-volume] _
2025-01-22T20:11:26.4725100Z 
2025-01-22T20:11:26.4725230Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4725410Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4725460Z        't046000', 't048000'],
2025-01-22T20:11:26.4725510Z       dtype='object')
2025-01-22T20:11:26.4725560Z key = 'cups'
2025-01-22T20:11:26.4725560Z 
2025-01-22T20:11:26.4725620Z     def get_loc(self, key):
2025-01-22T20:11:26.4725660Z         """
2025-01-22T20:11:26.4725830Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4725870Z     
2025-01-22T20:11:26.4725930Z         Parameters
2025-01-22T20:11:26.4725970Z         ----------
2025-01-22T20:11:26.4726020Z         key : label
2025-01-22T20:11:26.4726050Z     
2025-01-22T20:11:26.4726100Z         Returns
2025-01-22T20:11:26.4726140Z         -------
2025-01-22T20:11:26.4726240Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4726280Z     
2025-01-22T20:11:26.4726330Z         Examples
2025-01-22T20:11:26.4726370Z         --------
2025-01-22T20:11:26.4726440Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4726500Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4726540Z         1
2025-01-22T20:11:26.4726580Z     
2025-01-22T20:11:26.4726660Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4726720Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4726770Z         slice(1, 3, None)
2025-01-22T20:11:26.4726810Z     
2025-01-22T20:11:26.4726890Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4726970Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4727030Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4727070Z         """
2025-01-22T20:11:26.4727140Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4727180Z         try:
2025-01-22T20:11:26.4727250Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4727260Z 
2025-01-22T20:11:26.4727460Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4727540Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4727650Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4727700Z     ???
2025-01-22T20:11:26.4727800Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4727850Z     ???
2025-01-22T20:11:26.4728070Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4728520Z     ???
2025-01-22T20:11:26.4728610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4728620Z 
2025-01-22T20:11:26.4728660Z >   ???
2025-01-22T20:11:26.4728710Z E   KeyError: 'cups'
2025-01-22T20:11:26.4728710Z 
2025-01-22T20:11:26.4728810Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4728810Z 
2025-01-22T20:11:26.4728940Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4728950Z 
2025-01-22T20:11:26.4729110Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4729370Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4729860Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4729870Z 
2025-01-22T20:11:26.4729940Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4729990Z     def plasma(
2025-01-22T20:11:26.4730030Z         self,
2025-01-22T20:11:26.4730080Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4730120Z         config,
2025-01-22T20:11:26.4730170Z     ):
2025-01-22T20:11:26.4730250Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4730320Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4730320Z 
2025-01-22T20:11:26.4730410Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4730490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4730570Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4730620Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4730980Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4731060Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4731140Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4731200Z     return BasePlasma(
2025-01-22T20:11:26.4731260Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4731320Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4731380Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4731440Z     self.update(**kwargs)
2025-01-22T20:11:26.4731510Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4731600Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4731690Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4731760Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4731910Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4732030Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4732210Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4732280Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4732380Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4732520Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4732650Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4732790Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4732990Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4733140Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4733280Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4733360Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4733560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4733660Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4733930Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4734000Z     return self.apply_standard()
2025-01-22T20:11:26.4734220Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4734310Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4734560Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4734650Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4734830Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4734890Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4735110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4735170Z     return self._get_value(key)
2025-01-22T20:11:26.4735380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4735440Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4735530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4735530Z 
2025-01-22T20:11:26.4735650Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4735820Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4735880Z        't046000', 't048000'],
2025-01-22T20:11:26.4735920Z       dtype='object')
2025-01-22T20:11:26.4735970Z key = 'cups'
2025-01-22T20:11:26.4735970Z 
2025-01-22T20:11:26.4736020Z     def get_loc(self, key):
2025-01-22T20:11:26.4736130Z         """
2025-01-22T20:11:26.4736250Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4736300Z     
2025-01-22T20:11:26.4736350Z         Parameters
2025-01-22T20:11:26.4736400Z         ----------
2025-01-22T20:11:26.4736440Z         key : label
2025-01-22T20:11:26.4736490Z     
2025-01-22T20:11:26.4736530Z         Returns
2025-01-22T20:11:26.4736570Z         -------
2025-01-22T20:11:26.4736670Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4736720Z     
2025-01-22T20:11:26.4736760Z         Examples
2025-01-22T20:11:26.4736810Z         --------
2025-01-22T20:11:26.4736880Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4736940Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4736980Z         1
2025-01-22T20:11:26.4737020Z     
2025-01-22T20:11:26.4737100Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4737160Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4737220Z         slice(1, 3, None)
2025-01-22T20:11:26.4737260Z     
2025-01-22T20:11:26.4737340Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4737400Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4737470Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4737510Z         """
2025-01-22T20:11:26.4737580Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4737620Z         try:
2025-01-22T20:11:26.4737690Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4737750Z         except KeyError as err:
2025-01-22T20:11:26.4737820Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4737890Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4737980Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4738030Z             ):
2025-01-22T20:11:26.4738090Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4738150Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4738210Z E           KeyError: 'cups'
2025-01-22T20:11:26.4738210Z 
2025-01-22T20:11:26.4738490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4738670Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-r_inner] _
2025-01-22T20:11:26.4738680Z 
2025-01-22T20:11:26.4738810Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4738980Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4739030Z        't046000', 't048000'],
2025-01-22T20:11:26.4739080Z       dtype='object')
2025-01-22T20:11:26.4739120Z key = 'cups'
2025-01-22T20:11:26.4739120Z 
2025-01-22T20:11:26.4739180Z     def get_loc(self, key):
2025-01-22T20:11:26.4739220Z         """
2025-01-22T20:11:26.4739340Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4739390Z     
2025-01-22T20:11:26.4739440Z         Parameters
2025-01-22T20:11:26.4739480Z         ----------
2025-01-22T20:11:26.4739530Z         key : label
2025-01-22T20:11:26.4739570Z     
2025-01-22T20:11:26.4739610Z         Returns
2025-01-22T20:11:26.4739660Z         -------
2025-01-22T20:11:26.4739760Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4739800Z     
2025-01-22T20:11:26.4739840Z         Examples
2025-01-22T20:11:26.4739890Z         --------
2025-01-22T20:11:26.4739950Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4740020Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4740060Z         1
2025-01-22T20:11:26.4740100Z     
2025-01-22T20:11:26.4740170Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4740240Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4740290Z         slice(1, 3, None)
2025-01-22T20:11:26.4740330Z     
2025-01-22T20:11:26.4740460Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4740530Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4740600Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4740650Z         """
2025-01-22T20:11:26.4740720Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4740760Z         try:
2025-01-22T20:11:26.4740830Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4740830Z 
2025-01-22T20:11:26.4741030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4741110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4741220Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4741260Z     ???
2025-01-22T20:11:26.4741360Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4741400Z     ???
2025-01-22T20:11:26.4741620Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4741670Z     ???
2025-01-22T20:11:26.4741760Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4741760Z 
2025-01-22T20:11:26.4741800Z >   ???
2025-01-22T20:11:26.4741850Z E   KeyError: 'cups'
2025-01-22T20:11:26.4741860Z 
2025-01-22T20:11:26.4741950Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4741950Z 
2025-01-22T20:11:26.4742080Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4742090Z 
2025-01-22T20:11:26.4742250Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4742510Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4743000Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4743010Z 
2025-01-22T20:11:26.4743130Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4743180Z     def plasma(
2025-01-22T20:11:26.4743220Z         self,
2025-01-22T20:11:26.4743280Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4743320Z         config,
2025-01-22T20:11:26.4743360Z     ):
2025-01-22T20:11:26.4743440Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4743510Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4743520Z 
2025-01-22T20:11:26.4743600Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4743690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4743760Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4743820Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4743950Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4744020Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4744110Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4744170Z     return BasePlasma(
2025-01-22T20:11:26.4744230Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4744290Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4744360Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4744410Z     self.update(**kwargs)
2025-01-22T20:11:26.4744470Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4744560Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4744650Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4744730Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4744890Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4745000Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4745170Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4745280Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4745390Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4745520Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4745650Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4745800Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4746000Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4746150Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4746290Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4746370Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4746570Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4746670Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4746860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4746930Z     return self.apply_standard()
2025-01-22T20:11:26.4747160Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4747250Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4747490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4747580Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4747750Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4747810Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4748030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4748090Z     return self._get_value(key)
2025-01-22T20:11:26.4748310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4748710Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4748800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4748800Z 
2025-01-22T20:11:26.4748930Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4749100Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4749160Z        't046000', 't048000'],
2025-01-22T20:11:26.4749200Z       dtype='object')
2025-01-22T20:11:26.4749250Z key = 'cups'
2025-01-22T20:11:26.4749250Z 
2025-01-22T20:11:26.4749310Z     def get_loc(self, key):
2025-01-22T20:11:26.4749360Z         """
2025-01-22T20:11:26.4749600Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4749660Z     
2025-01-22T20:11:26.4749700Z         Parameters
2025-01-22T20:11:26.4749750Z         ----------
2025-01-22T20:11:26.4749800Z         key : label
2025-01-22T20:11:26.4749840Z     
2025-01-22T20:11:26.4749880Z         Returns
2025-01-22T20:11:26.4749920Z         -------
2025-01-22T20:11:26.4750030Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4750070Z     
2025-01-22T20:11:26.4750110Z         Examples
2025-01-22T20:11:26.4750150Z         --------
2025-01-22T20:11:26.4750230Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4750290Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4750330Z         1
2025-01-22T20:11:26.4750370Z     
2025-01-22T20:11:26.4750450Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4750510Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4750550Z         slice(1, 3, None)
2025-01-22T20:11:26.4750600Z     
2025-01-22T20:11:26.4751050Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4751120Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4751180Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4751230Z         """
2025-01-22T20:11:26.4751300Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4751340Z         try:
2025-01-22T20:11:26.4751410Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4751470Z         except KeyError as err:
2025-01-22T20:11:26.4751540Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4751610Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4751710Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4751760Z             ):
2025-01-22T20:11:26.4751840Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4751900Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4751950Z E           KeyError: 'cups'
2025-01-22T20:11:26.4751960Z 
2025-01-22T20:11:26.4752180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4752390Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-helium_population] _
2025-01-22T20:11:26.4752400Z 
2025-01-22T20:11:26.4752520Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4752690Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4752730Z        't046000', 't048000'],
2025-01-22T20:11:26.4752780Z       dtype='object')
2025-01-22T20:11:26.4752830Z key = 'cups'
2025-01-22T20:11:26.4752830Z 
2025-01-22T20:11:26.4752880Z     def get_loc(self, key):
2025-01-22T20:11:26.4752920Z         """
2025-01-22T20:11:26.4753050Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4753090Z     
2025-01-22T20:11:26.4753130Z         Parameters
2025-01-22T20:11:26.4753180Z         ----------
2025-01-22T20:11:26.4753230Z         key : label
2025-01-22T20:11:26.4753270Z     
2025-01-22T20:11:26.4753380Z         Returns
2025-01-22T20:11:26.4753450Z         -------
2025-01-22T20:11:26.4753550Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4753600Z     
2025-01-22T20:11:26.4753640Z         Examples
2025-01-22T20:11:26.4753680Z         --------
2025-01-22T20:11:26.4753750Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4753810Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4753850Z         1
2025-01-22T20:11:26.4753900Z     
2025-01-22T20:11:26.4753970Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4754030Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4754080Z         slice(1, 3, None)
2025-01-22T20:11:26.4754130Z     
2025-01-22T20:11:26.4754210Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4754280Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4754340Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4754390Z         """
2025-01-22T20:11:26.4754460Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4754510Z         try:
2025-01-22T20:11:26.4754580Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4754580Z 
2025-01-22T20:11:26.4754770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4754860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4754960Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4755010Z     ???
2025-01-22T20:11:26.4755100Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4755150Z     ???
2025-01-22T20:11:26.4755360Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4755460Z     ???
2025-01-22T20:11:26.4755550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4755550Z 
2025-01-22T20:11:26.4755590Z >   ???
2025-01-22T20:11:26.4755640Z E   KeyError: 'cups'
2025-01-22T20:11:26.4755650Z 
2025-01-22T20:11:26.4755740Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4755740Z 
2025-01-22T20:11:26.4755880Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4755880Z 
2025-01-22T20:11:26.4756050Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4756300Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4756780Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4756790Z 
2025-01-22T20:11:26.4756850Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4756910Z     def plasma(
2025-01-22T20:11:26.4756950Z         self,
2025-01-22T20:11:26.4757000Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4757040Z         config,
2025-01-22T20:11:26.4757090Z     ):
2025-01-22T20:11:26.4757170Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4757240Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4757240Z 
2025-01-22T20:11:26.4757330Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4757410Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4757490Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4757550Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4757670Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4757740Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4757830Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4757880Z     return BasePlasma(
2025-01-22T20:11:26.4758000Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4758070Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4758130Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4758190Z     self.update(**kwargs)
2025-01-22T20:11:26.4758250Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4758330Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4758420Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4758490Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4758640Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4758760Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4758920Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4758990Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4759090Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4759230Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4759360Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4759500Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4759700Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4759840Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4759980Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4760050Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4760250Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4760340Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4760580Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4760650Z     return self.apply_standard()
2025-01-22T20:11:26.4760870Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4760960Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4761210Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4761290Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4761470Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4761520Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4761740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4761790Z     return self._get_value(key)
2025-01-22T20:11:26.4762000Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4762070Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4762150Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4762150Z 
2025-01-22T20:11:26.4762280Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4762440Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4762500Z        't046000', 't048000'],
2025-01-22T20:11:26.4762540Z       dtype='object')
2025-01-22T20:11:26.4762590Z key = 'cups'
2025-01-22T20:11:26.4762590Z 
2025-01-22T20:11:26.4762640Z     def get_loc(self, key):
2025-01-22T20:11:26.4762690Z         """
2025-01-22T20:11:26.4762810Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4762850Z     
2025-01-22T20:11:26.4762900Z         Parameters
2025-01-22T20:11:26.4762940Z         ----------
2025-01-22T20:11:26.4767000Z         key : label
2025-01-22T20:11:26.4767100Z     
2025-01-22T20:11:26.4767370Z         Returns
2025-01-22T20:11:26.4767420Z         -------
2025-01-22T20:11:26.4767520Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4767560Z     
2025-01-22T20:11:26.4767610Z         Examples
2025-01-22T20:11:26.4767650Z         --------
2025-01-22T20:11:26.4767720Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4767780Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4767830Z         1
2025-01-22T20:11:26.4767870Z     
2025-01-22T20:11:26.4767940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4768010Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4768060Z         slice(1, 3, None)
2025-01-22T20:11:26.4768100Z     
2025-01-22T20:11:26.4768180Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4768250Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4768310Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4768360Z         """
2025-01-22T20:11:26.4768430Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4768470Z         try:
2025-01-22T20:11:26.4768540Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4768600Z         except KeyError as err:
2025-01-22T20:11:26.4768670Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4768740Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4768840Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4768880Z             ):
2025-01-22T20:11:26.4768940Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4769000Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4769050Z E           KeyError: 'cups'
2025-01-22T20:11:26.4769060Z 
2025-01-22T20:11:26.4769270Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4769580Z _ ERROR at setup of TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-helium_population_updated] _
2025-01-22T20:11:26.4769580Z 
2025-01-22T20:11:26.4769710Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4769880Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4769930Z        't046000', 't048000'],
2025-01-22T20:11:26.4769980Z       dtype='object')
2025-01-22T20:11:26.4770030Z key = 'cups'
2025-01-22T20:11:26.4770030Z 
2025-01-22T20:11:26.4770080Z     def get_loc(self, key):
2025-01-22T20:11:26.4770120Z         """
2025-01-22T20:11:26.4770250Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4770290Z     
2025-01-22T20:11:26.4770330Z         Parameters
2025-01-22T20:11:26.4770380Z         ----------
2025-01-22T20:11:26.4770420Z         key : label
2025-01-22T20:11:26.4770470Z     
2025-01-22T20:11:26.4770510Z         Returns
2025-01-22T20:11:26.4770560Z         -------
2025-01-22T20:11:26.4770660Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4770710Z     
2025-01-22T20:11:26.4770750Z         Examples
2025-01-22T20:11:26.4770790Z         --------
2025-01-22T20:11:26.4770860Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4770920Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4770960Z         1
2025-01-22T20:11:26.4771000Z     
2025-01-22T20:11:26.4771080Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4771130Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4771190Z         slice(1, 3, None)
2025-01-22T20:11:26.4771230Z     
2025-01-22T20:11:26.4771310Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4771370Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4771430Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4771480Z         """
2025-01-22T20:11:26.4771560Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4771970Z         try:
2025-01-22T20:11:26.4772050Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4772050Z 
2025-01-22T20:11:26.4772240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4772330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4772430Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4772480Z     ???
2025-01-22T20:11:26.4772580Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4772620Z     ???
2025-01-22T20:11:26.4772830Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4772870Z     ???
2025-01-22T20:11:26.4772950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4772960Z 
2025-01-22T20:11:26.4773000Z >   ???
2025-01-22T20:11:26.4773050Z E   KeyError: 'cups'
2025-01-22T20:11:26.4773060Z 
2025-01-22T20:11:26.4773150Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4773150Z 
2025-01-22T20:11:26.4773280Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4773280Z 
2025-01-22T20:11:26.4773450Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4773700Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4774190Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4774200Z 
2025-01-22T20:11:26.4774420Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4774470Z     def plasma(
2025-01-22T20:11:26.4774510Z         self,
2025-01-22T20:11:26.4774570Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4774610Z         config,
2025-01-22T20:11:26.4774660Z     ):
2025-01-22T20:11:26.4774740Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4774810Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4774810Z 
2025-01-22T20:11:26.4774900Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4774980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4775060Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4775110Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4775240Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4775310Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4775390Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4775440Z     return BasePlasma(
2025-01-22T20:11:26.4775510Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4775570Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4775640Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4775690Z     self.update(**kwargs)
2025-01-22T20:11:26.4775750Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4775850Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4775930Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4776010Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4776170Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4776290Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4776450Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4776520Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4776610Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4776750Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4776930Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4777070Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4777270Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4777410Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4777550Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4777620Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4777830Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4777920Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4778110Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4778180Z     return self.apply_standard()
2025-01-22T20:11:26.4778410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4778500Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4778750Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4778840Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4779010Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4779070Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4779280Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4779340Z     return self._get_value(key)
2025-01-22T20:11:26.4779550Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4779660Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4779750Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4779750Z 
2025-01-22T20:11:26.4779870Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4780040Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4780090Z        't046000', 't048000'],
2025-01-22T20:11:26.4780150Z       dtype='object')
2025-01-22T20:11:26.4780190Z key = 'cups'
2025-01-22T20:11:26.4780200Z 
2025-01-22T20:11:26.4780250Z     def get_loc(self, key):
2025-01-22T20:11:26.4780290Z         """
2025-01-22T20:11:26.4780420Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4780460Z     
2025-01-22T20:11:26.4780510Z         Parameters
2025-01-22T20:11:26.4780560Z         ----------
2025-01-22T20:11:26.4780610Z         key : label
2025-01-22T20:11:26.4780650Z     
2025-01-22T20:11:26.4780700Z         Returns
2025-01-22T20:11:26.4780740Z         -------
2025-01-22T20:11:26.4780840Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4780880Z     
2025-01-22T20:11:26.4780930Z         Examples
2025-01-22T20:11:26.4780970Z         --------
2025-01-22T20:11:26.4781040Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4781100Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4781140Z         1
2025-01-22T20:11:26.4781180Z     
2025-01-22T20:11:26.4781260Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4781320Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4781370Z         slice(1, 3, None)
2025-01-22T20:11:26.4781410Z     
2025-01-22T20:11:26.4781490Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4781560Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4781620Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4781670Z         """
2025-01-22T20:11:26.4781740Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4781840Z         try:
2025-01-22T20:11:26.4781910Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4781970Z         except KeyError as err:
2025-01-22T20:11:26.4782040Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4782110Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4782200Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4782240Z             ):
2025-01-22T20:11:26.4782310Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4782370Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4782430Z E           KeyError: 'cups'
2025-01-22T20:11:26.4782430Z 
2025-01-22T20:11:26.4782640Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4782790Z _____ ERROR at setup of TestPlasma.test_levels[nlte:{'species': ['He I']}] _____
2025-01-22T20:11:26.4782790Z 
2025-01-22T20:11:26.4782920Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4783090Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4783140Z        't046000', 't048000'],
2025-01-22T20:11:26.4783180Z       dtype='object')
2025-01-22T20:11:26.4783230Z key = 'cups'
2025-01-22T20:11:26.4783240Z 
2025-01-22T20:11:26.4783290Z     def get_loc(self, key):
2025-01-22T20:11:26.4783330Z         """
2025-01-22T20:11:26.4783450Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4783500Z     
2025-01-22T20:11:26.4783540Z         Parameters
2025-01-22T20:11:26.4783590Z         ----------
2025-01-22T20:11:26.4783640Z         key : label
2025-01-22T20:11:26.4783680Z     
2025-01-22T20:11:26.4783730Z         Returns
2025-01-22T20:11:26.4783820Z         -------
2025-01-22T20:11:26.4783920Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4783970Z     
2025-01-22T20:11:26.4784020Z         Examples
2025-01-22T20:11:26.4784060Z         --------
2025-01-22T20:11:26.4784130Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4784190Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4784230Z         1
2025-01-22T20:11:26.4784270Z     
2025-01-22T20:11:26.4784350Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4784410Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4784460Z         slice(1, 3, None)
2025-01-22T20:11:26.4784500Z     
2025-01-22T20:11:26.4784580Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4784650Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4784710Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4784750Z         """
2025-01-22T20:11:26.4784830Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4784870Z         try:
2025-01-22T20:11:26.4784940Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4784950Z 
2025-01-22T20:11:26.4785150Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4785240Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4785340Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4785380Z     ???
2025-01-22T20:11:26.4785480Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4785520Z     ???
2025-01-22T20:11:26.4785740Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4785780Z     ???
2025-01-22T20:11:26.4785860Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4785870Z 
2025-01-22T20:11:26.4785910Z >   ???
2025-01-22T20:11:26.4785960Z E   KeyError: 'cups'
2025-01-22T20:11:26.4785960Z 
2025-01-22T20:11:26.4786060Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4786100Z 
2025-01-22T20:11:26.4786230Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4786230Z 
2025-01-22T20:11:26.4786410Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4786660Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4787160Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4787170Z 
2025-01-22T20:11:26.4787230Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4787270Z     def plasma(
2025-01-22T20:11:26.4787320Z         self,
2025-01-22T20:11:26.4787380Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4787460Z         config,
2025-01-22T20:11:26.4787500Z     ):
2025-01-22T20:11:26.4787590Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4787650Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4787650Z 
2025-01-22T20:11:26.4787740Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4787830Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4787900Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4787960Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4788090Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4788150Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4788230Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4788280Z     return BasePlasma(
2025-01-22T20:11:26.4788340Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4788450Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4788510Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4788570Z     self.update(**kwargs)
2025-01-22T20:11:26.4788630Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4788720Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4788800Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4788880Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4789030Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4789150Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4789310Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4789380Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4789480Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4789710Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4789850Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4789980Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4790190Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4790320Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4790470Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4790540Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4790740Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4790840Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4791030Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4791090Z     return self.apply_standard()
2025-01-22T20:11:26.4791310Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4791830Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4792070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4792170Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4792340Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4792400Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4792610Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4792680Z     return self._get_value(key)
2025-01-22T20:11:26.4792880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4792940Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4793040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4793040Z 
2025-01-22T20:11:26.4793160Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4793340Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4793380Z        't046000', 't048000'],
2025-01-22T20:11:26.4793430Z       dtype='object')
2025-01-22T20:11:26.4793480Z key = 'cups'
2025-01-22T20:11:26.4793480Z 
2025-01-22T20:11:26.4793530Z     def get_loc(self, key):
2025-01-22T20:11:26.4793570Z         """
2025-01-22T20:11:26.4793700Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4793740Z     
2025-01-22T20:11:26.4793790Z         Parameters
2025-01-22T20:11:26.4793840Z         ----------
2025-01-22T20:11:26.4793880Z         key : label
2025-01-22T20:11:26.4793920Z     
2025-01-22T20:11:26.4793970Z         Returns
2025-01-22T20:11:26.4794330Z         -------
2025-01-22T20:11:26.4794430Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4794480Z     
2025-01-22T20:11:26.4794520Z         Examples
2025-01-22T20:11:26.4794590Z         --------
2025-01-22T20:11:26.4794670Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4794730Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4794770Z         1
2025-01-22T20:11:26.4794810Z     
2025-01-22T20:11:26.4794890Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4794950Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4795000Z         slice(1, 3, None)
2025-01-22T20:11:26.4795050Z     
2025-01-22T20:11:26.4795130Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4795200Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4795260Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4795300Z         """
2025-01-22T20:11:26.4795380Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4795420Z         try:
2025-01-22T20:11:26.4795490Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4795550Z         except KeyError as err:
2025-01-22T20:11:26.4795630Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4795700Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4795790Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4795840Z             ):
2025-01-22T20:11:26.4795910Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4795970Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4796020Z E           KeyError: 'cups'
2025-01-22T20:11:26.4796030Z 
2025-01-22T20:11:26.4796240Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4796450Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I']}-time_explosion] _
2025-01-22T20:11:26.4796460Z 
2025-01-22T20:11:26.4796580Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4796840Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4796890Z        't046000', 't048000'],
2025-01-22T20:11:26.4796940Z       dtype='object')
2025-01-22T20:11:26.4796980Z key = 'cups'
2025-01-22T20:11:26.4796980Z 
2025-01-22T20:11:26.4797040Z     def get_loc(self, key):
2025-01-22T20:11:26.4797080Z         """
2025-01-22T20:11:26.4797200Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4797250Z     
2025-01-22T20:11:26.4797290Z         Parameters
2025-01-22T20:11:26.4797340Z         ----------
2025-01-22T20:11:26.4797390Z         key : label
2025-01-22T20:11:26.4797430Z     
2025-01-22T20:11:26.4797470Z         Returns
2025-01-22T20:11:26.4797510Z         -------
2025-01-22T20:11:26.4797610Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4797660Z     
2025-01-22T20:11:26.4797710Z         Examples
2025-01-22T20:11:26.4797750Z         --------
2025-01-22T20:11:26.4797820Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4797880Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4797920Z         1
2025-01-22T20:11:26.4797960Z     
2025-01-22T20:11:26.4798040Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4798100Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4798150Z         slice(1, 3, None)
2025-01-22T20:11:26.4798200Z     
2025-01-22T20:11:26.4798280Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4798340Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4798410Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4798450Z         """
2025-01-22T20:11:26.4798530Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4798570Z         try:
2025-01-22T20:11:26.4798700Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4798700Z 
2025-01-22T20:11:26.4798900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4798990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4799100Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4799140Z     ???
2025-01-22T20:11:26.4799240Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4799280Z     ???
2025-01-22T20:11:26.4799500Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4799540Z     ???
2025-01-22T20:11:26.4799630Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4799630Z 
2025-01-22T20:11:26.4799670Z >   ???
2025-01-22T20:11:26.4799730Z E   KeyError: 'cups'
2025-01-22T20:11:26.4799730Z 
2025-01-22T20:11:26.4799830Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4799830Z 
2025-01-22T20:11:26.4799960Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4799960Z 
2025-01-22T20:11:26.4800130Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4800390Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4800870Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4800880Z 
2025-01-22T20:11:26.4800940Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4800990Z     def plasma(
2025-01-22T20:11:26.4801030Z         self,
2025-01-22T20:11:26.4801080Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4801130Z         config,
2025-01-22T20:11:26.4801170Z     ):
2025-01-22T20:11:26.4801250Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4801370Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4801370Z 
2025-01-22T20:11:26.4801470Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4801550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4801640Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4801690Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4801830Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4801900Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4801980Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4802030Z     return BasePlasma(
2025-01-22T20:11:26.4802090Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4802150Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4802210Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4802270Z     self.update(**kwargs)
2025-01-22T20:11:26.4802330Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4802430Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4802510Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4802580Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4802730Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4802850Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4803020Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4803090Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4803180Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4803310Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4803450Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4803650Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4803860Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4804000Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4804140Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4804210Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4804420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4804510Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4804700Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4804760Z     return self.apply_standard()
2025-01-22T20:11:26.4804980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4805070Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4805320Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4805410Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4805580Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4805640Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4805850Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4805910Z     return self._get_value(key)
2025-01-22T20:11:26.4806120Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4806170Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4806260Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4806270Z 
2025-01-22T20:11:26.4806390Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4806610Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4806660Z        't046000', 't048000'],
2025-01-22T20:11:26.4806720Z       dtype='object')
2025-01-22T20:11:26.4806760Z key = 'cups'
2025-01-22T20:11:26.4806770Z 
2025-01-22T20:11:26.4806820Z     def get_loc(self, key):
2025-01-22T20:11:26.4806870Z         """
2025-01-22T20:11:26.4807000Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4807040Z     
2025-01-22T20:11:26.4807080Z         Parameters
2025-01-22T20:11:26.4807130Z         ----------
2025-01-22T20:11:26.4807180Z         key : label
2025-01-22T20:11:26.4807220Z     
2025-01-22T20:11:26.4807260Z         Returns
2025-01-22T20:11:26.4807300Z         -------
2025-01-22T20:11:26.4807400Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4807450Z     
2025-01-22T20:11:26.4807490Z         Examples
2025-01-22T20:11:26.4807540Z         --------
2025-01-22T20:11:26.4807610Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4807670Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4807710Z         1
2025-01-22T20:11:26.4807760Z     
2025-01-22T20:11:26.4807830Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4807890Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4807940Z         slice(1, 3, None)
2025-01-22T20:11:26.4807980Z     
2025-01-22T20:11:26.4808060Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4808130Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4808190Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4808230Z         """
2025-01-22T20:11:26.4808300Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4808380Z         try:
2025-01-22T20:11:26.4808460Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4808520Z         except KeyError as err:
2025-01-22T20:11:26.4808590Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4808660Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4808750Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4808790Z             ):
2025-01-22T20:11:26.4808860Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4808910Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4808970Z E           KeyError: 'cups'
2025-01-22T20:11:26.4808970Z 
2025-01-22T20:11:26.4809180Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4809390Z _ ERROR at setup of TestPlasma.test_scalars_properties[nlte:{'species': ['He I']}-link_t_rad_t_electron] _
2025-01-22T20:11:26.4809400Z 
2025-01-22T20:11:26.4809520Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4809690Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4809750Z        't046000', 't048000'],
2025-01-22T20:11:26.4809800Z       dtype='object')
2025-01-22T20:11:26.4809840Z key = 'cups'
2025-01-22T20:11:26.4809840Z 
2025-01-22T20:11:26.4809890Z     def get_loc(self, key):
2025-01-22T20:11:26.4809940Z         """
2025-01-22T20:11:26.4810060Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4810100Z     
2025-01-22T20:11:26.4810150Z         Parameters
2025-01-22T20:11:26.4810190Z         ----------
2025-01-22T20:11:26.4810240Z         key : label
2025-01-22T20:11:26.4810280Z     
2025-01-22T20:11:26.4810320Z         Returns
2025-01-22T20:11:26.4810360Z         -------
2025-01-22T20:11:26.4810460Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4810510Z     
2025-01-22T20:11:26.4810560Z         Examples
2025-01-22T20:11:26.4810600Z         --------
2025-01-22T20:11:26.4810670Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4811030Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4811080Z         1
2025-01-22T20:11:26.4811120Z     
2025-01-22T20:11:26.4811190Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4811250Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4811300Z         slice(1, 3, None)
2025-01-22T20:11:26.4811350Z     
2025-01-22T20:11:26.4811420Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4811490Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4815490Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4815570Z         """
2025-01-22T20:11:26.4815650Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4815690Z         try:
2025-01-22T20:11:26.4815760Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4815780Z 
2025-01-22T20:11:26.4815980Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4816070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4816180Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4816220Z     ???
2025-01-22T20:11:26.4816320Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4816370Z     ???
2025-01-22T20:11:26.4816590Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4816630Z     ???
2025-01-22T20:11:26.4816710Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4816720Z 
2025-01-22T20:11:26.4816760Z >   ???
2025-01-22T20:11:26.4816810Z E   KeyError: 'cups'
2025-01-22T20:11:26.4816810Z 
2025-01-22T20:11:26.4816910Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4817220Z 
2025-01-22T20:11:26.4817370Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4817370Z 
2025-01-22T20:11:26.4817550Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4817810Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4818300Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4818310Z 
2025-01-22T20:11:26.4818370Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4818420Z     def plasma(
2025-01-22T20:11:26.4818470Z         self,
2025-01-22T20:11:26.4818520Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4818570Z         config,
2025-01-22T20:11:26.4818610Z     ):
2025-01-22T20:11:26.4818700Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4818770Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4818770Z 
2025-01-22T20:11:26.4818870Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4818950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4819030Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4819100Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4819230Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4819310Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4819390Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4819450Z     return BasePlasma(
2025-01-22T20:11:26.4819510Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4819570Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4819640Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4819700Z     self.update(**kwargs)
2025-01-22T20:11:26.4819770Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4819860Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4820020Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4820100Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4820270Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4820380Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4820550Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4820620Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4820730Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4820850Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4820990Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4821120Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4821330Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4821480Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4821620Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4821700Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4821900Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4822000Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4822190Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4822260Z     return self.apply_standard()
2025-01-22T20:11:26.4822480Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4822630Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4822880Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4822970Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4823150Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4823210Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4823420Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4823480Z     return self._get_value(key)
2025-01-22T20:11:26.4823690Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4823750Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4823840Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4823840Z 
2025-01-22T20:11:26.4823960Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4824140Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4824190Z        't046000', 't048000'],
2025-01-22T20:11:26.4824240Z       dtype='object')
2025-01-22T20:11:26.4824280Z key = 'cups'
2025-01-22T20:11:26.4824290Z 
2025-01-22T20:11:26.4824340Z     def get_loc(self, key):
2025-01-22T20:11:26.4824380Z         """
2025-01-22T20:11:26.4824500Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4824550Z     
2025-01-22T20:11:26.4824590Z         Parameters
2025-01-22T20:11:26.4824640Z         ----------
2025-01-22T20:11:26.4824680Z         key : label
2025-01-22T20:11:26.4824720Z     
2025-01-22T20:11:26.4824760Z         Returns
2025-01-22T20:11:26.4824810Z         -------
2025-01-22T20:11:26.4824910Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4824960Z     
2025-01-22T20:11:26.4825010Z         Examples
2025-01-22T20:11:26.4825050Z         --------
2025-01-22T20:11:26.4825120Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4825230Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4825270Z         1
2025-01-22T20:11:26.4825310Z     
2025-01-22T20:11:26.4825390Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4825460Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4825510Z         slice(1, 3, None)
2025-01-22T20:11:26.4825550Z     
2025-01-22T20:11:26.4825640Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4825710Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4825770Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4825820Z         """
2025-01-22T20:11:26.4825890Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4825930Z         try:
2025-01-22T20:11:26.4826010Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4826060Z         except KeyError as err:
2025-01-22T20:11:26.4826140Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4826220Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4826320Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4826370Z             ):
2025-01-22T20:11:26.4826440Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4826500Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4826550Z E           KeyError: 'cups'
2025-01-22T20:11:26.4826550Z 
2025-01-22T20:11:26.4826770Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4826930Z _ ERROR at setup of TestPlasma.test_helium_treatment[nlte:{'species': ['He I']}] _
2025-01-22T20:11:26.4826930Z 
2025-01-22T20:11:26.4827060Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4827220Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4827320Z        't046000', 't048000'],
2025-01-22T20:11:26.4827380Z       dtype='object')
2025-01-22T20:11:26.4827420Z key = 'cups'
2025-01-22T20:11:26.4827430Z 
2025-01-22T20:11:26.4827480Z     def get_loc(self, key):
2025-01-22T20:11:26.4827520Z         """
2025-01-22T20:11:26.4827650Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4827680Z     
2025-01-22T20:11:26.4827730Z         Parameters
2025-01-22T20:11:26.4827770Z         ----------
2025-01-22T20:11:26.4827820Z         key : label
2025-01-22T20:11:26.4827860Z     
2025-01-22T20:11:26.4827900Z         Returns
2025-01-22T20:11:26.4827950Z         -------
2025-01-22T20:11:26.4828050Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4828090Z     
2025-01-22T20:11:26.4828130Z         Examples
2025-01-22T20:11:26.4828180Z         --------
2025-01-22T20:11:26.4828250Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4828320Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4828360Z         1
2025-01-22T20:11:26.4828410Z     
2025-01-22T20:11:26.4828480Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4828550Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4828600Z         slice(1, 3, None)
2025-01-22T20:11:26.4828640Z     
2025-01-22T20:11:26.4828720Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4828790Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4828850Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4828900Z         """
2025-01-22T20:11:26.4828970Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4829020Z         try:
2025-01-22T20:11:26.4829090Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4829100Z 
2025-01-22T20:11:26.4829300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4829390Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4829550Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4829700Z     ???
2025-01-22T20:11:26.4829800Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4829840Z     ???
2025-01-22T20:11:26.4830060Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4830100Z     ???
2025-01-22T20:11:26.4830180Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4830190Z 
2025-01-22T20:11:26.4830230Z >   ???
2025-01-22T20:11:26.4830280Z E   KeyError: 'cups'
2025-01-22T20:11:26.4830280Z 
2025-01-22T20:11:26.4830380Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4830380Z 
2025-01-22T20:11:26.4830520Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4830530Z 
2025-01-22T20:11:26.4830700Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4830960Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4831460Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4831460Z 
2025-01-22T20:11:26.4831530Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4831580Z     def plasma(
2025-01-22T20:11:26.4831620Z         self,
2025-01-22T20:11:26.4831680Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4831720Z         config,
2025-01-22T20:11:26.4831770Z     ):
2025-01-22T20:11:26.4831850Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4831980Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4831990Z 
2025-01-22T20:11:26.4832070Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4832170Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4832250Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4832310Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4832440Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4832510Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4832590Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4832640Z     return BasePlasma(
2025-01-22T20:11:26.4832700Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4832760Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4832830Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4832880Z     self.update(**kwargs)
2025-01-22T20:11:26.4832940Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4833040Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4833130Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4833200Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4833360Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4833480Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4833640Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4833710Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4833810Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4833940Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4834070Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4834210Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4834410Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4834550Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4835020Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4835100Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4835300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4835400Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4835600Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4835660Z     return self.apply_standard()
2025-01-22T20:11:26.4835890Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4835980Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4836230Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4836320Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4836500Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4836560Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4836780Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4836830Z     return self._get_value(key)
2025-01-22T20:11:26.4837040Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4837100Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4837190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4837190Z 
2025-01-22T20:11:26.4837320Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4837700Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4837750Z        't046000', 't048000'],
2025-01-22T20:11:26.4837800Z       dtype='object')
2025-01-22T20:11:26.4837850Z key = 'cups'
2025-01-22T20:11:26.4837850Z 
2025-01-22T20:11:26.4837900Z     def get_loc(self, key):
2025-01-22T20:11:26.4837950Z         """
2025-01-22T20:11:26.4838070Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4838110Z     
2025-01-22T20:11:26.4838160Z         Parameters
2025-01-22T20:11:26.4838210Z         ----------
2025-01-22T20:11:26.4838250Z         key : label
2025-01-22T20:11:26.4838290Z     
2025-01-22T20:11:26.4838340Z         Returns
2025-01-22T20:11:26.4838380Z         -------
2025-01-22T20:11:26.4838480Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4838520Z     
2025-01-22T20:11:26.4838580Z         Examples
2025-01-22T20:11:26.4838620Z         --------
2025-01-22T20:11:26.4838700Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4838760Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4838810Z         1
2025-01-22T20:11:26.4838850Z     
2025-01-22T20:11:26.4838930Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4838990Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4839040Z         slice(1, 3, None)
2025-01-22T20:11:26.4839080Z     
2025-01-22T20:11:26.4839160Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4839230Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4839290Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4839330Z         """
2025-01-22T20:11:26.4839400Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4839450Z         try:
2025-01-22T20:11:26.4839520Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4839570Z         except KeyError as err:
2025-01-22T20:11:26.4839640Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4839720Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4839890Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4839940Z             ):
2025-01-22T20:11:26.4840000Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4840060Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4840120Z E           KeyError: 'cups'
2025-01-22T20:11:26.4840120Z 
2025-01-22T20:11:26.4840340Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4840490Z ___ ERROR at setup of TestPlasma.test_zeta_data[nlte:{'species': ['He I']}] ____
2025-01-22T20:11:26.4840500Z 
2025-01-22T20:11:26.4840620Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4840790Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4840840Z        't046000', 't048000'],
2025-01-22T20:11:26.4840890Z       dtype='object')
2025-01-22T20:11:26.4840940Z key = 'cups'
2025-01-22T20:11:26.4840950Z 
2025-01-22T20:11:26.4841000Z     def get_loc(self, key):
2025-01-22T20:11:26.4841040Z         """
2025-01-22T20:11:26.4841170Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4841210Z     
2025-01-22T20:11:26.4841250Z         Parameters
2025-01-22T20:11:26.4841300Z         ----------
2025-01-22T20:11:26.4841340Z         key : label
2025-01-22T20:11:26.4841380Z     
2025-01-22T20:11:26.4841430Z         Returns
2025-01-22T20:11:26.4841470Z         -------
2025-01-22T20:11:26.4841570Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4841620Z     
2025-01-22T20:11:26.4841660Z         Examples
2025-01-22T20:11:26.4841710Z         --------
2025-01-22T20:11:26.4841780Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4841840Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4841930Z         1
2025-01-22T20:11:26.4841980Z     
2025-01-22T20:11:26.4842050Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4842120Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4842170Z         slice(1, 3, None)
2025-01-22T20:11:26.4842220Z     
2025-01-22T20:11:26.4842300Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4842360Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4842420Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4842460Z         """
2025-01-22T20:11:26.4842540Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4842580Z         try:
2025-01-22T20:11:26.4842660Z >           return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4842660Z 
2025-01-22T20:11:26.4842860Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805: 
2025-01-22T20:11:26.4842950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4843060Z index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4843110Z     ???
2025-01-22T20:11:26.4843210Z index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-01-22T20:11:26.4843250Z     ???
2025-01-22T20:11:26.4843470Z pandas/_libs/hashtable_class_helper.pxi:7081: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-01-22T20:11:26.4843510Z     ???
2025-01-22T20:11:26.4843600Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4843600Z 
2025-01-22T20:11:26.4843640Z >   ???
2025-01-22T20:11:26.4843700Z E   KeyError: 'cups'
2025-01-22T20:11:26.4843700Z 
2025-01-22T20:11:26.4843790Z pandas/_libs/hashtable_class_helper.pxi:7089: KeyError
2025-01-22T20:11:26.4843800Z 
2025-01-22T20:11:26.4843930Z The above exception was the direct cause of the following exception:
2025-01-22T20:11:26.4843940Z 
2025-01-22T20:11:26.4844110Z self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x13fec6810>
2025-01-22T20:11:26.4844390Z chianti_he_db_fpath = PosixPath('/Users/runner/work/tardis/tardis/tardis-regression-data/atom_data/chianti_He.h5')
2025-01-22T20:11:26.4844940Z config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...bility': 0.0, 'enable_biasing': False, 'virtual_packet_logging': False}}, 'config_dirname': 'tardis/plasma/tests/data'}
2025-01-22T20:11:26.4844950Z 
2025-01-22T20:11:26.4845010Z     @pytest.fixture(scope="class")
2025-01-22T20:11:26.4845070Z     def plasma(
2025-01-22T20:11:26.4845110Z         self,
2025-01-22T20:11:26.4845170Z         chianti_he_db_fpath,
2025-01-22T20:11:26.4845210Z         config,
2025-01-22T20:11:26.4845260Z     ):
2025-01-22T20:11:26.4845340Z         config["atom_data"] = str(chianti_he_db_fpath)
2025-01-22T20:11:26.4845410Z >       sim = Simulation.from_config(config)
2025-01-22T20:11:26.4845410Z 
2025-01-22T20:11:26.4845500Z tardis/plasma/tests/test_complete_plasmas.py:171: 
2025-01-22T20:11:26.4845590Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4845680Z tardis/simulation/base.py:769: in from_config
2025-01-22T20:11:26.4845750Z     plasma = assemble_plasma(
2025-01-22T20:11:26.4845880Z tardis/plasma/assembly/legacy_assembly.py:37: in assemble_plasma
2025-01-22T20:11:26.4845960Z     return plasma_solver_factory.assemble(
2025-01-22T20:11:26.4846040Z tardis/plasma/assembly/base.py:614: in assemble
2025-01-22T20:11:26.4846090Z     return BasePlasma(
2025-01-22T20:11:26.4846150Z tardis/io/util.py:195: in __new__
2025-01-22T20:11:26.4846210Z     instance.__init__(*args, **kwargs)
2025-01-22T20:11:26.4846270Z tardis/plasma/base.py:40: in __init__
2025-01-22T20:11:26.4846320Z     self.update(**kwargs)
2025-01-22T20:11:26.4846380Z tardis/plasma/base.py:192: in update
2025-01-22T20:11:26.4846470Z     self.plasma_properties_dict[module_name].update()
2025-01-22T20:11:26.4846560Z tardis/plasma/properties/base.py:110: in update
2025-01-22T20:11:26.4846680Z     self.calculate(*self._get_input_values()),
2025-01-22T20:11:26.4846840Z tardis/plasma/properties/partition_function.py:315: in _calculate_general
2025-01-22T20:11:26.4846960Z     general_level_boltzmann_factor = self._main_nlte_calculation(
2025-01-22T20:11:26.4847120Z tardis/plasma/properties/partition_function.py:218: in _main_nlte_calculation
2025-01-22T20:11:26.4847190Z     rate_matrix = rate_matrix_solver.solve(
2025-01-22T20:11:26.4847290Z tardis/plasma/equilibrium/rate_matrix.py:51: in solve
2025-01-22T20:11:26.4847430Z     solver.solve(required_arg[arg]) for solver, arg in self.rate_solvers
2025-01-22T20:11:26.4847560Z tardis/plasma/equilibrium/rates/collisional_rates.py:87: in solve
2025-01-22T20:11:26.4847700Z     thermal_all_collision_strengths = self.calculate_collision_strengths(
2025-01-22T20:11:26.4847900Z tardis/plasma/equilibrium/rates/collisional_rates.py:161: in calculate_collision_strengths
2025-01-22T20:11:26.4848050Z     self.thermal_collision_strength_solver.solve(temperatures_electron)
2025-01-22T20:11:26.4848190Z tardis/plasma/equilibrium/rates/collision_strengths.py:216: in solve
2025-01-22T20:11:26.4848280Z     upsilon_g_lu = self.upsilon_lu_data.apply(
2025-01-22T20:11:26.4848490Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/frame.py:10374: in apply
2025-01-22T20:11:26.4848590Z     return op.apply().__finalize__(self, method="apply")
2025-01-22T20:11:26.4848790Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:916: in apply
2025-01-22T20:11:26.4848840Z     return self.apply_standard()
2025-01-22T20:11:26.4849070Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1063: in apply_standard
2025-01-22T20:11:26.4849160Z     results, res_index = self.apply_series_generator()
2025-01-22T20:11:26.4849410Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/apply.py:1081: in apply_series_generator
2025-01-22T20:11:26.4849500Z     results[i] = self.func(v, *self.args, **self.kwargs)
2025-01-22T20:11:26.4849690Z tardis/plasma/equilibrium/rates/collision_strengths.py:157: in upsilon_scaling
2025-01-22T20:11:26.4849790Z     scaling_constant = row["cups"]
2025-01-22T20:11:26.4850020Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1121: in __getitem__
2025-01-22T20:11:26.4850080Z     return self._get_value(key)
2025-01-22T20:11:26.4850300Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/series.py:1237: in _get_value
2025-01-22T20:11:26.4850360Z     loc = self.index.get_loc(label)
2025-01-22T20:11:26.4850450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-01-22T20:11:26.4850450Z 
2025-01-22T20:11:26.4850580Z self = Index(['g_ratio', 'delta_e', 't002000', 't004000', 't006000', 't008000',
2025-01-22T20:11:26.4850760Z        't010000', 't012000', 't014000', 't016...  't034000', 't036000', 't038000', 't040000', 't042000', 't044000',
2025-01-22T20:11:26.4850820Z        't046000', 't048000'],
2025-01-22T20:11:26.4850870Z       dtype='object')
2025-01-22T20:11:26.4850920Z key = 'cups'
2025-01-22T20:11:26.4850920Z 
2025-01-22T20:11:26.4850980Z     def get_loc(self, key):
2025-01-22T20:11:26.4851020Z         """
2025-01-22T20:11:26.4851150Z         Get integer location, slice or boolean mask for requested label.
2025-01-22T20:11:26.4851190Z     
2025-01-22T20:11:26.4851240Z         Parameters
2025-01-22T20:11:26.4851280Z         ----------
2025-01-22T20:11:26.4851330Z         key : label
2025-01-22T20:11:26.4851370Z     
2025-01-22T20:11:26.4851410Z         Returns
2025-01-22T20:11:26.4851450Z         -------
2025-01-22T20:11:26.4851560Z         int if unique index, slice if monotonic index, else mask
2025-01-22T20:11:26.4851600Z     
2025-01-22T20:11:26.4851640Z         Examples
2025-01-22T20:11:26.4851690Z         --------
2025-01-22T20:11:26.4851760Z         >>> unique_index = pd.Index(list('abc'))
2025-01-22T20:11:26.4851820Z         >>> unique_index.get_loc('b')
2025-01-22T20:11:26.4851910Z         1
2025-01-22T20:11:26.4851950Z     
2025-01-22T20:11:26.4852030Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-01-22T20:11:26.4852100Z         >>> monotonic_index.get_loc('b')
2025-01-22T20:11:26.4852150Z         slice(1, 3, None)
2025-01-22T20:11:26.4852200Z     
2025-01-22T20:11:26.4852280Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-01-22T20:11:26.4852340Z         >>> non_monotonic_index.get_loc('b')
2025-01-22T20:11:26.4852400Z         array([False,  True, False,  True])
2025-01-22T20:11:26.4852450Z         """
2025-01-22T20:11:26.4852520Z         casted_key = self._maybe_cast_indexer(key)
2025-01-22T20:11:26.4852570Z         try:
2025-01-22T20:11:26.4852640Z             return self._engine.get_loc(casted_key)
2025-01-22T20:11:26.4852700Z         except KeyError as err:
2025-01-22T20:11:26.4852770Z             if isinstance(casted_key, slice) or (
2025-01-22T20:11:26.4852850Z                 isinstance(casted_key, abc.Iterable)
2025-01-22T20:11:26.4852950Z                 and any(isinstance(x, slice) for x in casted_key)
2025-01-22T20:11:26.4853000Z             ):
2025-01-22T20:11:26.4853060Z                 raise InvalidIndexError(key)
2025-01-22T20:11:26.4853120Z >           raise KeyError(key) from err
2025-01-22T20:11:26.4853180Z E           KeyError: 'cups'
2025-01-22T20:11:26.4853180Z 
2025-01-22T20:11:26.4853390Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812: KeyError
2025-01-22T20:11:26.4853490Z =============================== warnings summary ===============================
2025-01-22T20:11:26.4853570Z tardis/io/configuration/config_validator.py:6
2025-01-22T20:11:26.4853650Z tardis/io/configuration/config_validator.py:6
2025-01-22T20:11:26.4853890Z   /Users/runner/work/tardis/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
2025-01-22T20:11:26.4853940Z   
2025-01-22T20:11:26.4854850Z   jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
2025-01-22T20:11:26.4855160Z 
2025-01-22T20:11:26.4855380Z ../../../micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22
2025-01-22T20:11:26.4855660Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
2025-01-22T20:11:26.4855700Z   
2025-01-22T20:11:26.4855830Z   Jupyter is migrating its paths to use standard platformdirs
2025-01-22T20:11:26.4855950Z   given by the platformdirs library.  To remove this warning and
2025-01-22T20:11:26.4856080Z   see the appropriate new directories, set the environment variable
2025-01-22T20:11:26.4856190Z   `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
2025-01-22T20:11:26.4856310Z   The use of platformdirs will be the default in `jupyter_core` v6
2025-01-22T20:11:26.4856320Z 
2025-01-22T20:11:26.4861100Z tardis/io/tests/test_HDFWriter.py::test_multi_index_write
2025-01-22T20:11:26.4861330Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:26.4861500Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:276: PerformanceWarning:
2025-01-22T20:11:26.4861550Z   
2025-01-22T20:11:26.4861590Z   
2025-01-22T20:11:26.4861750Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:26.4861950Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-22T20:11:26.4861950Z 
2025-01-22T20:11:26.4862100Z tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
2025-01-22T20:11:26.4862280Z tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
2025-01-22T20:11:26.4862940Z tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
2025-01-22T20:11:26.4863080Z tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
2025-01-22T20:11:26.4863330Z   /Users/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
2025-01-22T20:11:26.4863380Z   
2025-01-22T20:11:26.4863460Z   The current CMFGEN model parser is deprecated
2025-01-22T20:11:26.4863460Z 
2025-01-22T20:11:26.4863550Z tardis/io/tests/test_model_reader.py: 1 warning
2025-01-22T20:11:26.4863690Z tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
2025-01-22T20:11:26.4863940Z   /Users/runner/work/tardis/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
2025-01-22T20:11:26.4863980Z   
2025-01-22T20:11:26.4864060Z   The current CMFGEN model parser is deprecated
2025-01-22T20:11:26.4864060Z 
2025-01-22T20:11:26.4864230Z tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
2025-01-22T20:11:26.4864520Z   /Users/runner/work/tardis/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
2025-01-22T20:11:26.4864570Z   
2025-01-22T20:11:26.4864880Z   [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m
2025-01-22T20:11:26.4864880Z 
2025-01-22T20:11:26.4864950Z tardis/model/tests/test_base.py: 6 warnings
2025-01-22T20:11:26.4865040Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-22T20:11:26.4865170Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-22T20:11:26.4865380Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
2025-01-22T20:11:26.4865430Z   
2025-01-22T20:11:26.4865510Z   v_inner_boundary < 0, assuming default value
2025-01-22T20:11:26.4865510Z 
2025-01-22T20:11:26.4865580Z tardis/model/tests/test_base.py: 6 warnings
2025-01-22T20:11:26.4865660Z tardis/model/tests/test_csvy_model.py: 2 warnings
2025-01-22T20:11:26.4865790Z tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
2025-01-22T20:11:26.4866000Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
2025-01-22T20:11:26.4866140Z   
2025-01-22T20:11:26.4866210Z   v_outer_boundary < 0, assuming default value
2025-01-22T20:11:26.4866210Z 
2025-01-22T20:11:26.4866330Z tardis/plasma/tests/test_complete_plasmas.py: 17 warnings
2025-01-22T20:11:26.4866550Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:26.4866600Z   
2025-01-22T20:11:26.4866660Z   Property "atomic_mass" not found
2025-01-22T20:11:26.4866670Z 
2025-01-22T20:11:26.4867020Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
2025-01-22T20:11:26.4867320Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
2025-01-22T20:11:26.4867540Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:26.4867590Z   
2025-01-22T20:11:26.4867660Z   Property "j_blues_norm_factor" not found
2025-01-22T20:11:26.4867660Z 
2025-01-22T20:11:26.4867990Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
2025-01-22T20:11:26.4868290Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
2025-01-22T20:11:26.4868510Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:26.4868550Z   
2025-01-22T20:11:26.4868620Z   Property "j_blue_estimator" not found
2025-01-22T20:11:26.4868620Z 
2025-01-22T20:11:26.4868920Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
2025-01-22T20:11:26.4869190Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
2025-01-22T20:11:26.4869470Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:26.4869520Z   
2025-01-22T20:11:26.4869580Z   Property "volume" not found
2025-01-22T20:11:26.4869580Z 
2025-01-22T20:11:26.4870030Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
2025-01-22T20:11:26.4870300Z tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
2025-01-22T20:11:26.4870520Z   /Users/runner/work/tardis/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
2025-01-22T20:11:26.4870570Z   
2025-01-22T20:11:26.4870620Z   Property "r_inner" not found
2025-01-22T20:11:26.4870630Z 
2025-01-22T20:11:26.4870790Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
2025-01-22T20:11:26.4870960Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
2025-01-22T20:11:26.4871110Z tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
2025-01-22T20:11:26.4871300Z   /Users/runner/work/tardis/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
2025-01-22T20:11:26.4871340Z   
2025-01-22T20:11:26.4871490Z   Requesting inner boundary below inner shell. Extrapolating the inner cell
2025-01-22T20:11:26.4871490Z 
2025-01-22T20:11:26.4871660Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-22T20:11:26.4871820Z   /Users/runner/work/tardis/tardis/tardis/spectrum/base.py:70: UserWarning:
2025-01-22T20:11:26.4871860Z   
2025-01-22T20:11:26.4872130Z   SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0
2025-01-22T20:11:26.4872130Z 
2025-01-22T20:11:26.4872300Z tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
2025-01-22T20:11:26.4872450Z   /Users/runner/work/tardis/tardis/tardis/spectrum/base.py:111: UserWarning:
2025-01-22T20:11:26.4872500Z   
2025-01-22T20:11:26.4872830Z   SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.
2025-01-22T20:11:26.4872840Z 
2025-01-22T20:11:26.4873000Z tardis/transport/montecarlo/tests/test_vpacket.py::test_trace_vpacket_volley
2025-01-22T20:11:26.4873080Z   <string>:3: NumbaPendingDeprecationWarning:
2025-01-22T20:11:26.4873130Z   
2025-01-22T20:11:26.4873940Z   [1m[1mCode using Numba extension API maybe depending on 'old_style' error-capturing, which is deprecated and will be replaced by 'new_style' in a future release. See details at https://numba.readthedocs.io/en/latest/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors
2025-01-22T20:11:26.4877670Z   Exception origin:
2025-01-22T20:11:26.4877910Z     File "/Users/runner/micromamba/envs/tardis/lib/python3.12/inspect.py", line 3180, in _bind
2025-01-22T20:11:26.4877980Z       raise TypeError(msg) from None
2025-01-22T20:11:26.4878080Z   [0m[0m
2025-01-22T20:11:26.4878090Z 
2025-01-22T20:11:26.4878360Z tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
2025-01-22T20:11:26.4878580Z   /Users/runner/work/tardis/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
2025-01-22T20:11:26.4878630Z   
2025-01-22T20:11:26.4879300Z   More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
2025-01-22T20:11:26.4879310Z 
2025-01-22T20:11:26.4879590Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4879870Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4880290Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4880570Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4880830Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4881110Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4881390Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:26.4881440Z   
2025-01-22T20:11:26.4881590Z   Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
2025-01-22T20:11:26.4881730Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:26.4881920Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:26.4881930Z 
2025-01-22T20:11:26.4882210Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4882490Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4882760Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:26.4882810Z   
2025-01-22T20:11:26.4882940Z   Passing unrecognized arguments to super(FloatText).__init__(min=0).
2025-01-22T20:11:26.4883080Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:26.4883260Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:26.4883260Z 
2025-01-22T20:11:26.4883540Z tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
2025-01-22T20:11:26.4883920Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
2025-01-22T20:11:26.4883970Z   
2025-01-22T20:11:26.4884100Z   Passing unrecognized arguments to super(HTML).__init__(indent=True).
2025-01-22T20:11:26.4884230Z   object.__init__() takes exactly one argument (the instance to initialize)
2025-01-22T20:11:26.4884420Z   This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.
2025-01-22T20:11:26.4884420Z 
2025-01-22T20:11:26.4884770Z tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
2025-01-22T20:11:26.4885040Z   /Users/runner/micromamba/envs/tardis/lib/python3.12/site-packages/qgridnext/grid.py:820: DeprecationWarning:
2025-01-22T20:11:26.4885080Z   
2025-01-22T20:11:26.4885290Z   QgridWidget._precision_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.
2025-01-22T20:11:26.4885300Z 
2025-01-22T20:11:26.4885500Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:26.4885670Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:289: PerformanceWarning:
2025-01-22T20:11:26.4885710Z   
2025-01-22T20:11:26.4885750Z   
2025-01-22T20:11:26.4885920Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:26.4886110Z   map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]
2025-01-22T20:11:26.4886120Z 
2025-01-22T20:11:26.4886320Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:26.4886480Z   /Users/runner/work/tardis/tardis/tardis/io/util.py:292: PerformanceWarning:
2025-01-22T20:11:26.4886520Z   
2025-01-22T20:11:26.4886560Z   
2025-01-22T20:11:26.4886720Z   your performance may suffer as PyTables will pickle object types that it cannot
2025-01-22T20:11:26.4886900Z   map directly to c-types [inferred_type->mixed,key->values] [items->None]
2025-01-22T20:11:26.4886900Z 
2025-01-22T20:11:26.4887100Z tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
2025-01-22T20:11:26.4887290Z   /Users/runner/work/tardis/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
2025-01-22T20:11:26.4887330Z   
2025-01-22T20:11:26.4887540Z   The number of interpolate_shells was not specified. The value was set to 80.
2025-01-22T20:11:26.4887540Z 
2025-01-22T20:11:26.4887700Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-01-22T20:11:26.4887700Z 
2025-01-22T20:11:26.4887830Z ---------- coverage: platform darwin, python 3.12.4-final-0 ----------
2025-01-22T20:11:26.4887920Z Coverage HTML written to dir coverage_html_report
2025-01-22T20:11:26.4887990Z Coverage XML written to file coverage.xml
2025-01-22T20:11:26.4888000Z 
2025-01-22T20:11:26.4888100Z =========================== short test summary info ============================
2025-01-22T20:11:26.4888540Z ERROR tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths - AttributeError: 'NLTEData' object has no attribute 'C_ul_interpolator'
2025-01-22T20:11:26.4888930Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:26.4889320Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4889710Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:26.4890100Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4890720Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:26.4891080Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-w] - KeyError: 'cups'
2025-01-22T20:11:26.4891440Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:26.4891830Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4892230Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4892640Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:26.4893040Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:26.4893400Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] - KeyError: 'cups'
2025-01-22T20:11:26.4893800Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:26.4894210Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:26.4894920Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:26.4895320Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:26.4895680Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] - KeyError: 'cups'
2025-01-22T20:11:26.4896060Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:26.4896430Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:26.4896830Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-metastability] - KeyError: 'cups'
2025-01-22T20:11:26.4897200Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-delta] - KeyError: 'cups'
2025-01-22T20:11:26.4897620Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:26.4897990Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-phi] - KeyError: 'cups'
2025-01-22T20:11:26.4898380Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4898880Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:26.4899290Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4899700Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4900110Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:26.4900490Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:26.4900870Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:26.4901290Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:26.4901650Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:26.4902050Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4902500Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:26.4902870Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-volume] - KeyError: 'cups'
2025-01-22T20:11:26.4903250Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:26.4903640Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:26.4904050Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:26.4904380Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:26.4904770Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:26.4905180Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4905530Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:26.4905850Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I'], 'coronal_approximation': True}] - KeyError: 'cups'
2025-01-22T20:11:26.4906220Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:26.4906640Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4907010Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:26.4907380Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4907750Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:26.4908110Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-w] - KeyError: 'cups'
2025-01-22T20:11:26.4908470Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:26.4908840Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4909220Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4909610Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:26.4910130Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:26.4910490Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] - KeyError: 'cups'
2025-01-22T20:11:26.4910880Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:26.4911280Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:26.4911640Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:26.4912010Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:26.4912350Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] - KeyError: 'cups'
2025-01-22T20:11:26.4912720Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:26.4913090Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:26.4913470Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-metastability] - KeyError: 'cups'
2025-01-22T20:11:26.4913820Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-delta] - KeyError: 'cups'
2025-01-22T20:11:26.4914310Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:26.4914660Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-phi] - KeyError: 'cups'
2025-01-22T20:11:26.4915060Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4915440Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:26.4915840Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4916250Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4916640Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:26.4917010Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:26.4917380Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:26.4917840Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:26.4918210Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:26.4918590Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4918970Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:26.4919320Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-volume] - KeyError: 'cups'
2025-01-22T20:11:26.4919690Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:26.4920070Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:26.4920460Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:26.4920770Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:26.4921150Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:26.4921550Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4922310Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:26.4922630Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I'], 'classical_nebular': True}] - KeyError: 'cups'
2025-01-22T20:11:26.4922950Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_rad] - KeyError: 'cups'
2025-01-22T20:11:26.4923270Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-g_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4923590Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-selected_atoms] - KeyError: 'cups'
2025-01-22T20:11:26.4923920Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4924250Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-t_electrons] - KeyError: 'cups'
2025-01-22T20:11:26.4924550Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-w] - KeyError: 'cups'
2025-01-22T20:11:26.4924870Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-t_rad] - KeyError: 'cups'
2025-01-22T20:11:26.4925190Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4925530Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-level_boltzmann_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4926150Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-partition_function] - KeyError: 'cups'
2025-01-22T20:11:26.4926490Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-excitation_energy] - KeyError: 'cups'
2025-01-22T20:11:26.4926810Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines] - KeyError: 'cups'
2025-01-22T20:11:26.4927150Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] - KeyError: 'cups'
2025-01-22T20:11:26.4927490Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] - KeyError: 'cups'
2025-01-22T20:11:26.4927810Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-atomic_mass] - KeyError: 'cups'
2025-01-22T20:11:26.4928150Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-ionization_data] - KeyError: 'cups'
2025-01-22T20:11:26.4928450Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-nu] - KeyError: 'cups'
2025-01-22T20:11:26.4928770Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] - KeyError: 'cups'
2025-01-22T20:11:26.4929070Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-f_lu] - KeyError: 'cups'
2025-01-22T20:11:26.4929390Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-metastability] - KeyError: 'cups'
2025-01-22T20:11:26.4929720Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-delta] - KeyError: 'cups'
2025-01-22T20:11:26.4930150Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_electron_densities] - KeyError: 'cups'
2025-01-22T20:11:26.4930460Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-phi] - KeyError: 'cups'
2025-01-22T20:11:26.4930790Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-ion_number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4931120Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-electron_densities] - KeyError: 'cups'
2025-01-22T20:11:26.4931450Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-level_number_density] - KeyError: 'cups'
2025-01-22T20:11:26.4931800Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4932140Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:26.4932460Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] - KeyError: 'cups'
2025-01-22T20:11:26.4932770Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] - KeyError: 'cups'
2025-01-22T20:11:26.4933130Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-transition_probabilities] - KeyError: 'cups'
2025-01-22T20:11:26.4933440Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues] - KeyError: 'cups'
2025-01-22T20:11:26.4933840Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues_norm_factor] - KeyError: 'cups'
2025-01-22T20:11:26.4934170Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blue_estimator] - KeyError: 'cups'
2025-01-22T20:11:26.4934480Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-volume] - KeyError: 'cups'
2025-01-22T20:11:26.4934800Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-r_inner] - KeyError: 'cups'
2025-01-22T20:11:26.4935130Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-helium_population] - KeyError: 'cups'
2025-01-22T20:11:26.4935480Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-helium_population_updated] - KeyError: 'cups'
2025-01-22T20:11:26.4935750Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_levels[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:26.4936080Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I']}-time_explosion] - KeyError: 'cups'
2025-01-22T20:11:26.4936410Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_scalars_properties[nlte:{'species': ['He I']}-link_t_rad_t_electron] - KeyError: 'cups'
2025-01-22T20:11:26.4936700Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_helium_treatment[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:26.4936970Z ERROR tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_zeta_data[nlte:{'species': ['He I']}] - KeyError: 'cups'
2025-01-22T20:11:26.4937190Z = 1332 passed, 305 skipped, 2 deselected, 19 xfailed, 8 xpassed, 87 warnings, 130 errors in 786.17s (0:13:06) =
2025-01-22T20:11:28.2835640Z ##[error]Process completed with exit code 1.
